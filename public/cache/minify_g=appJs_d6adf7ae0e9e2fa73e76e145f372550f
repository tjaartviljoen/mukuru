;
(function ()
{


	//-> Ensure that we have a usable console object so that we don't crash finicky browsers.
	if (!window.console)
	{
		var names = [
			    "log", "debug", "info", "warn", "error",
			    "assert", "dir", "dirxml", "group", "groupEnd", "time",
			    "timeEnd", "count", "trace", "profile", "profileEnd"
		    ],
		    i,
		    l = names.length,
		    noOp = function () {};
		window.console = {};
		for (i = 0; i < l; i = i + 1)
		{
			window.console[names[i]] = noOp;
		}
	}

	window._w = {

		itemId: null,
		itemData: null,
		formMeta: null,
		apeLoaded: false,
		apeLive: false,
		altAlertBox: false,
		alertTimeout: false,
		alertTimeMsg: false,
		formSize: '',
		formStyle: '',
		alertType: '',
		singleSearchMap: {},
		contextVisible: false,
		jqXHR: {},
		gridSearchOverride: {},
		storeDataCache: {},
		storeDataTerm: '',
		userDataCache: {},
		userDataTerm: '',
		dealGenUpdate: {},
		dguSection: {},

		/**
		 * Initialize generic modal container.
		 */
		init: function ()
		{
			App.Container.register(
				// containerId
				'frmModal',
				// contentTarget
				'modalFormContent',
				// setTitle
				function (title)
				{
					$('#modalFormTitle').html(title);
				},
				// show
				function (options)
				{
					var con = App.Container.containers.frmModal;
					if ('' != con.formSize)
					{
						$('#frmModal').removeClass(con.formSize);
					}
					if ('' != con.formStyle)
					{
						$('#frmModal').removeClass(con.formStyle);
					}
					if (options.size)
					{
						con.formSize = 'modal-' + options.size;
						$('#frmModal').addClass(con.formSize);
					}
					if (options.style)
					{
						con.formStyle = options.style;
						$('#frmModal').addClass(con.formStyle);
					}
					$('#frmModal').modal({
						backdrop: 'static',
						show: true
					});
				},
				// hide
				function ()
				{
					$('#frmModal').modal('hide');
					$('#modalFormContent').html('Loading...');
				},
				// params
				{
					formSize: '',
					formStyle: ''
				}
			);
			App.Container.register(
				// containerId
				'frmHeader',
				// contentTarget
				'headerForm',
				// setTitle
				function (title)
				{
					// Nothing to do
				},
				// show
				function (options)
				{
					$('#headerFormContent').show();
				},
				// hide
				function ()
				{
					$('#headerFormContent').hide();
					$('#modalFormContent').html('Loading...');
				},
				// params
				{
					formSize: '',
					formStyle: ''
				}
			);
		},


		/**
		 * Generic notification functionality.
		 */
		alert: function (title, notification, type, permanent)
		{
			if (!_w.altAlertBox)
			{
				// Enforce using page specific alert containers.
				return false;
			}
			if (_w.alertTimeout)
			{
				_w.alertTimeMsg = {
					title: title,
					notification: notification,
					type: type,
					permanent: permanent
				};
				return;
			}
			if (!permanent)
			{
				_w.alertTimeout = true;
			}
			var id = _w.altAlertBox
				? _w.altAlertBox
				: 'alertPrimary';
			$('#' + id)
				.removeClass('alert-danger')
				.removeClass('alert-success')
				.removeClass('alert-info')
				.removeClass('alert-warning');
			type = type
				? type
				: 'info';
			_w.alertType = 'alert-' + type;
			$('#' + id).addClass(_w.alertType);
			$('#' + id).html(
				(title
					? '<strong>' + title + ':</strong> '
					: '')
				+ notification);
			$('#' + id).show(300);
			if (!permanent)
			{
				setTimeout($.proxy(function (id)
				{
					_w.alertTimeout = false;
					if (_w.alertTimeMsg)
					{
						_w.alert(
							_w.alertTimeMsg.title,
							_w.alertTimeMsg.notification,
							_w.alertTimeMsg.type,
							_w.alertTimeMsg.permanent
						);
						_w.alertTimeMsg = false;
					}
					else
					{
						$('#' + id).hide(300);
					}
				}, this, id), 4000);
			}
		},

		notify: function (title, content)
		{
			$('#modalNotifyTitle').html(title);
			$('#modalNotifyContent').html(content);
			$('#modalNotify').modal('show');
		},

		quickConfirm: function (id, yesCallback, noCallback)
		{
			var element = 'span.confirm[data-id="' + id + '"]';
			$(element).popover({
				html: true,
				placement: 'left',
				title: 'Are you sure?',
				content: App.Theme.Grid.ConfirmationContent
			});
			$(element).popover('show');
			$('#actionConfirmation').click($.proxy(function (element, yesCallback)
			{
				$('#actionConfirmation').unbind('click');
				$('#actionDecline').unbind('click');
				$(element).popover('hide');
				$(element).popover('destroy');
				if (undefined != yesCallback)
				{
					yesCallback();
				}
			}, this, element, yesCallback));
			$('#actionDecline').click($.proxy(function (element, noCallback)
			{
				$('#actionConfirmation').unbind('click');
				$('#actionDecline').unbind('click');
				$(element).popover('hide');
				$(element).popover('destroy');
				if (undefined != noCallback)
				{
					noCallback();
				}
			}, this, element, noCallback));
		},

		confirm: function (question, yesCallback, noCallback)
		{
			$('#modalConfirmContent').html(question);
			$('#modalConfirm').modal({
				backdrop: 'static',
				show: true
			});
			if (undefined != yesCallback)
			{
				$('#btnConfirmYes').click($.proxy(function (callback)
				{
					$('#btnConfirmYes').unbind('click');
					$('#btnConfirmNo').unbind('click');
					callback();
				}, this, yesCallback));
			}
			if (undefined != noCallback)
			{
				$('#btnConfirmNo').click($.proxy(function (callback)
				{
					$('#btnConfirmYes').unbind('click');
					$('#btnConfirmNo').unbind('click');
					callback();
				}, this, noCallback));
			}
		},


		/**
		 * Usefull delay functionality for single-search usage.
		 */
		delay: (function ()
		{
			var timer = 0;
			return function (callback, ms)
			{
				clearTimeout(timer);
				timer = setTimeout(callback, ms);
			};
		})(),


		/**
		 * Session expiry warning service.
		 */
		sessionUpdate: function ()
		{
			return;
			if (!App.Authenticated)
			{
				return;
			}
			_w.delay(function ()
			{
				App.Authenticated = false;
				App.permissions = {};
				App.companyData = {};
				App.Sudo = {};
				App.userData = {};
				App.API.execTask(
					'logout', 'Profile', 'Logout',
					{}, function ()
					{
						window.location = '/';
					}, function () {}
				);
			}, 1680 * 1000); // 28 Minutes
		},


		/**
		 * Generic error handling functionality.
		 */
		contractErrorHandler: function (result)
		{
			if (App.Config.isDevEnvironment)
			{
				//console.log(result);
			}
			var message = result.StatusReason + "<br/>";
			if ('Invalid contract request. No such contract found for execution.' == result.StatusReason
			    || 'Authentication required for this functionality.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},

		execErrorHandler: function (result)
		{
			var message = result.StatusReason + "<br/>";
			if ('Invalid contract request. No such contract found for execution.' == result.StatusReason
			    || 'Authentication required for this functionality.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			if (result.Messages && result.Messages.Base)
			{
				message += "<br/>";
				for (var ns in result.Messages.Base)
				{
					message += ns + ":<br/>";
					message += result.Messages.Base[ns].join("<br/>");
					message += "<br/>";
				}
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},

		routeErrorHandler: function (result)
		{
			if (App.Config.isDevEnvironment)
			{
				//console.log(result);
			}
			var message = result.StatusReason + "<br/>";
			if ('Invalid route request. No such route found for execution.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},


		/**
		 * Permissions utility to check for valid permissions.
		 */
		checkPermissions: function (permissions, onFail, onSuccess)
		{
			if (undefined != permissions
			    && 0 < permissions.length)
			{
				if (!App.Authenticated)
				{
					return false;
				}
				for (var i in permissions)
				{
					var perm = permissions[i];
					if (!App.permissions[perm])
					{
						if (onFail)
						{
							onFail();
						}
						return false;
					}
				}
			}
			if (onSuccess)
			{
				onSuccess();
			}
			return true;
		},


		/**
		 * Setup data collection and publication for forms and grids on load.
		 */
		setupContracts: function ()
		{
			for (var form in this.forms)
			{
				if (this.forms[form].ids)
				{
					for (var internalField in this.forms[form].ids)
					{
						var idField = this.forms[form].ids[internalField];
						this[internalField] = this.forms[form].idSource
							? App.Controller.formParams[this.forms[form].idSource][idField]
							: App.Util.getUrlParam(idField);
						if (isNaN(this[internalField]))
						{
							this[internalField] = 0;
						}
					}
					this.newItem = (0 == this.itemId)
						? true
						: false;
					this.haveData = this.newItem
						? true
						: false;
					this.actionContext = this.forms[form].initContext();
				}
			}
			if (this.contracts)
			{
				this.contracts();
			}
			if (this.grids)
			{
				$.proxy(_w.initGrids, this)();
			}
			for (var form in this.forms)
			{
				var chosen = this.forms[form].choose();
				if (!this.forms[form].actions || !this.forms[form].actions[chosen])
				{
					return;
				}
				var action = this.forms[form].actions[chosen];
				var data = this.itemId
					? {id: this.itemId}
					: {};
				var taskAlias = action.taskAlias
					? action.taskAlias()
					: false;
				if (this.forms[form].collect
				    && !this.forms[form].collect.except[chosen]
				    && this.forms[form].collect.execRequired)
				{
					App.API.execTask(
						this.forms[form].collect.taskAlias,
						this.forms[form].workspace,
						this.forms[form].collect.task,
						data,
						$.proxy(_w.formInitData, this, form),
						$.proxy(_w.execErrorHandler, this)
					);
				}
				else if (this.forms[form].collect
				         && !this.forms[form].collect.except[chosen])
				{
					App.API.execTask(
						this.forms[form].collect.taskAlias,
						this.forms[form].workspace,
						this.forms[form].collect.task,
						data,
						$.proxy(_w.formInitData, this, form),
						$.proxy(_w.execErrorHandler, this)
					);
				}
				else
				{
					$.proxy(_w.formInitData, this)(form, null);
				}
			}
		},


		/**
		 * Data-form functionality.
		 */
		formInitData: function (form, response)
		{
			this.haveData = true;
			this.ti.onPublish($.proxy(function (response)
			{
				$.proxy(_w.setupValidators, this)(
					null == response
						? null
						: response.Data
				);
			}, this, response));
			if (null != response)
			{
				$.proxy(_w.populateData, this)(
					form, this.forms[form].collect.assign(response.Data)
				);
			}
		},

		setupValidators: function (record)
		{
			record = record
				? record
				: null;
			for (var form in this.forms)
			{
				var rules = {};
				$.extend(true, rules, this.rules[form]);
				if (null == record)
				{
					// Create action.
					for (var r in rules)
					{
						if (undefined != rules[r].create)
						{
							rules[r] = $.extend({}, true, rules[r], rules[r].create);
							delete rules[r]['create'];
						}
						if (undefined != rules[r].update)
						{
							delete rules[r]['update'];
						}
					}
				}
				else
				{
					// Update action
					for (var r in rules)
					{
						if (undefined != rules[r].create)
						{
							delete rules[r]['create'];
						}
						if (undefined != rules[r].update)
						{
							rules[r] = $.extend({}, true, rules[r], rules[r].update);
							delete rules[r]['update'];
						}
					}
				}
				this.buttonRollback = [];
				for (var action in this.forms[form].actions)
				{
					if (this.forms[form].actions[action].button
					    && this.forms[form].actions[action].enable(record))
					{
						if (_w.checkPermissions(this.forms[form].actions[action].permissions, function () {}))
						{
							$('#' + this.forms[form].actions[action].button.id).show();
							this.buttonRollback.push(this.forms[form].actions[action].button.id);
						}
					}
				}
				this.forms[form].validations = 0;
				$('#' + form).validate({
					rules: rules,
					messages: this.messages[form],
					invalidHandler: $.proxy(function (formName, event, validator)
					{
						var errors = validator.numberOfInvalids();
						if (0 < this.forms[formName].validations && errors)
						{
							var message = errors == 1
								? 'You missed 1 field. It has been highlighted'
								: 'You missed ' + errors + ' fields. They have been highlighted';
							//_w.notify('Validation Errors', message);
						}
						this.forms[formName].validations++;
					}, this, form),
					submitHandler: $.proxy(function (formName)
					{
						var chosen = this.forms[formName].choose();
						if (!this.forms[formName].actions || !this.forms[formName].actions[chosen])
						{
							return;
						}
						var action = this.forms[formName].actions[chosen];
						if (action.postValidate)
						{
							if (!action.postValidate())
							{
								return;
							}
						}
						this.buttonRollback = [];
						if (this.forms[formName].buttons)
						{
							for (var i in this.forms[formName].buttons)
							{
								if (!$('#' + this.forms[formName].buttons[i]).prop('disabled'))
								{
									this.buttonRollback.push(
										this.forms[formName].buttons[i]
									);
									$('#' + this.forms[formName].buttons[i]).prop('disabled', true);
								}
							}
						}
						var data = this.ti.harvest(form);
						if (this.forms[formName].dataTransform)
						{
							data = this.forms[formName].dataTransform(data);
						}
						if (this.forms[formName].preExecute)
						{
							this.forms[formName].preExecute();
						}
						if (action.dataTransform)
						{
							data = action.dataTransform(data);
						}
						if (action.preExecute)
						{
							action.preExecute();
						}
						if (!action.taskAlias)
						{
							if (action.customAction)
							{
								action.customAction(data);
							}
							return;
						}
						var taskAlias = action.taskAlias();
						if (action.task)
						{
							var requestData = this.itemId
								? {id: this.itemId}
								: {};
							App.API.execTask(
								taskAlias,
								this.forms[formName].workspace,
								action.task,
								data,
								action.successHandler
									? $.proxy(action.successHandler, this)
									: $.proxy(App.Controller.closeForm, App.Controller, this.ti.container, 'Success'),
								action.errorHandler
									? $.proxy(action.errorHandler, this)
									: $.proxy(_w.execErrorHandler, this),
								action.method
									? action.method
									: false,
								action.direct
									? action.direct
									: false
							);
						}
					}, this, form)
				});
				try
				{
					this.forms[form].validations = 0;
					$('#' + form).valid();
				}
				catch (err)
				{
				}
				$('label.error').remove();
				$.each($('.error'), function (i, elem)
				{
					$(elem).removeClass('error');
					$(elem).addClass('required');
				});
				$('.valid').removeClass('valid');
				for (var i in this.buttonRollback)
				{
					$('#' + this.buttonRollback[i]).prop('disabled', false);
				}
			}
		},

		populateData: function (formName, data)
		{
			var disable = false;
			if (this.forms[formName].disableFieldsOnValue)
			{
				disable = this.forms[formName].disableFieldsOnValue(data);
			}
			var fields = this.forms[formName].fields;
			for (var elemId in fields)
			{
				var fieldDisable = disable || fields[elemId].disabled
					? true
					: false;
				if (undefined == data[fields[elemId].namespace]
				    || undefined == data[fields[elemId].namespace][fields[elemId].field])
				{
					var value = '';
				}
				else
				{
					var value = data[fields[elemId].namespace][fields[elemId].field];
				}
				this.ti.hydrateParam(elemId, {value: value, disabled: fieldDisable});
			}
			if (this.forms[formName].dataPublished)
			{
				this.forms[formName].dataPublished(data);
			}
		},


		/**
		 * Data-grid functionality.
		 */
		initGrids: function ()
		{
			// Reques grid data.
			this.gridSearchFilter = {};
			for (var gridName in this.grids)
			{
				var grid = this.grids[gridName];
				if (grid.taskAlias && grid.workspace && grid.task)
				{
					_w.gridSearchOverride[gridName] = false;
					this.gridSearchFilter[gridName] = {};
					if (null == App.API.taskContract(grid.taskAlias))
					{
						App.API.getTask(
							grid.taskAlias, grid.workspace, grid.task, null,
							{}, $.proxy(_w.loadGrid, this, gridName), _w.contractErrorHandler
						);
					}
					else
					{
						$.proxy(_w.loadGrid, this)(gridName, null, {}, {});
					}
				}
			}
		},
		publishGrids: function ()
		{
			for (var gridName in this.grids)
			{
				// Setup context search functionality.
				var classes = [];
				for (var i in this.grids[gridName].contexts)
				{
					classes.push('.' + this.grids[gridName].contexts[i]);
				}
				$(classes.join(', ')).keypress($.proxy(function (gridName, evt)
				{
					var charCode = evt.charCode || evt.keyCode;
					if (charCode == 13)
					{
						$.proxy(_w.searchGrid, this)(gridName);
					}
				}, this, gridName));

				// Setup single-search functionality
				if (this.grids[gridName].dataFields.targets.singleSearchFilterId)
				{
					var filterId = this.grids[gridName].dataFields.targets.singleSearchFilterId;
					$('#' + filterId).keyup($.proxy(function (gridName, filterId, event)
					{
						if (event.keyCode == 13)
						{
							// Enter pressed, fast-trac the search.
							_w.delay($.proxy(function ()
							{
								var val = $('#' + filterId).val();
								if (val.length < 3)
								{
									$('#' + filterId).val('');
									val = '';
								}
								$.proxy(_w.singleSearchGrid, this)(gridName, filterId, val);
							}, this, gridName, filterId), 1);
							return false;
						}
						// Search value changed, wait 400ms for next keystroke else run the search.
						_w.delay($.proxy(function ()
						{
							var val = $('#' + filterId).val();
							if (val.length < 3)
							{
								val = '';
							}
							$.proxy(_w.singleSearchGrid, this)(gridName, filterId, val);
						}, this, gridName, filterId), 400);
					}, this, gridName, filterId));
					$('#' + filterId + 'SsForm').submit(function ()
					{
						return false;
					});
				}
			}
		},
		loadGrid: function (gridName, contract, data, options, report)
		{
			// We have a task contract, now we execute to retrieve data.
			if (!this.grids[gridName])
			{
				return;
			}
			if (!data)
			{
				data = {};
			}
			if (!data.Grid)
			{
				data.Grid = {};
			}
			if (!data.Grid.Filter)
			{
				data.Grid.Filter = {};
			}

			var baseFilter = {};
			if (undefined != this.grids[gridName].baseFilter)
			{
				baseFilter = typeof this.grids[gridName].baseFilter === 'function'
					? this.grids[gridName].baseFilter()
					: this.grids[gridName].baseFilter;
			}

			data.Grid.Filter = $.extend(true,
				{},
				baseFilter,
				data.Grid.Filter,
				this.gridSearchFilter[gridName],
				this.grids[gridName].defaultFilter
					? this.grids[gridName].defaultFilter
					: {},
				_w.gridSearchOverride[gridName]
					? _w.gridSearchOverride[gridName]
					: {},
				this.grids[gridName].baseSearch
					? ('function' == typeof this.grids[gridName].baseSearch
					? this.grids[gridName].baseSearch()
					: this.grids[gridName].baseSearch)
					: {}
			);

			// What type of request are we handling?
			if (!report)
			{
				// Regular grid data request.
				App.API.execTask(
					this.grids[gridName].taskAlias, data, options,
					$.proxy(_w.onGridDataReceived, this, gridName), _w.execErrorHandler
				);
			}
			else
			{
				// Excel grid export request.
				App.API.execTask(
					this.grids[gridName].taskAlias, {}, {'ExportToExcel': true},
					function () {}, _w.execErrorHandler,
					'EXPORT', true
				);
			}
		},
		clearSearch: function (gridName)
		{
			// Clear context and column filters.
			App.DataStore.setItem('GridContextClearing:' + gridName, true);
			var grid = this.grids[gridName];
			for (var i in grid.contexts)
			{
				try
				{
					$('.' + grid.contexts[i]).val('');
				}
				catch (err)
				{
				}
			}
			App.DataStore.removeItem('GridContextClearing:' + gridName);
			$.proxy(_w.searchGrid, this)(gridName, true);
		},
		singleSearchGrid: function (gridName, filterId, val)
		{
			// Prepare single search request filter.
			var filter = {
				count: 0,
				filters: {}
			};
			filter = App.DataElement.singleFilter(
				filter,
				val,
				_w.singleSearchMap[filterId]
			);
			this.gridSearchFilter[gridName] = filter.filters;
			var request = {
				"Grid": {
					"Page": 1,
					"Filter": filter.filters
				}
			};
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		searchGrid: function (gridName, resetOrder)
		{
			// Prepare search filters.
			if (undefined == this.grids[gridName]
			    || undefined == gridName)
			{
				//console.log('Cannot locate relevant grid');
				//console.log('gridName');
				//console.log(gridName);
				//console.log('context');
				//console.log(this);
			}
			var filter = {
				count: 0,
				filters: {}
			};
			var fieldMap = this.gridFieldMap[gridName];
			for (var elem in fieldMap)
			{
				filter = App.DataElement.filterIfnotEmpty(filter, elem, fieldMap[elem]);
			}
			var request = {
				"Grid": {
					"Page": 1,
					"Filter": filter.filters
				}
			};
			if (resetOrder && this.grids[gridName] && this.grids[gridName].defaultOrder)
			{
				request.Grid.OrderBy = this.grids[gridName].defaultOrder;
			}
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		refreshGrid: function (gridName, resetOrder)
		{
			// Prepare search filters.
			if (undefined == this.grids[gridName]
			    || undefined == gridName)
			{
				return;
			}
			var filter = {
				count: 0,
				filters: {}
			};
			var fieldMap = this.gridFieldMap[gridName];
			for (var elem in fieldMap)
			{
				filter = App.DataElement.filterIfnotEmpty(filter, elem, fieldMap[elem]);
			}
			var request = {
				"Grid": {
					"Filter": filter.filters
				}
			};
			if (resetOrder && this.grids[gridName] && this.grids[gridName].defaultOrder)
			{
				request.Grid.OrderBy = this.grids[gridName].defaultOrder;
			}
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		onGridDataReceived: function (gridName, response)
		{
			// Safety checks.
			if (!this.grids)
			{
				//console.log('Incorrect context passed to onGridDataReceived!');
				//console.log(this);
			}
			if (!this.gridFieldMap)
			{
				//console.log('FieldMap not yet built (onGridDataReceived).')
				//console.log(this);
			}

			// Put up a notice that we be messing with grid html.
			App.DataStore.setItem('GridDataPublishing:' + gridName, true);

			// Populate search filters back into html elements.
			var grid = this.grids[gridName];

			if (grid.onData)
			{
				grid.onData(response.Data.DataSet);
			}
			var fieldMap = this.gridFieldMap[gridName];
			var filters = {};
			for (var elem in fieldMap)
			{
				filters[filters[elem]] = elem;
			}
			if (response.Data.Meta.Filters.singleSearch)
			{
				App.DataElement.populateSingleFilter(
					response.Data.Meta.Filters.singleSearch,
					grid.dataFields.targets.singleSearchFilterId
				);
			}
			else
			{
				App.DataElement.populateFilters(response.Data.Meta.Filters, filters);
			}

			// Prepare the data.
			this.rawData = {};
			this.gridEntryUpdates = {};
			var gridData = [];
			for (var i = 0; i < response.Data.DataSet.length; i++)
			{
				var row = response.Data.DataSet[i];
				var cellData = {};
				for (var f in row)
				{
					row[f] = App.Util.htmlEncode(row[f]);
				}
				for (var field in grid.dataFields.items)
				{
					if (!this.gridFieldPermissions[gridName][field])
					{
						continue
					}
					cellData[field] = grid.dataFields.items[field].getValue(row);
				}
				var rowId = grid.gridDataRow.getRowId
					? grid.gridDataRow.getRowId(cellData)
					: i;
				this.rawData['id:' + rowId] = row;
				this.gridEntryUpdates['id:' + rowId] = {};
				gridData.push($.extend(true, {}, grid.gridDataRow, {
					rowId: rowId,
					items: cellData
				}));
			}

			// Rebuild the list of grid entries.
			this.ti.hydrateParam(grid.repeaterId, {
				items: gridData
			});

			// Rebuild the pager.
			if (grid.pagerId)
			{
				this.ti.hydrateParam(grid.pagerId, response.Data.Meta);
			}

			// Rebuild the page-size selector.
			if (grid.pageSizerId)
			{
				this.ti.hydrateParam(grid.pageSizerId, response.Data.Meta);
			}
			if (grid.pageRecords)
			{
				this.ti.hydrateParam(grid.pageRecords, response.Data.Meta);
			}

			// Editable columns, x-editable rocks!
			var editable = grid.gridDataRow.editable
				? grid.gridDataRow.editable
				: false;
			if (editable)
			{
				this.ti.onPublish($.proxy(function (gridName, editable)
				{
					//$('#' + editable.recordActionContainer).hide();
					$('#' + editable.recordActionContainer).attr('data-grid-name', gridName);
				}, this, gridName, editable));
				$('#' + this.ti.tid + ' .editable').on('hidden', function (e, reason)
				{
					if (reason === 'save' || reason === 'nochange')
					{
						var $next = $(this).closest('td').next().find('.editable');
						setTimeout(function ()
						{
							$next.editable('show');
						}, 300);
					}
				});
			}

			App.DataStore.removeItem('GridDataPublishing:' + gridName);

			if (grid.onLoadFinished)
			{
				grid.onLoadFinished(response.Data.Meta.Filters, response.Data.Meta.TotalRecords);
			}
		},
		orderGrid: function (grid, field, direction)
		{
			// Request a different order, can we do that with the goverment?
			var order = {};
			order[field] = direction;
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"Page": 1, "OrderBy": order}});
		},

		pageGrid: function (grid, page)
		{
			// Move to a specific data page.
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"Page": page}});
		},

		sizeGrid: function (grid, size)
		{
			// Change the data page size.
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"NumberOfRecords": size, "Page": 1}});
		},

		updateGridRowField: function (editable, rowId, field, value)
		{
			// Field value update from inline editing.
			if (undefined == this.gridEntryUpdates['id:' + rowId][editable.itemNS])
			{
				this.gridEntryUpdates['id:' + rowId][editable.itemNS] = {};
			}
			this.gridEntryUpdates['id:' + rowId][editable.itemNS][field] = value;
			var gridName = $('#' + editable.recordActionContainer).attr('data-grid-name');
			_w.alert(
				false,
				App.Theme.Grid.RecordUpdateAction
					.replaceAll('[eid]', gridName),
				'success',
				true
			);
			$('#' + gridName + '_yes').unbind('click');
			$('#' + gridName + '_yes').click(
				$.proxy(_w.updateGridEntries, this, gridName, editable)
			);
			$('#' + gridName + '_no').unbind('click');
			$('#' + gridName + '_no').click(
				$.proxy(_w.revertGridEntries, this, gridName, editable)
			);
		},

		revertGridEntries: function (gridName, editable)
		{
			// Throw away all local inline edited changes.
			$.proxy(_w.searchGrid, this)(gridName);
			_w.alert(
				false,
				'Changes ignored.',
				'success',
				false
			);
		},

		updateGridEntries: function (gridName, editable)
		{
			// Update on server all entries that were updated via inline editing.
			if (undefined == this.grids[gridName])
			{
				//console.log('updateGridEntries:context');
				//console.log(this);
			}
			var count = 0;
			for (var i in this.gridEntryUpdates)
			{
				if ($.isEmptyObject(this.gridEntryUpdates[i]))
				{
					continue;
				}
				count++;
			}
			this.gridEntryUpdateCount = count;
			this.gridEntryUpdated = 0;
			_w.alert(
				false,
				'Updating record 1 of ' + count + '...',
				'success',
				true
			);
			for (var i in this.gridEntryUpdates)
			{
				if ($.isEmptyObject(this.gridEntryUpdates[i]))
				{
					continue;
				}
				var data = this.gridEntryUpdates[i];
				if (undefined != editable.additionalData)
				{
					data = $.extend(true, {}, data, editable.additionalData);
				}
				var id = i.substr(3, i.length - 3);
				var jobId = editable.idIsJobId
					? id
					: null;
				App.API.getTask(
					editable.taskUpdate + ':' + id,
					editable.workspace,
					editable.taskUpdate,
					jobId,
					{id: id},
					$.proxy(function (gridName, editable, id, data)
					{
						App.API.execTask(
							editable.taskUpdate + ':' + id, data, {},
							$.proxy(_w.gridEntryUpdateMessage, this, gridName, editable),
							$.proxy(_w.execErrorHandler, this)
						);
					}, this, gridName, editable, id, data),
					$.proxy(_w.contractErrorHandler, this)
				);
			}

		},

		gridEntryUpdateMessage: function (gridName, editable)
		{
			// Provide the user some info on entry update progress.
			this.gridEntryUpdated++;
			if (this.gridEntryUpdated == this.gridEntryUpdateCount)
			{
				// All entries processed.
				$.proxy(_w.searchGrid, this)(gridName);
				_w.alert(
					false,
					'Changes saved.',
					'success',
					false
				);
				this.gridEntryUpdateCount = 0;
				this.gridEntryUpdated = 0;
				if (undefined != editable.onSuccessHandler)
				{
					editable.onSuccessHandler();
				}
			}
			else
			{
				// Still busy updating.
				_w.alert(
					false,
					'Updating record ' + (this.gridEntryUpdated + 1)
					+ ' of ' + this.gridEntryUpdateCount + '...',
					'success',
					true
				);
			}
		},

		validateInlineEdit: function (eid, meta, value)
		{
			// We need da same validation here as in regular form, boorah!
			// Inline edit field dynamically created, to validate we need to provide id and name attribs.
			var formId = new Date().getTime();
			var elemId = eid + '_' + formId;
			var elem = $('#' + eid).parent().find('input');
			$(elem).attr('id', elemId);
			$(elem).attr('name', elemId);

			// And we need a form, so wrap the element in such.
			$(elem).wrap('<form id="' + formId + '">');

			// Select2 be special, gets some special attention...
			if ('select2' == meta.dataType && meta.rules.required)
			{
				if ('' == $('#' + eid).next().find('.select2-chosen').html())
				{
					return 'This field is required';
				}
				return;
			}

			// Prepare validation rules.
			var rules = {};
			rules[elemId] = meta.rules
				? meta.rules
				: {};

			// Hook up the validator.
			var validator = $('#' + formId).validate({
				debug: true,
				rules: rules,
				submitHandler: function (form)
				{
					return false;
				}
			});

			// Check if stuff be valid.
			var isValid = true;
			try
			{
				isValid = $('#' + formId).valid();
			}
			catch (err)
			{
			}
			if (!isValid)
			{
				var msg = validator.errorList[0].message;
			}

			// Cleanup.
			$(elem).unwrap();
			$('label.error').remove();

			// Do we complain?
			if (!isValid)
			{
				return msg;
			}
		},

		validateSubForm: function (containerId, fields, isPermanent)
		{
			// Useful functionality to setup validator on a custom form.
			var formId = new Date().getTime();
			var container = $('#' + containerId);
			container.wrap('<form id="' + formId + '">');
			var rules = {};
			var messages = {};
			for (var field in fields)
			{
				if (fields[field].rules)
				{
					rules[field] = fields[field].rules;
				}
				if (fields[field].messages)
				{
					messages[field] = fields[field].messages;
				}
			}
			var validator = $('#' + formId).validate({
				rules: rules,
				messages: messages,
				submitHandler: function (form)
				{
					return false;
				}
			});
			var isValid = true;
			try
			{
				isValid = $('#' + formId).valid();
			}
			catch (err)
			{
			}
			if (!isPermanent)
			{
				container.unwrap();
				return isValid;
			}
		},

		cleanupSubFormValidation: function (containerId)
		{
			// Cleanup the mess we made.
			$('#' + containerId + ' input, #' + containerId + ' textarea').each(function (id, elem)
			{
				$(elem).val('');
			});
			$('#' + containerId + ' label.error').remove();
			$('#' + containerId + ' input.error, #' + containerId + ' input.valid').each(function (id, elem)
			{
				$(elem).removeClass('error');
				$(elem).removeClass('valid');
			});
			$('#' + containerId + ' textarea.error, #' + containerId + ' textarea.valid').each(function (id, elem)
			{
				$(elem).removeClass('error');
				$(elem).removeClass('valid');
			});
		},


		/**
		 * For meta vars that need data from post-initialization use this method.
		 */
		finaliseMeta: function ()
		{
			// Example:
			// App.DataStruct.Meta.module.dataQuery.data.Filter.project = App.projectId;
		},

		/**
		 * Called just before we know if we are authenticated or not.
		 */
		onLoad: function ()
		{
			_w.notifyDropVisible = false;
			$('.notify-dropdown').hide();
			_w.userDropVisible = false;
			$('.login-menu').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.userDropVisible)
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}
				else
				{
					$('.login-dropdown').fadeIn(300);
					_w.userDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}, 3000);
				$('.login-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.login-dropdown').fadeIn(300);
						_w.userDropVisible = true;
					}, 1);
				});
				$('.login-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.login-dropdown').fadeOut(300);
						_w.userDropVisible = false;
					}, 1000);
				});
			});
			$(document).click(function (evt)
			{
				evt.stopPropagation();
				if (_w.userDropVisible)
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}
			});
			$('.navbar-inverse li').click(function ()
			{
				$('.navbar-inverse li').removeClass('active');
				$(this).addClass('active');
			});
		},

		/**
		 * Connect to ape http push server.
		 */
		apeConnect: function ()
		{
			return;
			if (_w.apeLive)
			{
				return;
			}
			var client = new APE.Client;
			_w.chatChannelName = App.Config.appKey + '_generalnotice';
			client.load();
			client.addEvent('load', function ()
			{
				// Connect.
				client.core.start({
					"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
				});
				setTimeout(function ()
					{
						// If not yet connected we try again.
						if (!_w.apeChat)
						{
							client.core.start({
								"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
							});
							setTimeout(function ()
								{
									if (!_w.apeChat)
									{
										$('#liveStatus').html('<span class="glyphicon glyphicon-exclamation-sign"></span>');
									}
								}
								, 15000);
						}
					}
					, 15000);
			});
			client.addEvent('apeDisconnect', function ()
			{
				// On disconnect try to re-establish connection.
				_w.apeLive = false;
				$('#liveStatus').html('');
				client.core.start({
					"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
				});
				setTimeout(function ()
					{
						if (!_w.apeChat)
						{
							client.core.start({
								"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
							});
							setTimeout(function ()
								{
									if (!_w.apeChat)
									{
										$('#liveStatus').html('<span class="glyphicon glyphicon-exclamation-sign"></span>');
										window.location = window.location.href;
									}
								}
								, 15000);
						}
					}
					, 15000);
			});
			client.addEvent('ready', function ()
			{
				// Connected and ready to chat to the server.
				_w.apeChat = true;
				_w.apeLive = true;
				$('.notification-handle').show();
				$('#liveStatus').html('<span class="glyphicon glyphicon-fire"></span>');
				client.core.join(_w.chatChannelName);
				client.core.join(App.Config.appKey + '_user_' + App.userData.id);
				/*client.addEvent('multiPipeCreate', function(pipe, options) {
				 //console.log('Connected to:', options.pipe.properties.name);
				 _w.pipe = pipe;
				 _w.pipe.request.send('webhook', {
				 'registerUser':
				 {
				 id : App.userData.id
				 }
				 });
				 });*/
				client.onRaw('data', function (raw)
				{
					_w.handleServerCommand(raw.data);
				});
			});
		},
		/**
		 * Handle server commands received through push server.
		 */
		handleServerCommand: function (cmd)
		{
			switch (cmd.type)
			{
				case 'checkAuth':
					App.API.getTask(
						'getActiveAccount', 'User', 'Profile.ActiveAccount', null,
						{}, function (response)
						{
							App.DeviceTypes = response.Data.deviceTypes;
						}, _w.onActiveAccountFailure
					);
					break;
				case 'importProgress':
					$('.import-progress[data-import="' + cmd.params.id + '"]').attr('aria-valuenow', cmd.params.progress);
					$('.import-progress[data-import="' + cmd.params.id + '"]').css('width', cmd.params.progress + '%');
					$('.import-progress[data-import="' + cmd.params.id + '"]').html(cmd.params.progress + '%');
					if ('DeviceImport' == cmd.params.id && 100 == cmd.params.progress)
					{
						window.location.hash = '/dashboard-grid';
						_w.alert('Success', 'Devicess imported from DMP.');
					}
					break;
				case 'notify':
					_w.notify(cmd.title, cmd.message);
					break;
				case 'reload':
					if (!_w.openForm)
					{
						if (cmd.message)
						{
							_w.notify(cmd.title, cmd.message);
						}
						setTimeout(function ()
						{
							location.reload();
						}, 3000);
					}
					else
					{
						if (cmd.delayMessage)
						{
							_w.notify(cmd.title, cmd.delayMessage);
						}
						_w.onFormClose = function ()
						{
							location.reload();
						};
					}
					break;
				case 'kick':
					if (!_w.openForm)
					{
						_w.notify(cmd.title, cmd.message);
						App.Authenticated = false;
						App.permissions = {};
						App.companyData = {};
						App.Sudo = {};
						App.userData = {};
						setTimeout(function ()
						{
							App.API.execTask(
								'logout', 'Profile', 'Logout',
								{}, function ()
								{
									window.location = '/';
								}, function () {}
							);
						}, 3000);
					}
					else
					{
						_w.notify(cmd.title, cmd.delayMessage);
						_w.onFormClose = function ()
						{
							App.Authenticated = false;
							App.permissions = {};
							App.companyData = {};
							App.Sudo = {};
							App.userData = {};
							App.API.execTask(
								'logout', 'Profile', 'Logout',
								{}, function ()
								{
									window.location = '/';
								}, function () {}
							);
							location.reload();
						};
					}
					break;
				case 'permission-change':
					App.API.getTask(
						'getActiveAccount', 'User', 'Profile.ActiveAccount', null,
						{}, _w.onActiveAccount, _w.onActiveAccountFailure
					);
					break;
				case 'dealGenerationUpdate':
					var container = '#progressSection' + cmd.params.Id;
					var containerId = 'progressSection' + cmd.params.Id;
					_w.dealGenUpdate[container] = cmd.params;
					if (_t.dealcyclegrid.published)
					{
						if ('None' == cmd.params.Section)
						{
							//-> Remove section and refresh grid.
							$(container).remove();
							delete _w.dguSection[container];
							delete _w.dealGenUpdate[container];
							$.proxy(_w.searchGrid, _t.dealcyclegrid.template)('grdDealCycle');
							_t.dealcyclegrid.template.getCalculationErrors();
						}
						else
						{
							//-> Progress display.
							var progress = (-1 == cmd.params.Progress)
								? 'processing ...'
								: cmd.params.Progress + '%';
							if (!_w.dguSection[container])
							{
								//-> Section does not yet exist, create it.
								_w.dguSection[container] = true;
								$('#dguContainer').append(
									'<div id="' + containerId + '"><div class="col-md-12">'
									+ '<h5>Deal Generation: ' + cmd.params.DealCycle + '</h5></div>'
									+ '<div class="col-md-12">'
									+ '<div class="col-md-3 text-bold">'
									+ 'Duration:<br/>'
									+ 'Section:<br/>'
									+ 'Task:<br/>'
									+ 'Task Progress:<br/>'
									+ '<hr/>'
									+ '</div>'
									+ '<div class="col-md-7">'
									+ '<span id="' + containerId + 'Duration">' + cmd.params.Duration + '</span><br/>'
									+ '<span id="' + containerId + 'Section">' + cmd.params.Section + '</span><br/>'
									+ '<span id="' + containerId + 'Task">'
									+ '(' + cmd.params.NumTask + ' of ' + cmd.params.NumTasks + ') '
									+ cmd.params.Task
									+ '</span><br/>'
									+ '<span id="' + containerId + 'Progress">' + progress + '</span><br/>'
									+ '<hr/>'
									+ '</div>'
									+ '</div>'
									+ '</div>'
								);
								$.proxy(_w.searchGrid, _t.dealcyclegrid.template)('grdDealCycle');
							}
							else
							{
								//-> Update section with latest progress details.
								$(container + 'Duration').html(cmd.params.Duration);
								$(container + 'Section').html(cmd.params.Section);
								$(container + 'Task').html(
									'(' + cmd.params.NumTask + ' of ' + cmd.params.NumTasks + ') ' + cmd.params.Task
								);
								$(container + 'Progress').html(progress);
							}
						}
					}
					break;
			}
		},


		/**
		 * On successful login and on first load if user has an active session
		 * this function is called.
		 */
		onActiveAccount: function (response, fresh)
		{
			/*
			 * Prepare useful session data, all nicely packed out.
			 * (and show the main menu)
			 */
			App.Authenticated = true;
			App.userData = response.Data;
			App.userType = App.userData.userType;
			$('.navbar-inverse.ghost').removeClass('ghost');


			/*
			 * Some session data needed to finalise meta structs, so lets finalise.
			 */
			_w.finaliseMeta();

			/*
			 * Show and hook up logout button
			 */
			$('#lnkLogin').hide();
			$('#lnkLogout').removeClass('ghost');
			$('#lnkLogout').show();
			$('#lnkLogout').click(function ()
			{
				App.Authenticated = false;
				App.userData = {};
				App.userType = 'Guest';
				App.API.execTask(
					'logout', 'Profile', 'Logout',
					{}, function ()
					{
						window.location = '/';
					}, function () {}
				);
			});
			$('#mnuProfile').click(function ()
			{
				App.Controller.loadForm(
					'frmModal', 'My Profile', App.allowedSection, 'profile',
					{id: App.userData.id}, {}, null
				);
			});

			/*
			 * Show user details
			 */
			$('#infUserName').html(
				App.userData.firstName + ' ' + App.userData.familyName
			);
			$('#loggedIn').show();
			$('#loggedOut').hide();
			$('#userTxtOut').hide();
			$('#userTxtIn').show();
			$('#mnuUser').show();
			/*
			 * Init permissions and page listeners.
			 */
			if ('User' == App.userType)
			{
				App.allowedSection = 'portal';
				if (App.userData.forcePasswordChange)
				{
					window.location.hash = '/change-password';
				}
				else if (App.redirect)
				{
					_w.initPortal();
					window.location.hash = App.redirect;
					delete App.redirect;
				}
				else
				{
					_w.initPortal();
					window.location.hash = App.Config.sectionLandingPage.Portal;
				}
			}
			else if ('Administrator' == App.userType)
			{
				App.allowedSection = 'admin';
				if (App.userData.forcePasswordChange)
				{
					window.location.hash = '/change-password';
				}
				else if (App.redirect)
				{
					_w.initAdmin();
					window.location.hash = App.redirect;
					delete App.redirect;
				}
				else
				{
					_w.initAdmin();
					window.location.hash = window.location.hash = App.Config.sectionLandingPage.Admin;
				}
			}
			else
			{
				// No permissions at all
				App.allowedSection = 'brochure';
				window.location.hash = App.Config.sectionLandingPage.Brochure;
			}
			if (!App.started)
			{
				App.start();
			}
		},

		/**
		 * The user is not logged in.
		 */
		onActiveAccountFailure: function ()
		{
			/*
			 * User is not authenticated.
			 */
			$('.navbar-inverse').addClass('ghost');
			App.Authenticated = false;
			$('#loggedIn').hide();
			$('#loggedOut').show();
			$('#userTxtOut').show();
			$('#userTxtIn').hide();

			/* $('#user-details').addClass("invisible"); */

			/*
			 * Initialize brochure
			 */
			App.allowedSection = 'brochure';
			_w.initBrochure();

			if (!App.started)
			{
				App.start();
			}
		},


		initBrochure: function ()
		{
			$('a.navbar-brand vodacom_logo').attr('href', '/');
			if (_w.contextVisible)
			{
				$('#ContextMenu').toggleClass('ghost');
				$('#wrapper').toggleClass('full-main');
				_w.contextVisible = false;
			}
			$('#BrochureMenu').show();
			$('#PortalMenu').hide();
			$('#AdminMenu').hide();
			$('#MainMenu').show(300);
		},

		initAdmin: function ()
		{
			$('a.navbar-brand.vodacom_logo').attr('href', '/');
			$('.notification-handle > span.glyphicon').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.notifyDropVisible)
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}
				else
				{
					$('.notify-dropdown').fadeIn(300);
					_w.notifyDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}, 3000);
				$('.notify-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeIn(300);
						_w.notifyDropVisible = true;
					}, 1);
				});
				$('.notify-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeOut(300);
						_w.notifyDropVisible = false;
					}, 1000);
				});
			});
			$('#BrochureMenu').hide();
			$('#PortalMenu').hide();
			$('#AdminMenu').show();
			$('#MainMenu').show(300);
		},

		initPortal: function ()
		{
			$('a.navbar-brand.vodacom_logo').attr('href', '/#/dashboard-grid');
			$('.notification-handle').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.notifyDropVisible)
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}
				else
				{
					$('.notify-dropdown').fadeIn(300);
					_w.notifyDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}, 3000);
				$('.notify-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeIn(300);
						_w.notifyDropVisible = true;
					}, 1);
				});
				$('.notify-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeOut(300);
						_w.notifyDropVisible = false;
					}, 1000);
				});
			});
			$('#BrochureMenu').hide();
			$('#AdminMenu').hide();
			$('#PortalMenu').show();
			$('#MainMenu').show(300);
		},

	};

})();

;;
(function ()
{

	window._App = function ()
	{

		this.initialize();

	};

	window._App.prototype =
	{

		projectId: null,
		activePage: false,
		started: false,
		allowedSection: 'brochure',

		initialize: function ()
		{
			this.Config = new _App.Config();
			this.Controller = new _App.Controller({
				$_el: $('#PageContent')
			});
			this.Router = new _App.Router();
			this.Ajax = new _App.Ajax();
			this.Util = new _App.Util();
			this.Event = new _App.Event();
			this.API = new _App.API();
			this.DataElement = new _App.DataElement();
			this.DataStruct = new _App.DataStruct();
			this.DataStore = new _App.DataStore();
			this.Theme = new _App.Theme();
			this.Template = new _App.Template();
			this.TemplateElement = new _App.TemplateElement();
			this.ElementLibrary = new _App.ElementLibrary();
			this.Container = new _App.Container();

			_App = null;
		},

		start: function ()
		{
			if (this.started)
			{
				return;
			}
			_w.init();
			this.started = true;
			this.Router.handleHashChange();
		},


	};

})();
;;
(function ()
{

	_App.Controller = function (args)
	{
		this.initialize(args);
	};

	_App.Controller.prototype =
	{

		currentPage: null,
		currentSection: {},
		onClose: {},
		formTemplate: {},
		widgetParams: {},
		formParams: {},
		gridParams: {},

		initialize: function (args)
		{
			for (var key in args)
			{
				this[key] = args[key];
			}

			this.getElems();
			this.setupScrollListener();
			$('#frmModal').on('hidden.bs.modal', $.proxy(function ()
			{
				if (this.onClose.modalFormContent
				    && this.onClose.modalFormContent[this.formTemplate])
				{
					this.onClose.modalFormContent[this.formTemplate]();
					delete this.onClose.modalFormContent[this.formTemplate];
				}
				if (this.currentSection.modalFormContent)
				{
					var prevSection = this.currentSection.modalFormContent;
					App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
					_t[prevSection].remove();
					$('#modalFormContent').removeClass(prevSection);
					this.currentSection.modalFormContent = null;
				}
				_w.openForm = false;
				if (_w.onFormClose)
				{
					setTimeout(function ()
					{
						_w.onFormClose();
					}, 1000);
				}
			}, this));
		},

		getElems: function ()
		{
			this.$_head = $('head');
			this.$_body = $('body');
			this.$_htmlBody = $('html, body');
			this.$_navAnchors = $('#Header .nav a').map(function (i, a) { return $(a); });
		},

		changePage: function (section, pageName)
		{
			section = section.replaceAll('-', '');
			pageName = pageName.replaceAll('-', '');
			App.Event.trigger('Controller.LoadingTemplate:' + pageName, {"pageName": pageName});
			var prevPage = this.currentPage;
			this.currentPage = pageName || '';
			App.activePage = false;
			if (_t[prevPage])
			{
				App.Event.trigger('Controller.RemovingPage:' + prevPage, {"pageName": prevPage});
				_t[prevPage].remove();
				this.$_body.removeClass(prevPage);
			}
			App.Template.register(
				pageName, section, pageName, 'PageContent', {},
				$.proxy(this.renderPage, this)
			);
		},

		renderPage: function (id, pageName)
		{
			this.$_body.addClass(pageName);
			_t[pageName].publish();
			App.Event.trigger(
				'Controller.Published:' + pageName,
				{"id": "page", "pageName": pageName}
			);
			//this.$_el.removeClass('loading');
			this.$_htmlBody.animate({
				'scrollTop': 0
			}, 250);
			this.$_body.addClass(pageName);
			App.activePage = pageName;
		},

		loadGrid: function (containerName, title, section, template, params, options, onClose)
		{
			container = App.Container.get(containerName);
			section = section.replaceAll('-', '');
			template = template.replaceAll('-', '');
			if (!this.gridParams[template])
			{
				this.gridParams[template] = {};
			}
			this.gridParams[template] = (undefined == params)
				? {}
				: params;
			container.setTitle(title);
			container.show(options);
			this.formTemplate = template;
			if (!this.onClose[container.contentTarget])
			{
				this.onClose[container.contentTarget] = {};
			}
			if (onClose)
			{
				this.onClose[container.contentTarget][template] = onClose;
			}
			this.changeSection(containerName, container.contentTarget, section, template);
		},

		loadForm: function (containerName, title, section, template, params, options, onClose)
		{
			$('.btn[data-role="end"]').click();
			_w.openForm = containerName;
			_w.onFormClose = false;
			container = App.Container.get(containerName);
			section = section.replaceAll('-', '');
			template = template.replaceAll('-', '');
			if (!this.formParams[template])
			{
				this.formParams[template] = {};
			}
			this.formParams[template] = (undefined == params)
				? {}
				: params;
			container.setTitle(title);
			container.show(options);
			this.formTemplate = template;
			if (!this.onClose[container.contentTarget])
			{
				this.onClose[container.contentTarget] = {};
			}
			if (onClose)
			{
				this.onClose[container.contentTarget][template] = onClose;
			}
			this.changeSection(containerName, container.contentTarget, section, template, onClose);
		},

		closeForm: function (container, message)
		{
			container = App.Container.get(container);
			if (message)
			{
				if ('Success' == message)
				{
					_w.alert('Success', 'Changes successfully saved.', 'success');
				}
				if ('Cancel' == message)
				{
					_w.alert('Success', 'Changes cancelled.', 'info');
				}
			}
			if (this.onClose[container.contentTarget]
			    && this.onClose[container.contentTarget][this.formTemplate])
			{
				this.onClose[container.contentTarget][this.formTemplate]();
				delete this.onClose[container.contentTarget][this.formTemplate];
			}
			container.hide();
			if (this.currentSection[container.contentTarget])
			{
				var prevSection = this.currentSection[container.contentTarget];
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				this.currentSection[container.contentTarget] = null;
			}
		},

		changeSection: function (containerName, target, section, sectionName, onClose, force)
		{
			section = section.replaceAll('-', '');
			sectionName = sectionName.replaceAll('-', '');
			App.Event.trigger('Controller.LoadingTemplate:' + sectionName, {"sectionName": sectionName});
			if (!this.currentSection)
			{
				this.currentSection = {};
			}
			var prevSection = this.currentSection[target]
				? this.currentSection[target]
				: null;
			if (!force && prevSection == sectionName)
			{
				return;
			}
			this.currentSection[target] = sectionName || '';

			if (_t[prevSection])
			{
				if (this.onClose[target][sectionName])
				{
					this.onClose[target][sectionName]();
					delete this.onClose[target][sectionName];
				}
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				$('#' + target).removeClass(prevSection);
			}
			App.Template.register(
				sectionName, section, sectionName, 'SectionContent', {},
				$.proxy(this.renderSection, this, target, containerName)
			);
			if (!this.onClose[target])
			{
				this.onClose[target] = {};
			}
			if (onClose)
			{
				this.onClose[target][sectionName] = onClose;
			}
		},

		renderSection: function (target, containerName, id, sectionName)
		{
			if (undefined != this.widgetParams[sectionName])
			{
				_t[sectionName].template.params = this.widgetParams[sectionName];
			}
			_t[sectionName].publish(target);
			_t[sectionName].container = containerName;
			App.Event.trigger(
				'Controller.Published:' + sectionName,
				{"id": "section", "sectionName": sectionName}
			);
		},

		closeSection: function (target, sectionName, callback)
		{
			sectionName = sectionName.replaceAll('-', '');
			if (undefined != this.widgetParams[sectionName])
			{
				delete this.widgetParams[sectionName];
			}
			var prevSection = this.currentSection[target]
				? this.currentSection[target]
				: null;

			delete this.currentSection[target];

			if (_t[prevSection])
			{
				if (this.onClose[target][sectionName])
				{
					this.onClose[target][sectionName]();
					delete this.onClose[target][sectionName];
				}
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				$('#' + target).removeClass(prevSection);
			}
			if (undefined != callback)
			{
				callback();
			}
		},

		setupScrollListener: function ()
		{
			$(window).on('scroll', function ()
			{
				if ($(window).scrollTop() > 50)
				{
					$('#Header').addClass('compressed');
				}
				else
				{
					$('#Header').removeClass('compressed');
				}
			});
		}

	};

})();

;;
(function ()
{

	_App.Router = function ()
	{
		this.initialize();
	};

	_App.Router.prototype =
	{

		routes: {},

		requireAuth: {},

		initialize: function ()
		{
			if (!window.location.hash.length)
			{
				window.location.hash = '/';
			}
			this.setupHashChangeListener();
		},

		setupHashChangeListener: function ()
		{
			if (!( 'onhashchange' in window ))
			{
				this.pollHash();
			}
			$(window).on('hashchange', $.proxy(this.handleHashChange, this));
		},

		pollHash: function ()
		{
			var currentHash = window.location.hash;
			setInterval(function ()
			{
				if (window.location.hash != currentHash)
				{
					$(window).trigger('hashchange');
					currentHash = window.location.hash;
				}
			}, 250);
		},

		handleHashChange: function ()
		{
			$('.btn[data-role="end"]').click();
			var hashLocQuery = window.location.hash.split("?");
			var hashLoc = hashLocQuery[0].split("/");
			App.allowedSection = App.allowedSection
				? App.allowedSection
				: 'brochure';
			if (hashLoc[2] && '' != hashLoc[2])
			{
				var section = hashLoc[1];
				var page = hashLoc[2];
			}
			else if (hashLoc[1] && '' != hashLoc[1])
			{
				var section = App.allowedSection;
				var page = hashLoc[1];
			}
			else
			{
				var section = 'brochure';
				var page = 'home';
			}
			if (App.userData && App.userData.forcePasswordChange
			    && 'change-password' != page)
			{
				window.location.hash = '/change-password';
				return;
			}
			if (App.allowedSection != section
			    && 'brochure' != section
			    && 'notice' != section)
			{
				if (!App.redirect
				    && 'login' != page
				    && 'forgot-password' != page
				    && 'change-password' != page)
				{
					var query = hashLocQuery[1]
						? '?' + hashLocQuery[1]
						: '';
					App.redirect = '/' + section + '/' + page + query;
				}
				window.location.hash = '/notice/error?error=pagePermissionDenied';
				return;
			}
			App.Template.instanceCounter = 0;
			App.Controller.changePage(section, page);
			$(window).trigger('pageChange');
		}

	};

})();

;;
(function ()
{

	_App.Ajax = function ()
	{

		this.initialize();

	};

	_App.Ajax.prototype =
	{

		exportCounter: 0,

		initialize: function ()
		{

		},

		DOWNLOAD: function (args)
		{
			var target = !args.direct
				? 'target="_blank"'
				: '';
			var inputs = '';
			for (var item in args.data)
			{
				inputs += '<input type="hidden" id="' + item + '" name="' + item + '" value="' + args.data[item] + '">';
			}
			$('<form id="downloadForm' + this.exportCounter + '" method="get" ' + target + ' action="' + args.url + '">'
			  + inputs + '</form>').appendTo('body').submit();
			$('#downloadForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		EXPORTSAFE: function (args)
		{
			args.data = args.data[0];
			inputs = '';
			inputs += '<input type="hidden" name="Contract" value="' + args.data.Contract + '">';
			for (var group in args.data.Packet)
			{
				for (var param in args.data.Packet[group])
				{
					if ('object' == typeof args.data.Packet[group][param])
					{
						for (var subParam in args.data.Packet[group][param])
						{
							inputs += '<input type="hidden" name="Packet[' + group + '][' + param + '][' + subParam + ']" value="' + escape(args.data.Packet[group][param][subParam]) + '">';
						}
					}
					else
					{
						inputs += '<input type="hidden" name="Packet[' + group + '][' + param + ']" value="' + escape(args.data.Packet[group][param]) + '">';
					}
				}
			}
			if (args.data.Options)
			{
				for (var param in args.data.Options)
				{
					inputs += '<input type="hidden" name="Options[' + param + ']" value="' + escape(args.data.Options[param]) + '">';
				}
			}
			var target = !args.direct
				? 'target="_blank"'
				: '';
			$('<form id="exportForm' + this.exportCounter + '" method="post" ' + target + ' action="' + args.url + '">'
			  + inputs
			  + '</form>').appendTo('body').submit();
			$('#exportForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		EXPORT: function (args)
		{
			args.data = args.data[0];
			inputs = '';
			inputs += '<input type="hidden" name="Contract" value="' + args.data.Contract + '">';
			for (var group in args.data.Packet)
			{
				for (var param in args.data.Packet[group])
				{
					if ('object' == typeof args.data.Packet[group][param])
					{
						for (var subParam in args.data.Packet[group][param])
						{
							inputs += '<input type="hidden" name="Packet[' + group + '][' + param + '][' + subParam + ']" value="' + args.data.Packet[group][param][subParam] + '">';
						}
					}
					else
					{
						inputs += '<input type="hidden" name="Packet[' + group + '][' + param + ']" value="' + args.data.Packet[group][param] + '">';
					}
				}
			}
			if (args.data.Options)
			{
				for (var param in args.data.Options)
				{
					inputs += '<input type="hidden" name="Options[' + param + ']" value="' + args.data.Options[param] + '">';
				}
			}
			var target = !args.direct
				? 'target="_blank"'
				: '';
			$('<form id="exportForm' + this.exportCounter + '" method="post" ' + target + ' action="' + args.url + '">'
			  + inputs
			  + '</form>').appendTo('body').submit();
			$('#exportForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		JSON: function (args, callback, errorCallback)
		{
			args.type = 'POST';
			args.dataType = 'json';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			args.data = JSON.stringify(args.data);


			$.post(args.url, args.data)
				.done(function (data)
				{
					_w.sessionUpdate();
					(args.id)
						? callback(args.id, data)
						: callback(data);
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		SCRIPT: function (args, callback, errorCallback)
		{
			args.type = 'GET';
			args.dataType = 'script';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				})
				.error(function (jqXHR, textStatus, errorThrown)
				{
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		POST: function (args, callback, errorCallback)
		{
			args.type = 'POST';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					_w.sessionUpdate();
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		GET: function (args, callback, errorCallback)
		{
			args.type = 'GET';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					_w.sessionUpdate();
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		}

	};

})();

;;
(function ()
{

	_App.Util = function ()
	{
		this.initialize();
	};

	_App.Util.prototype =
	{

		startupTime: 0,

		initialize: function ()
		{
			this.startupTime = this.unixTimestamp();
		},

		resetImageUploaderWidget: function (eid)
		{
			$('#' + eid).val('');
			$('#' + eid).removeClass('valid');
			$('#fileid_' + eid).val('');
			$('#btn_' + eid).attr('data-url', '');
			$('#btnDownload' + eid).hide();
			$('#btnDownload' + eid).attr('data-download', '');
		},

		formatDecimalDisplayValue: function (input)
		{
			var output = '' + input;
			output = "." == output.substring(0, 1)
				? '0' + output
				: output;
			return output;
		},

		formatMultipleStringCase: function (input)
		{
			var output = '' + input;
			return output.formatMultipleStringCase();
		},

		formatSingleStringCase: function (input)
		{
			var output = '' + input;
			return output.formatSingleStringCase();
		},

		enforceNumericInput: function (identity, signed)
		{
			$('#' + identity).keydown(function (evt)
			{
				var key = evt.keyCode || evt.which;

				/*
				 * Implement minus sign at front
				 */
				if (true === signed
				    && ('' == $('#' + identity).val()
				        || '-' != $('#' + identity).val().substring(0, 1))
				    && (109 == key || 189 == key))
				{
					$('#' + identity).val('-' + $('#' + identity).val());
					return false;
				}

				return (key >= 48 && key <= 57)
				       || (key >= 96 && key <= 105)
				       || 8 === key
				       || 9 === key
				       || 46 === key
				       || 110 === key
				       || 190 === key;
			});
		},

		buildReportsMenu: function (container, page, identifier, data, staticItems)
		{
			$(container).empty();
			for (var i in staticItems)
			{
				var subMenu = staticItems[i];
				switch (subMenu.type)
				{
					case 'head':
						$(container).append(
							App.Theme.Menu.MenuHeader
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[title]', subMenu.title)
						);
						break;
					case 'main':
						$(container).append(
							App.Theme.Menu.MenuMain
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[href]', subMenu.href)
								.replaceAll('[title]', subMenu.title)
								.replaceAll('href="#/false"', 'class="handy"')
						);
						break;
					case 'sub':
						$(container).append(
							App.Theme.Menu.MenuSub
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[href]', subMenu.href)
								.replaceAll('[title]', subMenu.title)
								.replaceAll('href="#/false"', 'class="handy"')
						);
						break;
				}
				/*$(container).append(
				 '<li><a href="/#/' + App.allowedSection + '/'
				 + staticItems[i].href + '">'
				 + staticItems[i].title + '</a></li>'
				 );*/
			}

			for (var i in data)
			{
				$(container).append(
					App.Theme.Menu.MenuSub
						.replaceAll('[eid]', 'mainmenu_' + data[i].id)
						.replaceAll('[href]', page + '?' + identifier + '=' + data[i].id)
						.replaceAll('[title]', data[i].reportName)
				);
				/*$(container).append(
				 '<li><a href="/#/' + App.allowedSection + '/'
				 + page + '?' + identifier + '=' + data[i].id + '">'
				 + data[i].reportName + '</a></li>'
				 );*/
			}
		},

		cleanHTML: function (input)
		{
			// 1. remove line breaks / Mso classes
			var stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
			var output = input.replace(stringStripper, ' ');
			// 2. strip Word generated HTML comments
			var commentSripper = new RegExp('<!--(.*?)-->', 'g');
			var output = output.replace(commentSripper, '');
			var tagStripper = new RegExp('<(/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>', 'gi');
			// 3. remove tags leave content if any
			output = output.replace(tagStripper, '');
			// 4. Remove everything in between and including tags '<style(.)style(.)>'
			var badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

			for (var i = 0; i < badTags.length; i++)
			{
				tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
				output = output.replace(tagStripper, '');
			}
			// 5. remove attributes ' style="..."'
			var badAttributes = ['style', 'start'];
			for (var i = 0; i < badAttributes.length; i++)
			{
				var attributeStripper = new RegExp(' ' + badAttributes[i] + '="(.*?)"', 'gi');
				output = output.replace(attributeStripper, '');
			}
			return output;
		},

		handleToolbarState: function (selector, activateCallback, deactivateCallback)
		{
			$(selector + ' button').each(function (i, elem)
			{
				App.Util.handleButtonState(elem, activateCallback, deactivateCallback);
			});
		},

		handleButtonState: function (selector, activateCallback, deactivateCallback)
		{
			$(selector).click($.proxy(function (activateCallback, deactivateCallback, evt)
			{
				if ($(evt.currentTarget).hasClass('active'))
				{
					$(evt.currentTarget).removeClass('active');
					if (deactivateCallback)
					{
						deactivateCallback($(evt.currentTarget).attr('data-deactivate'));
					}
				}
				else
				{
					if ($(evt.currentTarget).parent().find('button.active').length)
					{
						return;
					}
					$(evt.currentTarget).addClass('active');
					if (activateCallback)
					{
						activateCallback($(evt.currentTarget).attr('data-activate'));
					}
				}
			}, this, activateCallback, deactivateCallback));
		},

		unixTimestamp: function ()
		{
			return Math.round((new Date().getTime() / 1000));
		},

		getUrlParam: function (name)
		{
			hashLoc = window.location.hash.split("?");
			var ret = decodeURI(
				(RegExp(name + '=' + '(.+?)(&|$)').exec(hashLoc[1]) || [,])[1]
			);
			return ('undefined' == ret)
				? null
				: ret;
		},

		ie: (function ()
		{
			var undef,
			    v = 3,
			    div = document.createElement('div'),
			    all = div.getElementsByTagName('i');
			while (
				div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
					all[0]
				)
			{
				;
			}
			return v > 4
				? v
				: undef;
		}()),

		updateCheckboxStyle: function ($_checkbox)
		{
			if ($_checkbox.hasClass('no-mod'))
			{
				return;
			}
			$_checkbox.addClass('no-mod');
			var label = $_checkbox.parent('label');
			if (label.length)
			{
				$(label).addClass('checkbox');
			}
			else
			{
				$_checkbox.wrap('<label class="checkbox"/>');
			}
			$('<span class="styled-checkbox" />').insertAfter($_checkbox);
			if (!!this.ie && this.ie < 9)
			{
				$_checkbox.set_checked = function ()
				{
					if (this.checked)
					{
						form.find('input[name="' + this.name + '"] + span').removeClass('checked');
						$(this).next('span').addClass('checked').blur();
					}
				};
				$_checkbox.set_checked();
				$_checkbox.bind('change', function ()
				{
					this.set_checked();
				});
			}
			if ($_checkbox.value == 'on')
			{
				$_checkbox.value = true;
			}
		},

		updateCheckboxStyles: function (form)
		{
			var $$_checkboxes = form.find('input[type=checkbox]');
			$.each($$_checkboxes, function (i, checkbox)
			{
				var $_checkbox = $(checkbox);
				if ($_checkbox.hasClass('no-mod'))
				{
					return;
				}
				var label = $_checkbox.parent('label');
				if (label.length)
				{
					$(label).addClass('checkbox');
				}
				else
				{
					$_checkbox.wrap('<label class="checkbox"/>');
				}
				$('<span class="styled-checkbox" />').insertAfter($_checkbox);
				if (!!this.ie && this.ie < 9)
				{
					checkbox.set_checked = function ()
					{
						if (this.checked)
						{
							form.find('input[name="' + this.name + '"] + span').removeClass('checked');
							$(this).next('span').addClass('checked').blur();
						}
					};
					checkbox.set_checked();
					$_checkbox.bind('change', function ()
					{
						this.set_checked();
					});
				}
				if (checkbox.value == 'on')
				{
					checkbox.value = true;
				}
			});
		},

		calculateTimeLeft: function (value, numDays, endDate)
		{
			var dateTime = value.split(' '),
			    date = dateTime[0],
			    time = dateTime[1],
			    dateParts = date.split('-').map(function (part)
			    {
				    return parseInt(part, 10);
			    }),
			    timeParts = time.split(':').map(function (part)
			    {
				    return parseInt(part, 10);
			    });
			var currentDateTime = new Date();
			if (endDate)
			{
				var dateTime = endDate.split(' '),
				    date = dateTime[0],
				    time = dateTime[1],
				    dateParts = date.split('-').map(function (part)
				    {
					    return parseInt(part, 10);
				    }),
				    timeParts = time.split(':').map(function (part)
				    {
					    return parseInt(part, 10);
				    });
				var expireDateTime = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);
			}
			else
			{
				var dateTime = value.split(' '),
				    date = dateTime[0],
				    time = dateTime[1],
				    dateParts = date.split('-').map(function (part)
				    {
					    return parseInt(part, 10);
				    }),
				    timeParts = time.split(':').map(function (part)
				    {
					    return parseInt(part, 10);
				    });
				var expireDateTime = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);
				expireDateTime.setDate(expireDateTime.getDate() + numDays);
			}
			var difference = expireDateTime.getTime() - currentDateTime.getTime();
			var daysDifference, hoursDifference, minutesDifference;

			daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);
			difference -= daysDifference * 1000 * 60 * 60 * 24;
			hoursDifference = Math.floor(difference / 1000 / 60 / 60);
			difference -= hoursDifference * 1000 * 60 * 60;
			minutesDifference = Math.floor(difference / 1000 / 60);
			difference -= minutesDifference * 1000 * 60;

			if (expireDateTime.getTime() < currentDateTime.getTime())
			{
				return '0m';
			}

			return daysDifference > 0
				? daysDifference + 'd, ' + hoursDifference + 'h, ' + minutesDifference + 'm'
				: hoursDifference + 'h, ' + minutesDifference + 'm';
		},

		updateClock: function ()
		{
			var currentTime = new Date();
			var currentHours = currentTime.getHours();
			var currentMinutes = currentTime.getMinutes();
			var currentSeconds = currentTime.getSeconds();
			currentMinutes = ( currentMinutes < 10 ? "0" : "" ) + currentMinutes;
			currentSeconds = ( currentSeconds < 10 ? "0" : "" ) + currentSeconds;
			currentHours = ( currentHours == 0 ) ? 12 : currentHours;
			var currentTimeString = currentHours + ":" + currentMinutes + ":" + currentSeconds;
			$("#clock").html(currentTimeString);
		},

		setCookie: function (name, value, days)
		{
			if (days)
			{
				var date = new Date();
				date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
				var expires = "; expires=" + date.toGMTString();
			}
			else
			{
				var expires = "";
			}
			document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
		},

		getCookie: function (name, defaultValue)
		{
			var nameEQ = escape(name) + "=";
			var ca = document.cookie.split(';');
			for (var i = 0; i < ca.length; i++)
			{
				var c = ca[i];
				while (c.charAt(0) == ' ')
				{
					c = c.substring(1, c.length);
				}
				if (c.indexOf(nameEQ) == 0)
				{
					return unescape(c.substring(nameEQ.length, c.length));
				}
			}
			return undefined == defaultValue
				? null
				: defaultValue;
		},

		htmlEncode: function (value)
		{
			return ('string' == typeof value)
				? value.htmlEncode()
				: value;
		},

		htmlDecode: function (value)
		{
			return ('string' == typeof value)
				? value.htmlDecode()
				: value;
		}

	};

	/*
	 * Make sure we have the browser functionality available from previous versions.
	 */
	if (!jQuery.browser)
	{
		jQuery.browser = {};
		(function ()
		{
			jQuery.browser.msie = false;
			jQuery.browser.version = 0;
			if (navigator.userAgent.match(/MSIE ([0-9]+)\./))
			{
				jQuery.browser.msie = true;
				jQuery.browser.version = RegExp.$1;
			}
		})();
	}

	//-------------------------------------------------------- FUNCTION EXTENSIONS
	Function.prototype.scope = function (scope)
	{
		var callee = this,
		    args = Array.prototype.slice.call(arguments,1);
		return function ()
		{
			callee.apply(
				scope,
				args.concat(Array.prototype.slice.call(arguments,0))
			);
		};
	};

	//-------------------------------------------------------- STRING EXTENSIONS
	String.prototype.replaceAll = function (str1, str2, ignore)
	{
		return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), (ignore ? "gi" : "g")), (typeof(str2) == "string") ? str2.replace(/\$/g, "$$$$") : str2);
	};


	String.prototype.formatMultipleStringCase = function ()
	{
		var output = '' + this;
		if ('s' != output.substring(output.length - 1, output.length))
		{
			if ('y' == output.substring(output.length - 1, output.length))
			{
				output = output.substring(0, output.length - 1) + 'ies';
			}
			else
			{
				output += 's';
			}
		}
		return output;
	};

	String.prototype.formatSingleStringCase = function ()
	{
		var output = '' + this;
		if ('s' == output.substring(output.length - 1, output.length))
		{
			if ('ies' == output.substring(output.length - 3, output.length))
			{
				output = output.substring(0, output.length - 3) + 'y';
			}
			else
			{
				output = output.substring(0, output.length - 1);
			}
		}
		return output;
	};

	String.prototype.htmlEncode = function ()
	{
		return this.replaceAll('&', '&amp;')
			.replaceAll('"', '&quot;')
			.replaceAll("'", '&#39;')
			.replaceAll('<', '&lt;')
			.replaceAll('>', '&gt;');
	};

	String.prototype.htmlDecode = function ()
	{
		return this.replaceAll('&amp;', '&')
			.replaceAll('&quot;', '"')
			.replaceAll('&#39;', "'")
			.replaceAll('&lt;', '<')
			.replaceAll('&gt;', '>');
	};

	String.prototype.ucFirst = function ()
	{
		return this.charAt(0).toUpperCase() + this.slice(1);
	};

	String.prototype.trim = function ()
	{
		return this.replace(/^\s+|\s+$/g, "");
	};

	String.prototype.ltrim = function ()
	{
		return this.replace(/^\s+/, "");
	}

	String.prototype.rtrim = function ()
	{
		return this.replace(/\s+$/, "");
	}

	String.prototype.removeDoubleSpaces = function ()
	{
		return this.replace('  ', ' ').replace('  ', ' ').replace('  ', ' ').replace('  ', ' ').replace('  ', ' ');
	}

	String.prototype.dashToCamel = function ()
	{
		return this.replace(/(\-[a-z])/g, function ($1) {return $1.toUpperCase().replace('-', '');});
	};

	String.prototype.underscoreToCamel = function ()
	{
		return this.replace(/(\_[a-z])/g, function ($1) {return $1.toUpperCase().replace('_', '');});
	};

	String.prototype.camelToDash = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return "-" + $1.toLowerCase();});
	};

	String.prototype.underscoreToDash = function ()
	{
		return this.replace(/(\_[a-z])/g, function ($1) {return "-" + $1.toLowerCase().replace('_', '');});
	};

	String.prototype.camelToUnderscore = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return "_" + $1.toLowerCase();});
	};
	String.prototype.camelToSpace = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return " " + $1.toLowerCase();});
	};

	String.prototype.dashToUnderscore = function ()
	{
		return this.replace(/(\-[a-z])/g, function ($1) {return "_" + $1.toLowerCase().replace('-', '');});
	};

	//-------------------------------------------------------- VALIDATOR MODIFICATIONS
	if (jQuery.validator)
	{
		jQuery.validator.addMethod("notNull", function (value, element, params)
			{
				return this.optional(element) || value != null;
			}, "Please select a value."
		);

		jQuery.validator.addMethod("mobile", function (value, element, params)
			{
				return this.optional(element) || '' != value;
			}, "Must be a valid mobile number."
		);

		jQuery.validator.addMethod("companyReg", function (value, element, params)
			{
				return this.optional(element) || value.match(/^\d{4}\/\d{6}\/\d{2}$/) != null;
			}, "Incorrect format."
		);

		jQuery.validator.addMethod("complexPassword", function (value, element, params)
			{
				var hasUpperCase = /[A-Z]/.test(value);
				var hasLowerCase = /[a-z]/.test(value);
				var hasNumbers = /\d/.test(value);
				var hasNonAlphas = /\W/.test(value);
				var badPass = (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphas < 4);
				return this.optional(element) || !badPass;
			}, "Password must contain at least<br/>one capital letter,<br/>one lower case letter,<br/>one numeric value and one symbol."
		);

		jQuery.validator.addMethod('minDate', function (v, el, minDate)
			{
				if (this.optional(el))
				{
					return true;
				}
				if (isNaN(minDate.getTime()))
				{
					return true;
				}
				else
				{
					var curDate = $(el).datepicker('getDate');
					return minDate <= curDate;
				}
			}, 'Date must be after start date'
		);


		jQuery.validator.addMethod("simplePassword", function (value, element, params)
			{
				var hasUpperCase = /[A-Z]/.test(value);
				var hasLowerCase = /[a-z]/.test(value);
				var hasNumbers = /\d/.test(value);
				var hasNonAlphas = /\W/.test(value);
				var badPass = (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphas < 1);
				return this.optional(element) || !badPass;
			}, "Password must contain at least<br/>one capital letter,<br/>one lower case letter,<br/>one numeric value and one symbol."
		);


		$.validator.setDefaults({
			ignore: [],
			errorPlacement: function (error, element)
			{
				if (element.hasClass('selectpicker'))
				{
					var elem = $('button[data-id=' + element.attr("name") + ']');
					elem.addClass('error');
					error.insertAfter(elem);
				}
				else if (element.hasClass('file-input'))
				{
					var elem = $('#' + element.attr('progress-id'));
					element.addClass('error');
					error.insertAfter(elem);
				}
				else if (element.parent().hasClass('input-group'))
				{
					element.addClass('error');
					error.insertAfter(element.parent());
				}
				else
				{
					error.insertAfter(element);
				}
			},
			unhighlight: function (element, errorClass, validClass)
			{
				if ($(element).hasClass('selectpicker'))
				{
					$('button[data-id=' + $(element).attr("name") + ']').removeClass(errorClass).addClass(validClass);
				}
				else
				{
					$(element).removeClass(errorClass).addClass(validClass);
				}
				$(element.form).find("label[for=" + element.id + "]." + errorClass)
					.remove();
			}
		});
	}

})();


$.fn.extend({
	getPath: function ()
	{
		var path, node = this;
		while (node.length)
		{
			var realNode = node[0],
			    id = realNode.id,
			    name = realNode.localName;

			if (id)
			{
				return '#' + id + (path ? '>' + path : '');
			}

			if (!name)
			{
				break;
			}

			name = name.toLowerCase();
			var parent = node.parent();
			var sameTagSiblings = parent.children(name);
			if (sameTagSiblings.length > 1)
			{
				allSiblings = parent.children();
				var index = allSiblings.index(realNode) + 1;
				if (index > 1)
				{
					name += ':nth-child(' + index + ')';
				}
			}
			path = name + (path ? '>' + path : '');
			node = parent;
		}
		return path;
	}
});
$.fn.setCursorPosition = function (pos)
{
	if ($(this).get(0).setSelectionRange)
	{
		$(this).get(0).setSelectionRange(pos, pos);
	}
	else if ($(this).get(0).createTextRange)
	{
		var range = $(this).get(0).createTextRange();
		range.collapse(true);
		range.moveEnd('character', pos);
		range.moveStart('character', pos);
		range.select();
	}
};

;
(function ()
{


})();

;;
(function ()
{

	_App.Event = function ()
	{
		this.initialize();
	};

	_App.Event.prototype =
	{

		listenerStore: {},

		initialize: function ()
		{
			this.listenerStore = {};
		},

		/**
		 * Register an Event Listener.
		 * @param id
		 * @param event
		 * @param callback
		 * @param type
		 */
		listen: function (id, event, callback, type)
		{
			if (!this.listenerStore[event])
			{
				this.listenerStore[event] = {};
			}
			this.listenerStore[event][id] = {
				"callback": callback,
				"type": (type ? type : "UseOnce")
			};
		},

		/**
		 * Remove a registered Event Listener.
		 * @param id
		 * @param event
		 */
		removeListener: function (id, event)
		{
			if (this.listenerStore[event] && this.listenerStore[event][id])
			{
				delete this.listenerStore[event][id];
			}
		},

		/**
		 * Trigger an event.
		 * @param event
		 * @param data
		 */
		trigger: function (event, data)
		{
			if (this.listenerStore[event])
			{
				for (var id in this.listenerStore[event])
				{
					this.listenerStore[event][id]["callback"](event, data);
					if ("UseOnce" == this.listenerStore[event][id]["type"])
					{
						delete this.listenerStore[event][id];
					}
				}
			}
		}

	};

})();
;;
(function ()
{

	_App.DataElement = function ()
	{

		this.initialize();

	};

	_App.DataElement.prototype =
	{

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		singleFilter: function (filter, value, fields)
		{
			if ('' == value)
			{
				return filter;
			}
			if (isNaN(value))
			{
				value = value.toLowerCase();
			}
			value = '%' + value + '%';
			var nested = {};
			for (var field in fields)
			{
				var param = App.Config.dataManglerCs
					? 'LOWER(' + fields[field] + ')'
					: fields[field];
				nested[param] = value;
			}
			filter.filters['singleSearch'] = nested;
			filter.count++;
			return filter;
		},

		populateSingleFilter: function (filters, filterId)
		{
			for (var field in filters)
			{
				var value = filters[field].substring(1, filters[field].length - 1)
				if ('' == $('#' + filterId).val())
				{
					$('#' + filterId).val(value);
				}
				return;
			}
		},

		filterIfnotEmpty: function (filter, element, field, op, append, defaultValue)
		{
			append = (append)
				? append
				: '';
			if ('' != $('#' + element).val() && null != $('#' + element).val())
			{
				op = op ? op + ' ' : '';
				var val = $('#' + element).val();
				val = ('' == val || !isNaN(val) || '' != op)
					? val
					: '%' + val + '%';
				if (filter.filters[field])
				{
					var nested = {};
					nested[field] = op + val + append;
					filter.filters[field + '-to'] = nested;
				}
				else
				{
					filter.filters[field] = op + val + append;
				}
				filter.count++;
			}
			return filter;
		},

		populateFilters: function (filters, map)
		{
			for (var field in map)
			{
				if (filters[field])
				{
					filters[field] = isNaN(filters[field])
						? filters[field].substring(1, filters[field].length - 1)
						: filters[field];
					$('#' + map[field]).val(filters[field]);
				}
			}
		},

		/*Example :
		 {
		 // General
		 id 				: '',
		 label 			: '',
		 icon 			: '',
		 disabled 		: false,
		 permission 		: true,
		 inputType 		: '',
		 maxlength 		: 100,
		 placeholder 	: '',
		 // Button
		 href 			: '',
		 btnPreset 		: 'Default',
		 btnType 		: 'button',
		 btnStyle 		: 'btn-default',
		 // Grid
		 headerStyle 	: '',
		 orderAsc 		:
		 {
		 id : '',
		 bind : $.proxy(
		 _w.namespace.orderSomeGrid,
		 this,
		 'table.fieldname',
		 'ASC'
		 )
		 },
		 orderDesc 	:
		 {
		 id : '',
		 bind : $.proxy(
		 _w.namespace.orderSomeGrid,
		 this,
		 'table.fieldname',
		 'DESC'
		 )
		 },
		 placeholder 	: '',
		 inputType 		: '',
		 actions 		: false,
		 bindClear 		: $.proxy(
		 _w.namespace.clearSomeGrid,
		 this
		 ),
		 bindSearch 		: $.proxy(
		 _w.namespace.searchSomeGrid,
		 this
		 ),
		 context 					: '',
		 contextLabelSpan 			: '',
		 contextLabelStyle 			: '',
		 contextInputSpan 			: '',
		 contextInputWrapperStyle 	: '',
		 contextInputStyle 			: '',
		 contextAttrib 				: '',
		 columnInputSpan 			: '',
		 columnInputWrapperStyle 	: '',
		 columnInputStyle 			: '',
		 columnAttrib 				: '',
		 rowStyle 					: '',
		 rowAttrib 					: '',
		 cellStyle 					: '',
		 cellAttrib 					: '',
		 cellPrepend 				: '',
		 pagerItemStyle 				: '',
		 pagerWrapperStyle 			: '',
		 // Form
		 labelSpan 				: '',
		 labelStyle 				: '',
		 inputSpan 				: '',
		 inputWrapperStyle 		: '',
		 inputStyle 				: '',
		 inputAttrib 			: '',
		 inputPrepend 			: '',
		 imageStyle 				: '',
		 iconSpan 				: '',
		 bind 					: '',
		 rules 					: {}
		 },*/
		GridTitleButtons: {
			handler: 'ConstructorComponentCollection',
			constructor: 'Button',
			items: {}
		},
		GridContextFilter: {
			handler: 'ConstructorComponentCollection',
			constructor: 'GridContextFilter',
			items: {}
		},
		GridColumns: {
			handler: 'GridConstructorComponentCollection',
			headerId: 'gridColumnHeaders',
			filterId: 'gridColumnFilters',
			items: {}
		},
		GridRowRepeater: {
			handler: 'ConstructorGridRowCollection',
			constructor: 'GridDataRow',
			items: {}
		},
		GridPageSize: {
			handler: 'GridPageSize',
			allowLarge: false
		},
		GridPager: {
			handler: 'GridPager'
		},
		GridRecords: {
			handler: 'GridRecords'
		},
		Button: {
			handler: 'Button',
			href: '',
			btnPreset: 'Default',
			btnType: 'button',
			btnStyle: 'btn-default',
		},
		Text: {
			handler: 'Text'
		},
		InlineNotification: {
			handler: 'InlineNotification'
		},
		LabeledText: {
			handler: 'LabeledText',
			labelStyle: '',
			textStyle: '',
		},
		Password: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'password',
			rules: {minlength: 5, maxlength: 150}
		},
		Checkbox: {
			handler: 'FieldComponent',
			type: 'checkbox',
			dataType: 'checkbox',
			checked: false,
			rules: {}
		},
		String: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {minlength: 2, maxlength: 150}
		},
		Tags: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			dataType: 'tags',
			rules: {maxlength: 250}
		},
		Number: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {number: true}
		},
		Digit: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {digits: true}
		},
		Date: {
			handler: 'FieldComponent',
			type: 'date',
			rules: {dateISO: true}
		},
		Mobile: {
			handler: 'FieldComponent',
			type: 'mobile',
			mask: '+99 99 999 9999',
			rules: {mobile: true}
		},
		Amount: {
			handler: 'FieldComponent',
			type: 'amount',
			rules: {number: true}
		},
		Percentage: {
			handler: 'FieldComponent',
			type: 'percentage',
			rules: {number: true}
		},
		TextArea: {
			handler: 'FieldComponent',
			type: 'textarea',
			rows: 5,
			rules: {}
		},
		HtmlText: {
			handler: 'FieldComponent',
			type: 'htmltext',
			rules: {}
		},
		Image: {
			handler: 'FieldComponent',
			type: 'image',
			rules: {}
		},
		Video: {
			handler: 'FieldComponent',
			type: 'video',
			rules: {}
		},
		Audio: {
			handler: 'FieldComponent',
			type: 'audio',
			rules: {}
		},
		Attachment: {
			handler: 'FieldComponent',
			type: 'attachment',
			rules: {}
		},
		Document: {
			handler: 'FieldComponent',
			type: 'document',
			rules: {}
		},
		Collection: {
			handler: 'FieldComponent',
			type: 'collection',
			container: {
				container: 'GeneralCollectionContainer',
				containerTags: ['eid', 'label', 'labelStyle', 'containerStyle', 'items'],
				display: 'GeneralCollectionItem',
				displayTags: ['eid', 'label']
			},
			rules: {}
		},
		DependantDataSource: {
			handler: 'FieldComponent',
			type: 'select',
			dataSource: '',
			rules: {}
		},
		DataList: {
			handler: 'FieldComponent',
			type: 'select',
			title: 'Select',
			dataSource: '',
			dataList: [],
			rules: {}
		},
		Reference: {
			handler: 'FieldComponent',
			type: 'select',
			title: 'Select',
			dataSource: '',
			dataQuery: {
				isStatic: false,
				workspace: '',
				task: '',
				jobId: null,
				data: {},
				options: {},
				callback: null
			},
			rules: {digits: true}
		}

	};

})();

;;
(function ()
{

	_App.DataStruct = function ()
	{

		this.initialize();

	};

	_App.DataStruct.prototype =
	{

		dateFormat: 'yyyy-mm-dd',
		currencyUnit: 'R',
		mobileUnit: '<span class="glyphicon glyphicon-phone"></span>',
		currencyPrepend: 'R ',
		mobilePrepend: '+27 ',

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		Company: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'company',
				field: 'id',
				label: 'Company Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'company',
				field: 'name',
				label: 'Company Name',
				rules: {required: true}
			})
		},

		DataTransform: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'dataTransform',
				field: 'id',
				label: 'DataTransform Id',
				rules: {required: false}
			}),
			owner: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'owner',
				label: 'Owner',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityNames: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'dataTransform',
				field: 'entityNames',
				label: 'Data Entity',
				dataSource: 'DataTransform.Entity.List',
				dataQuery: {
					isStatic: false,
					workspace: 'DataTransform',
					task: 'DataTransform.EntitySelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true, digits: false},
				messages: {required: 'This field is required'}
			}),
			eventActions: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'dataTransform',
				field: 'eventActions',
				label: 'Data Action',
				multiple: true,
				dataSource: 'DataTransform.DataAction.List',
				dataList: [
					{value: 'Create', label: 'Create'},
					{value: 'Update', label: 'Update'},
					{value: 'Route', label: 'Route'},
					{value: 'Archive', label: 'Archive'},
					{value: 'UnArchive', label: 'UnArchive'},
					{value: 'Delete', label: 'Delete'},
					{value: 'UnDelete', label: 'UnDelete'},
				],
				rules: {maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			eventName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'eventName',
				label: 'Event Name',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'inputFields',
				label: 'Input Fields',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			transformations: $.extend(true, {}, _App.DataElement.prototype.Collection, {
				namespace: 'dataTransform',
				field: 'transformations',
				label: 'Transformations',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		Import: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'import',
				field: 'id',
				label: 'Import Id',
				rules: {required: false}
			}),
			label: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'import',
				disabled: true,
				field: 'label',
				label: 'Label',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 150, required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'import',
				field: 'name',
				label: 'Importer',
				dataSource: 'importHandlers',
				dataQuery: {
					isStatic: false,
					workspace: 'Import',
					task: 'Import.ListHandlers',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true, digits: false},
				messages: {required: "This field is required"}
			}),
			importDocument: $.extend(true, {}, _App.DataElement.prototype.Document, {
				namespace: 'import',
				field: 'importDocument',
				label: 'Import File',
				fileTypes: ['csv', 'txt'],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			fileType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'fileType',
				label: 'File Type',
				dataSource: 'import.fileTypes',
				dataList: [
					{value: 'CSV', label: 'CSV'}/*,
					 { value : 'Excel', label : 'Excel' }*/
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			delimiter: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'delimiter',
				label: 'Delimiter',
				dataSource: 'import.delimiters',
				dataList: [
					{value: '1', label: ','},
					{value: '2', label: ';'},
					{value: '3', label: '|'},
					{value: "4", label: 'TAB'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			enclosure: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'enclosure',
				label: 'Enclosure',
				dataSource: 'import.enclosures',
				dataList: [
					{value: '1', label: '"'},
					{value: '2', label: "'"},
					{value: '3', label: '`'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			escape: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'escape',
				label: 'Escape',
				dataSource: 'import.escapes',
				dataList: [
					{value: '1', label: "\\"}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			haveHeaders: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'haveHeaders',
				label: 'First line contains headers',
				dataSource: 'import.haveHeaders',
				dataList: [
					{value: 0, label: 'No'},
					{value: 1, label: 'Yes'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		ImportException: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'importException',
				field: 'id',
				label: 'Import Id',
				rules: {required: false}
			}),
			'import': $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'importException',
				field: 'import',
				label: 'Import',
				dataType: 'select',
				dataSource: 'importException.import.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Import',
					task: 'Import.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			row: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'importException',
				field: 'row',
				label: 'Row number',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			data: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'importException',
				field: 'data',
				label: 'Row data',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			'error': $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'importException',
				field: 'error',
				label: 'Error',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		ContractLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'contractLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			workFlow: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'workFlow',
				label: 'Workflow',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			contractName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'contractName',
				label: 'Contract name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'contractLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'contractLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			memUsage: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'contractLog',
				field: 'memUsage',
				label: 'Memory usage ',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		ExecuteLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'executeLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			workFlow: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'workFlow',
				label: 'Workflow',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			contractName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'contractName',
				label: 'Contract name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'executeLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'executeLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			memUsage: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'executeLog',
				field: 'memUsage',
				label: 'Memory usage ',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			result: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'result',
				label: 'Result',
				dataType: 'text',
				rules: {maxlength: 30, required: true},
				messages: {required: 'This field is required'}
			}),
			requestPacket: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'executeLog',
				field: 'requestPacket',
				label: 'Request packet',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		AccessLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'accessLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			url: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'accessLog',
				field: 'url',
				label: 'URL',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'accessLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'accessLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'accessLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		Report: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'report',
				field: 'id',
				label: 'ReportBuilder Id',
				rules: {required: false}
			}),
			reportName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'report',
				field: 'reportName',
				label: 'Report name',
				dataType: 'text',
				rules: {maxlength: 200, required: true},
				messages: {required: 'This field is required'}
			}),
			baseEntityMeta: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'report',
				field: 'baseEntityMeta',
				label: 'Base report table',
				dataType: 'select',
				dataSource: 'report.baseEntityMeta.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'ReportBuilder',
					task: 'Meta.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			reportMode: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'report',
				field: 'reportMode',
				label: 'reportMode',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			reportDql: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'reportDql',
				label: 'DQL',
				dataType: 'textarea',
				rules: {required: false},
				messages: {required: 'This field is required'}
			}),
			reportJoins: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'reportJoins',
				label: 'Joins',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			staticSearchFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'staticSearchFields',
				label: 'Static search fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			dynamicSearchFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'dynamicSearchFields',
				label: 'Dynamic search fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			orderBy: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'orderBy',
				label: 'Order by',
				dataType: 'textarea',
				rules: {required: false},
				messages: {required: 'This field is required'}
			})
		},

		UnBlackList: {
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'user',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'select',
				dataSource: 'loginFailures',
				dataQuery: false,
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			confirm: $.extend(true, {}, _App.DataElement.prototype.Checkbox, {
				namespace: 'user',
				field: 'confirmUnBlacklist',
				label: 'Yes, I\'m sure',
				dataType: 'checkbox',
				rules: {required: false},
				messages: {}
			}),
		},
		PermissionGroup: {
			select: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'permissionGroup',
				field: 'name',
				label: 'Select group to edit',
				dataType: 'select',
				dataSource: 'permissiongroup.select',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissionLevel: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'permissionGroup',
				field: 'permissionLevel',
				label: 'Permission level',
				dataType: 'select',
				dataSource: 'permissiongroup.permissionLevel',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.GetPermissionLevels',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		Profile: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'profile',
				field: 'id',
				label: 'Profile Id',
				rules: {required: false}
			}),
			permissionGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissionGroup',
				label: 'Permissions *',
				dataType: 'select',
				dataSource: 'profile.permissionGroup.select',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissionLevel: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissionLevel',
				label: 'Permission level',
				dataType: 'select',
				dataSource: 'profile.permissionLevel',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.GetPermissionLevels',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissions: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissions',
				label: 'Permissions',
				dataType: 'select',
				dataSource: 'permissions',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Permissions.FullSelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			department: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'department',
				label: 'Department',
				dataType: 'select',
				dataSource: 'departments',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Department.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			username: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'username',
				label: 'Username',
				dataType: 'text',
				rules: {
					minlength: 3, maxlength: 100, required: true, create: {
						remote: {
							url: "/workspace/check-unique-username",
							type: "post"
						}
					}
				},
				messages: {required: "This field is required"}
			}),
			firstName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'firstName',
				label: 'Name',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 100, required: true},
				messages: {required: "This field is required"}
			}),
			familyName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'familyName',
				label: 'Surname',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 100, required: true},
				messages: {required: "This field is required"}
			}),
			email: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				inputType: 'email',
				field: 'email',
				label: 'Email',
				rules: {
					maxlength: 255, email: true, required: true, create: {
						remote: {
							url: "/workspace/check-unique-email",
							type: "post"
						}
					}
				}
			}),
			mobile: $.extend(true, {}, _App.DataElement.prototype.Mobile, {
				namespace: 'profile',
				field: 'mobile',
				label: 'Mobile number',
				dataType: 'text',
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			jobState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'profile',
				field: 'jobState',
				label: 'Status',
				dataSource: 'userstatuses',
				dataList: [
					{value: 'Active', label: 'Active'},
					{value: 'Suspended', label: 'Suspended'},
					{value: 'Archived', label: 'Archived'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		Department: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'department',
				field: 'id',
				label: 'User Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'department',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			})
		},

		BusinessRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'businessRule',
				field: 'id',
				label: 'BusinessRule Id',
				rules: {required: false}
			}),
			owner: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'owner',
				label: 'Owner',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 50, required: true},
				messages: {required: 'This field is required'}
			}),
			dealType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'businessRule',
				field: 'dealType',
				label: 'Deal type',
				dataType: 'select2',
				dataSource: 'businessRule.dealtypes',
				dataList: [
					{value: 'Pre-paid', label: 'Pre-paid'},
					{value: 'Post paid', label: 'Post paid'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			metaData: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'businessRule',
				field: 'metaData',
				label: 'Meta',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		Calculation: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'calculation',
				field: 'id',
				label: 'Calculation Id',
				rules: {required: false}
			}),
			priority: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'calculation',
				field: 'priority',
				label: 'Order',
				rules: {required: true}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			dealType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'calculation',
				field: 'dealType',
				label: 'Deal type',
				dataType: 'select2',
				dataSource: 'calculation.dealtypes',
				dataList: [
					{value: 'Pre-paid', label: 'Pre-paid'},
					{value: 'Post paid', label: 'Post paid'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			dealCategory: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'calculation',
				field: 'dealCategory',
				label: 'Deal category',
				dataType: 'select2',
				dataSource: 'dealcategories',
				dataList: [
					{value: 'Device', label: 'Device'},
					{value: 'Data', label: 'Data'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'inputFields',
				label: 'Input Fields',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			transformations: $.extend(true, {}, _App.DataElement.prototype.Collection, {
				namespace: 'calculation',
				field: 'transformations',
				label: 'Transformations',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationHost: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationHost',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'module',
				label: 'Module',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityBase: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'entityBase',
				label: 'Entity Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entity: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'entity',
				label: 'Full Entity Name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			initStatus: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'initStatus',
				label: 'DOA init status',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationGroup: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationGroup',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroup',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationGroup.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationGroup',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationGroupUser: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationGroupUser',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroupUser',
				field: 'delegationGroup',
				label: 'Delegation group',
				dataType: 'select',
				dataSource: 'delegationGroupUser.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroupUser',
				field: 'profile',
				label: 'User',
				dataType: 'select',
				dataSource: 'delegationGroupUser.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationRule',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationRule',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationRule.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationRule',
				field: 'delegationGroup',
				label: 'Delegation group',
				dataType: 'select',
				dataSource: 'delegationGroup.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationRule',
				field: 'message',
				label: 'Assignment message',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			status: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationRule',
				field: 'status',
				label: 'Status',
				dataType: 'text',
				rules: {maxlength: 20},
				messages: {required: 'This field is required'}
			})
		},

		DelegationMessage: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationMessage',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationMessage',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationMessage.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationMessage',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'message',
				label: 'Message',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			entityNames: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'entityNames',
				label: 'Entity names',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'inputFields',
				label: 'Input fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationItem: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationHost',
				label: 'Delegation host',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationGroup',
				label: 'Delegation group',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationRule: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationRule',
				label: 'Delegation rule',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationRule.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationRule.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			itemId: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'itemId',
				label: 'Item ID',
				disabled: true,
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'name',
				label: 'Name',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'description',
				label: 'Description',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'escalationLevel',
				label: 'Escalation level',
				disabled: true,
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			escalationDeadline: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'delegationItem',
				field: 'escalationDeadline',
				label: 'Escalation deadline',
				disabled: true,
				rules: {},
				messages: {required: 'This field is required'}
			}),
			declineReason: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationItem',
				field: 'declineReason',
				label: 'Decline reason',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			previousState: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'previousState',
				label: 'Previous status',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 50},
				messages: {required: 'This field is required'}
			}),
			stateChanged: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'delegationItem',
				field: 'stateChanged',
				label: 'Status changed',
				disabled: true,
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			jobState: {
				dataList: [
					{value: 'Pending', label: 'Pending'},
					{value: 'Approved', label: 'Approved'},
					{value: 'Declined', label: 'Declined'},
					{value: 'Cancelled', label: 'Cancelled'}
				]
			}
		},

		EscalationItem: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			escalationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationItem',
				field: 'escalationHost',
				label: 'Escalation host',
				dataType: 'select',
				dataSource: 'escalationItem.escalationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			escalationRule: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationItem',
				field: 'escalationRule',
				label: 'Escalation rule',
				dataType: 'select',
				dataSource: 'escalationItem.escalationRule.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationRule.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			itemId: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'itemId',
				label: 'Item ID',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationItem',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationItem',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'escalationLevel',
				label: 'Escalation level',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			escalationDeadline: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'escalationItem',
				field: 'escalationDeadline',
				label: 'Escalation deadline',
				rules: {},
				messages: {required: 'This field is required'}
			})
		},

		EscalationHost: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationHost',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'module',
				label: 'Module',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityBase: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'entityBase',
				label: 'Entity Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entity: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'entity',
				label: 'Full Entity Name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentField: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'assignmentField',
				label: 'Assignment Field',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			displayStateField: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'displayStateField',
				label: 'Display-state Field',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		EscalationRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			escalationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationRule',
				field: 'escalationHost',
				label: 'Escalation host',
				dataType: 'select',
				dataSource: 'escalationRule.escalationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			}),
			targetState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'targetState',
				label: 'Target status',
				dataType: 'select',
				dataSource: 'EscalationRule.HostStatus.List',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'escalationLevel',
				label: 'Escalation level',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			timeUnit: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'timeUnit',
				label: 'Time measure',
				dataType: 'select',
				dataSource: 'EscalationRule.TimeUnit.List',
				dataList: [
					{value: 'minutes', label: 'Minutes'},
					{value: 'hours', label: 'Hours'},
					{value: 'days', label: 'Days'},
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			numUnits: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'numUnits',
				label: 'Time units',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentId: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'assignmentId',
				label: 'Assign to',
				dataType: 'select',
				dataSource: 'EscalationRule.HostAssignment.List',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentLabel: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'assignmentLabel',
				label: 'Assign to',
				dataType: 'text',
				disabled: true,
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			displayStateValue: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'displayStateValue',
				label: 'New status',
				dataType: 'select',
				dataSource: 'EscalationRule.HostStatus.List',
				rules: {maxlength: 50, required: true},
				messages: {required: 'This field is required'}
			}),
			emailTo: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'escalationRule',
				field: 'emailTo',
				label: 'Email to',
				dataType: 'text',
				rows: 3,
				rules: {maxlength: 1000, required: false},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'escalationRule',
				field: 'message',
				label: 'Escalation message',
				dataType: 'text',
				rows: 6,
				rules: {maxlength: 1000, required: false},
				messages: {required: 'This field is required'}
			}),
			status: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'status',
				label: 'Status',
				dataType: 'text',
				rules: {maxlength: 20},
				messages: {required: 'This field is required'}
			})
		},

		Meta: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'meta',
				field: 'id',
				label: 'Company Id',
				rules: {required: false}
			}),
			project: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'meta',
				field: 'project',
				label: 'Project',
				dataSource: 'projects',
				dataQuery: {
					isStatic: true,
					workspace: 'Construct',
					task: 'Project.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'meta',
				field: 'module',
				label: 'Module',
				dataSource: 'modules',
				dataQuery: {
					isStatic: true,
					workspace: 'Construct',
					task: 'Module.SelectList',
					jobId: null,
					data: {
						Filter: {
							project: _App.prototype.projectId
						}
					},
					options: {},
					callback: null
				},
				rules: {required: true}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100}
			}),
			type: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'type',
				label: 'Type',
				rules: {required: true, maxlength: 100}
			}),
			subType: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'subType',
				label: 'Sub Type',
				rules: {required: true, maxlength: 100}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'description',
				label: 'Description',
				rules: {required: false, maxlength: 100}
			}),
			data: $.extend(true, {}, _App.DataElement.prototype.Textarea, {
				namespace: 'meta',
				field: 'data',
				label: 'Data',
				rules: {required: true, maxlength: 65000}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'meta',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'meta',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		DocumentCategory: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'documentCategory',
				field: 'id',
				label: 'Document Category Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'documentCategory',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentCategory',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentCategory',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		DocumentRepo: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'documentRepo',
				field: 'id',
				label: 'Document Category Id',
				rules: {required: false}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'documentRepo',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'documentRepo.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {}
			}),
			documentCategory: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'documentRepo',
				field: 'documentCategory',
				label: 'Category',
				dataSource: 'documentRepo.categories',
				dataQuery: {
					isStatic: true,
					workspace: 'DocumentRepo',
					task: 'DocumentCategory.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			document: $.extend(true, {}, _App.DataElement.prototype.Document, {
				namespace: 'documentRepo',
				field: 'document',
				label: 'Document',
				fileTypes: ['txt', 'docx', 'doc', 'xls', 'jpg', 'jpeg', 'png', 'bmp', 'tiff'],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'documentRepo',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			tags: $.extend(true, {}, _App.DataElement.prototype.Tags, {
				namespace: 'documentRepo',
				field: 'tags',
				label: 'Tags',
				rules: {required: false, maxlength: 250}
			}),
			jobState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'documentRepo',
				field: 'jobState',
				label: 'Status',
				dataSource: 'documentRepo.statusList',
				dataList: [
					{value: 'Active', label: 'Active'},
					{value: 'Archived', label: 'Archived'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentRepo',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentRepo',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		/* ConStruct::Append */

	};

})();
;;
(function ()
{

	_App.DataStore = function ()
	{
		this.initialize();
	};

	_App.DataStore.prototype =
	{

		metaStore: {},
		dataStore: {},
		itemStore: {},
		listenerStore: {},
		autoRemoveData: {},
		autoAddData: {},
		reverse: {'years': true},

		initialize: function ()
		{
			_r.DataStore = {};
			this.listenerStore = {};
		},


		clearAutoRemove: function (dataId)
		{
			if (undefined != this.autoRemoveData[dataId])
			{
				delete this.autoRemoveData[dataId];
			}
		},

		autoRemoveItem: function (dataId, id)
		{
			if (undefined == this.autoRemoveData[dataId])
			{
				this.autoRemoveData[dataId] = {};
			}
			this.autoRemoveData[dataId][id] = true;
			if (undefined != this.dataStore[dataId])
			{
				var updated = false;
				for (var i in this.dataStore[dataId])
				{
					if (this.autoRemoveData[dataId][this.dataStore[dataId][i].value])
					{
						updated = true;
						delete this.dataStore[dataId][i];
					}
				}
				if (updated)
				{
					if (this.listenerStore[dataId])
					{
						for (var id in this.listenerStore[dataId])
						{
							this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
						}
					}
				}
			}
		},

		autoAddItem: function (dataId, id, label)
		{
			if (undefined != this.dataStore[dataId])
			{
				var updated = true;
				for (var i in this.dataStore[dataId])
				{
					if (this.dataStore[dataId][i].value == id)
					{
						updated = false;
					}
				}

				if (updated)
				{
					this.dataStore[dataId].push({'value': id, 'label': label});
					if (this.listenerStore[dataId])
					{
						for (var id in this.listenerStore[dataId])
						{
							this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
						}
					}
				}
			}
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		setItem: function (param, value)
		{
			this.itemStore[param] = value;
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		incrementItem: function (param, step)
		{
			step = (undefined == step)
				? 1
				: step;
			this.itemStore[param] += step;
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		itemCeil: function (param, value)
		{
			if (undefined == this.itemStore[param] || isNaN(this.itemStore[param]))
			{
				this.itemStore[param] = value;
			}
			else if (value > this.itemStore[param])
			{
				this.itemStore[param] = value;
			}
		},

		/**
		 * Retrieve param from storage
		 * @param param
		 * @param defaultValue
		 * @returns
		 */
		getItem: function (param, defaultValue)
		{
			return null != this.itemStore[param] && undefined != this.itemStore[param]
				? this.itemStore[param]
				: defaultValue;
		},

		/**
		 * Remove param from storage
		 * @param param
		 */
		removeItem: function (param)
		{
			if (undefined != this.itemStore[param])
			{
				delete this.itemStore[param];
			}
		},

		/**
		 * Register an Event Listener.
		 * @param id
		 * @param dataId
		 * @param callback
		 * @param type
		 */
		listen: function (id, dataId, callback, type)
		{
			if (!this.listenerStore[dataId])
			{
				this.listenerStore[dataId] = {};
			}
			this.listenerStore[dataId][id] = {
				"callback": callback,
				"type": (type ? type : "UseOnce")
			};
			if (this.dataStore[dataId])
			{
				this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
				if ("UseOnce" == this.listenerStore[dataId][id]['type'])
				{
					delete this.listenerStore[dataId][id];
				}
			}
		},

		/**
		 * Remove a registered Event Listener.
		 * @param id
		 * @param dataId
		 */
		removeListener: function (id, dataId)
		{
			if (this.listenerStore[dataId] && this.listenerStore[dataId][id])
			{
				delete this.listenerStore[dataId][id];
			}
		},

		/**
		 * Set dataset.
		 * @param dataId
		 * @param data
		 */
		setData: function (dataId, data, noSwap)
		{
			if (typeof data === "function")
			{
				data = data();
			}
			if (!noSwap && this.reverse[dataId])
			{
				data.reverse();
			}
			if (this.autoRemoveData[dataId])
			{
				var newData = [];
				for (var i in data)
				{
					if (!this.autoRemoveData[dataId][data[i].value])
					{
						newData.push(data[i]);
					}
				}
				data = newData;
			}

			this.dataStore[dataId] = data;
			if (this.listenerStore[dataId])
			{
				for (var id in this.listenerStore[dataId])
				{
					this.listenerStore[dataId][id]["callback"](dataId, data);
					if ("UseOnce" == this.listenerStore[dataId][id]["type"])
					{
						delete this.listenerStore[dataId][id];
					}
				}
			}
		},

		/**
		 * Retrieve dataset.
		 * @param dataId
		 */
		getData: function (dataId, exclude)
		{
			if (undefined != this.dataStore[dataId] && undefined != exclude)
			{
				var filtered = [];
				for (var i in this.dataStore[dataId])
				{
					var match = false;
					for (var field in exclude)
					{
						if (this.dataStore[dataId][i][field] == exclude[field])
						{
							var match = true;
						}
					}
					if (!match)
					{
						filtered.push(this.dataStore[dataId][i]);
					}
				}
				return filtered;
			}
			return undefined != this.dataStore[dataId]
				? this.dataStore[dataId]
				: [];
		},

		/**
		 * Retrieve label for value from select list.
		 * @param dataId
		 * @param value
		 * @param defaultValue
		 */
		getLabelFromValue: function (dataId, value, defaultValue)
		{
			if (undefined != this.dataStore[dataId])
			{
				for (var i in this.dataStore[dataId])
				{
					if (value == this.dataStore[dataId][i].value)
					{
						return this.dataStore[dataId][i].label;
					}
				}
			}
			return undefined == defaultValue
				? null
				: defaultValue;
		},

		/**
		 * Extract data from api response and set to dataStore.
		 * @param dataId
		 * @param apiResponse
		 */
		setDataFromApiResponse: function (dataId, callback, apiResponse)
		{
			delete _r[dataId];
			this.setData(dataId,
				(apiResponse.Data.DataSet)
					? apiResponse.Data.DataSet
					: apiResponse.Data
			);
			if (undefined != callback)
			{
				callback();
			}
		},

		/**
		 * Load a select list dataset via api.
		 * @param dataId
		 * @param isStatic
		 * @param workspace
		 * @param task
		 * @param jobId
		 * @param data
		 * @param options
		 */
		loadSelectListData: function (dataId, isStatic, workspace, task, jobId, data, options, callback)
		{
			if (_r[dataId])
			{
				return;
			}
			_r[dataId] = true;
			if (isStatic && App.DataStore.dataStore[dataId])
			{
				App.DataStore.setData(dataId, App.DataStore.dataStore[dataId], true);
				return;
			}

			if ('function' == typeof data)
			{
				data = data();
			}

			App.DataStore.metaStore[dataId] = {};
			App.DataStore.metaStore[dataId].data = data
				? data
				: {};
			App.DataStore.metaStore[dataId].options = options
				? options
				: {};
			var apiTask = App.API.taskContract('DataStore.' + dataId);

			if (!apiTask || !apiTask.Hash || apiTask.Response.Task != task)
			{
				App.API.getTask(
					'DataStore.' + dataId, workspace, task, jobId,
					{},
					$.proxy(App.DataStore._loadData, this, dataId, isStatic, callback),
					_w.taskContractError
				);
			}
			else
			{
				App.DataStore._loadData(dataId, isStatic, callback);
			}
		},

		_loadData: function (dataId, isStatic, callback)
		{
			App.API.execTask(
				'DataStore.' + dataId,
				App.DataStore.metaStore[dataId].data,
				App.DataStore.metaStore[dataId].options,
				$.proxy(App.DataStore.setDataFromApiResponse, this, dataId, callback),
				_w.taskExecError
			);
		}

	};

})();

;;
(function ()
{

	_App.Theme = function ()
	{

		this.initialize();

	};

	_App.Theme.prototype =
	{

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		Icon: {
			'Glyphicon': '<span [eid] class="glyphicon glyphicon-[name] [style]"></span>'
		},

		Menu: {
			'SectionOpen': '<div class="sub-menu no-capture [span]">',
			'SectionClose': '</div>',
			'ListOpen': '<ul>',
			'ListClose': '</ul>',
			'MenuHeader': '<li id="[eid]" class="sub-menu-header no-capture">[title]</li>',
			'MenuMain': '<li id="[eid]" class="no-capture"><a class="no-capture" href="#/[href]">[title]</a></li>',
			'MenuSub': '<li id="[eid]"><a class="menu-indent no-capture" href="#/[href]">[title]</a></li>',
			'DropDown': '<li class="dropdown no-capture">'
			            + '<a href="#" class="dropdown-toggle" data-toggle="dropdown">[title] <b class="caret"></b></a>'
			            + '<div class="dropdown-menu no-capture [dropDownStyle]">'
			            + '[items]'
			            + '</div>'
			            + '</li>',
			'ContextOptionsHeading': '<a class="list-group-item heading">Options</a>',
			'ContextMenuItem': '<a id="[eid]" class="list-group-item [active]" href="#/[href]"> [title] </a>',
			'ContextMenuItemNoHref': '<a id="[eid]" class="list-group-item handy [active]"> [title] </a>'
		},

		NotifyList: {
			'DefaultContent': '<ul id="notificationsList"><li class="notice-header">Notifications</li></ul>',
			'Category': '<ul data-category="[category]"></ul>',
			'Item': '<li id="[eid]" class="notice-item" data-category="[category]">'
			        + '[title]'
			        + '</li>'
		},

		Button: {
			'GridExport': '&nbsp;<button type="[type]" [eid] [href] class="btn [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Default':     '&nbsp;<button type="[type]" [eid] [href] class="btn [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Big':         '&nbsp;<button type="[type]" [eid] [href] class="btn btn-lg [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Small':       '&nbsp;<button type="[type]" [eid] [href] class="btn btn-sm [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Tiny':        '&nbsp;<button type="[type]" [eid] [href] class="btn btn-xs [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'GroupButton': '<button type="button" [eid] class="btn btn-default [style]" [disabled]>'
			               + '	[icon] [label] '
			               + '</button>'
		},

		Grid: {
			'defaults': {
				searchButtonStyle: 'btn-primary btn-sm btn-submit-search',
				resetButtonStyle: 'btn-sm btn-clear-search',
				contextDivSpan: 'col-sm-4',
				contextLabelSpan: 'col-sm-12',
				contextLabelStyle: '',
				contextInputSpan: 'col-sm-12',
				contextInputWrapperStyle: '',
				contextInputStyle: 'input-sm',
				columnInputSpan: 'col-sm-12',
				columnInputWrapperStyle: 'filter-input',
				columnInputStyle: '',
			},
			'SingleSearchWrapper': '<td colspan="[itemCount]">'
			                       + '<form id="[formId]" class="form-inline singleSearchFilter" role="form">'
			                       + '<div class="form-group col-sm-4">[filter]</div>'
			                       + '</form>'
			                       + '</td>',
			'ColumnHeader':        '<th class="[headerStyle]">'
			                       + '[order]<span class="text" data-item="[item]">[label]</span>'
			                       + '</th>',
			'ColumnFilterWrapper': '<td>'
			                       + '[filter]'
			                       + '</td>',
			'DataRow':             '<tr [rowId] class="[rowStyle]" [rowAttrib]>'
			                       + '[cells]'
			                       + '</tr>',
			'DataCell':            '<td class="[cellStyle]" [cellAttrib]>'
			                       + '[prepend][value][append]'
			                       //+ '<a href="#" class="[cellStyle] editable editable-click" data-type="text" data-placement="right" data-title="[cellStyle]"> [prepend][value][append]</a>'
			                       + '</td>',
			'IconCheckLocked': '<span class="glyphicon glyphicon-lock green"></span>',
			'IconCheckTrue': '<span class="glyphicon glyphicon-ok green"></span>',
			'IconCheckFalse': '<span class="glyphicon glyphicon-remove red"></span>',
			'IconTransfer': '<span class="glyphicon glyphicon-transfer yellow"></span>',
			'CheckValueEditableTrue': '<span data-id="[rowId]" data-field="[dataField]" data-value="1" class="glyphicon glyphicon-ok green handy editable-check"></span>',
			'CheckValueEditableFalse': '<span data-id="[rowId]" data-field="[dataField]" data-value="0" class="glyphicon glyphicon-remove red handy editable-check"></span>',
			'Pager':               '<div class="col-sm-12 [wrapperStyle]">'
			                       + '<ul class="pagination pagination-sm pull-right handy [eid]">'
			                       + '<li><a data-page="1" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-left"></span><span class="glyphicon glyphicon-chevron-left"></span> </a></li>'
			                       + '<li><a data-page="[stepDown]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-left"></span> </a></li>'
			                       + '[items]'
			                       + '<li><a data-page="[stepUp]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-right"></span> </a></li>'
			                       + '<li><a data-page="[maxPage]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-right"></span><span class="glyphicon glyphicon-chevron-right"></span> </a></li>'
			                       + '</ul></div>',
			'PagerItem': '<li><a data-page="[pageNumber]" class="[eid] [itemStyle]"><b>[pageNumber]</b></a></li>',
			'PagerActiveItem': '<li class="active"><span data-page="[pageNumber]" class="[eid] [itemStyle]"><b>[pageNumber]</b></span></li>',
			'PageSizeSelector':    '<div class="btn-group hidden-xs [eid]">'
			                       + '<button type="button" class="btn btn-sm btn-default">Display [recordsPerPage] Rows</button>'
			                       + '<button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown">'
			                       + '<span class="caret"></span>'
			                       + '<span class="sr-only">Toggle Dropdown</span>'
			                       + '</button>'
			                       + '<ul id="[eid]Options" class="dropdown-menu" role="menu">'
			                       + '<li data-size="10"><a class="handy">Display 10 Rows</a></li>'
			                       + '<li data-size="25"><a class="handy">Display 25 Rows</a></li>'
			                       + '<li data-size="50"><a class="handy">Display 50 Rows</a></li>'
			                       + '<li data-size="100"><a class="handy">Display 100 Rows</a></li>'
			                       + '<li data-size="500" class="ghost"><a class="handy">Display 500 Rows</a></li>'
			                       + '</ul>'
			                       + '</div>',
			'RecordUpdateAction':  'Are you sure you want to save your changes? '
			                       + '<a id="[eid]_yes" class="handy">YES</a> | '
			                       + '<a id="[eid]_no" class="handy">NO</a>',
			'ActionDropdown':      '<span class="confirm" data-id="[rowId]"></span><div class="btn-group">'
			                       + '<button id="aDrpBtn[rowId]" type="button" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown">'
			                       + '<span id="aDrpBtnIcn[rowId]" class="glyphicon glyphicon-cog"></span>'
			                       + '&nbsp;&nbsp;&nbsp;<span id="aDrpBtnCrt[rowId]" class="caret"></span>'
			                       + '</button>'
			                       + '<ul id="aDrpUl[rowId]" class="dropdown-menu dropdown-sm" role="menu" data-id="[rowId]">'
			                       + '[items]'
			                       + '</ul>'
			                       + '</div>',
			'MultiActionDropdown': '<div class="btn-group">'
			                       + '<button type="button" class="btn btn-sm btn-sm [btnStyle] btn-title-action dropdown-toggle" data-toggle="dropdown">'
			                       + '<span>[buttonLabel]</span>'
			                       + '&nbsp;&nbsp;&nbsp;<span class="caret"></span>'
			                       + '</button>'
			                       + '<ul class="dropdown-menu" role="menu"">'
			                       + '[items]'
			                       + '</ul>'
			                       + '</div>',
			'ActionDropdownItem': '<li><a class="handy" data-action="[action]">[label]</a></li>',
			'ConfirmationContent': '<button type="button" id="actionConfirmation" class="btn btn-sm btn-success">'
			                       + '<span class="glyphicon glyphicon-ok"></span>&nbsp;&nbsp;'
			                       + 'Yes </button>&nbsp;'
			                       + '<button type="button" id="actionDecline" class="btn btn-sm btn-danger">'
			                       + '<span class="glyphicon glyphicon-remove"></span>&nbsp;&nbsp;'
			                       + 'No </button>'
		},

		Display: {

			'InlineNotification': '<div class="col-md-12 grey-bg">'
			                      + '<div class="col-md-1 glyphicon-margin-top-8"><span class="glyphicon glyphicon-info-sign"></span></div>'
			                      + '<div class="col-md-10">[message]</div>'
			                      + '</div>',
			'Wizard':             '<div id="[eid]" class="wizard">'
			                      + '<ul class="steps">'
			                      + '[steps]'
			                      + '</ul>'
			                      + '</div>'
			                      + '<div class="step-content">'
			                      + '[contentItems]'
			                      + '</div>',
			'WizardStep':         '<li data-target="#[contentId]" class="[active]"><span class="badge">[stepNumber]</span>'
			                      + '<span class="content">'
			                      + '<span class="step-title">Step [stepNumber]</span><br/>'
			                      + '<span class="step-description">[title]</span>'
			                      + '</span>'
			                      + '<span class="chevron"></span></li>',
			'WizardContent': '<div class="step-pane [active]" id="[eid]">[content]</div>',
			'BoxListItem':        '<div class="box-list-item">'
			                      + '<span data-id="[dataId]" class="box-list-item-remove glyphicon glyphicon-remove handy pull-right"></span>'
			                      + '<div class="box-list-item-title">[title]</div>'
			                      + '<div class="box-list-item-content">[content]</div>'
			                      + '</div>'
		},

		Field: {
			'defaults': {
				labelSpan: 'col-sm-5',
				labelStyle: '',
				inputSpan: 'col-sm-7',
				inputWrapperStyle: '',
				inputStyle: '',
			},
			'Collection': {
				'GeneralContainer': '<label for="collectionContainer_[eid]" class="[labelStyle]">[label]</label>'
				                    + '<div id="collectionContainer_[eid]" class="[containerStyle]">'
				                    + '[items]'
				                    + '</div>',
				'GeneralItem':      '<span id="collectionTag_[eid]">'
				                    + '[value]'
				                    + '</span>'
			},
			'Editable': '<a class="handy editable-display" id="[eid]" data-type="[dataType]" data-pk="[pid]" data-title="[dataTile]">'
			                           + '[value]'
			                           + '</a>',
			'CustomEditable':          '<a class="handy editable-display [style]" id="[eid]" data-pk="[pid]" data-sk="[sid]" data-type="[dataType]">'
			                           + '[value]'
			                           + '</a>'
			                           + '<input type="text" id="[eid]_input" class="editable-input ghost [style]" data-pk="[pid]" data-sk="[sid]">',
			'Input':                   '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>',
			'InputNoLabel':            '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>',
			'InputWithPrepend':        '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<span class="input-group-addon">[prepend]</span>'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'InputWithAppend':         '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '<span class="input-group-addon">[append]</span>'
			                           + '</div>'
			                           + '</div>',
			'InputWithPrependNoLabel': '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<span class="input-group-addon">[prepend]</span>'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'Checkbox':                '<label for="[eid]" class="checkbox-inline [labelStyle]">'
			                           + '<input type="checkbox" id="[eid]" name="[eid]" class="[inputStyle]" value="[value]"'
			                           + ' [attrib] [checked] [disabled]> [label]'
			                           + '</label>',
			'FormCheckbox':            '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle] check-align-left">'
			                           + '<input type="checkbox" id="[eid]" name="[eid]" class="[inputStyle]" value="[value]"'
			                           + ' [attrib] [checked] [disabled]>'
			                           + '</div>',
			'Select':                  '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="sp selectpicker show-menu-arrow [inputStyle]"'
			                           + ' data-size="[dataSize]" [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2':                 '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2Div':              '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'SelectNoLabel':           '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="sp selectpicker show-menu-arrow [inputStyle]"'
			                           + ' data-size="[dataSize]" [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2NoLabel':          '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2NoLabelDiv':       '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'SelectOption': '<option value="[value]" [selected]>[label]</option>',
			'TextArea':                '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<textarea id="[eid]" name="[eid]" class="form-control [inputStyle]" rows="[rows]" [attrib] [disabled]>[value]</textarea>'
			                           + '</div>',
			'HtmlTextArea':            '<div id="[eid]" name="[eid]" class="[inputStyle]" [attrib] [disabled]>'
			                           + '[value]</div>',
			'Image':                   '<label for="btn_[eid]" class="[labelSpan] control-label [labelStyle] no-capture">[label]</label>'
			                           + '<div id="container_[eid]" class="[inputSpan] [inputWrapperStyle] no-capture">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/image-upload">'
			                           + '<input type="hidden" id="fileid_[eid]" value="[value]">'
			                           + '<div class="input-group no-capture">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]" progress-id="progress_[eid]"'
			                           + ' class="form-control file-input [inputStyle] no-capture" placeholder="[placeholder]" [attrib] disabled>'
			                           + '<span class="input-group-btn no-capture">'
			                           + '<button type="button" id="[uid]" class="btn btn-sm btn-primary no-capture" [disabled] title="Browse for file"><span class="glyphicon glyphicon-search"></span></button>'
			                           + '<button type="button" id="[did]" class="btn btn-sm btn-primary no-capture ghost" title="Download" disabled><span class="glyphicon glyphicon-download"></span></button>'
			                           + '</span>'
			                           + '</div>'
			                           + '<div id="progress_[eid]" class="progress progress-thin progress-striped active progress-container ghost no-capture">'
			                           + '<div class="progress-bar progress-bar-success no-capture"></div>'
			                           + '</div>'
			                           + '</div>',
			'Video':                   '<input type="text" id="[eid]" value="[value]" class="col-sm-12" placeholder="YouTube Video ID">'
			                           + '<img id="img_[eid]" src="/img/app/misc/[defaultImage]" class="img-responsive img-thumbnail [videoStyle]">'
			                           + '<div id="vidcon_[eid]" class="video-container" style="display:none;">'
			                           + '<iframe id="vid_[eid]"></iframe>'
			                           + '</div>',
			'Audio':                   '<input id="btn_[eid]" class="hide" type="file" name="files[]" data-url="/workspace/audio-upload">'
			                           + '<input type="hidden" id="[eid]" value="[value]">'
			                           + '<img id="img_[eid]" src="/img/app/misc/[defaultImage]" class="img-responsive img-thumbnail [audioStyle]">'
			                           + '<div id="jquery_jplayer_[eid]" class="jp-jplayer"></div>'
			                           + '<div id="audcon_[eid]" class="jp-audio-container" style="display:none;">'
			                           + '<div class="jp-audio">'
			                           + '<div class="jp-type-single">'
			                           + '<div id="jp_interface_[eid]" class="jp-interface">'
			                           + '<ul class="jp-controls">'
			                           + '<li><a class="jp-play handy" tabindex="1">play</a></li>'
			                           + '<li><a class="jp-pause handy" tabindex="1">pause</a></li>'
			                           + '<li><a class="jp-mute handy" tabindex="1">mute</a></li>'
			                           + '<li><a " class="jp-unmute handy" tabindex="1">unmute</a></li>'
			                           + '</ul>'
			                           + '<div class="jp-progress-container">'
			                           + '<div class="jp-progress">'
			                           + '<div class="jp-seek-bar">'
			                           + '<div class="jp-play-bar"></div>'
			                           + '</div></div></div>'
			                           + '<div class="jp-volume-bar-container">'
			                           + '<div class="jp-volume-bar">'
			                           + '<div class="jp-volume-bar-value"></div>'
			                           + '</div></div></div></div></div></div>',
			'Attachment':              '<div class="[iconSpan]">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/attachment-upload">'
			                           + '<input type="hidden" id="[eid]" value="[value]">'
			                           + '<img id="doc_[eid]" src="/img/vendor/misc/upload.png" class="img-thumbnail handy [imageStyle] no-capture">'
			                           + '</div><div class="[labelSpan] no-capture">'
			                           + '<label for="btn_[eid]" class="no-capture">[label]</label>'
			                           + '</div>',
			'Document':                '<label for="btn_[eid]" class="[labelSpan] control-label [labelStyle] no-capture">[label]</label>'
			                           + '<div id="container_[eid]" class="[inputSpan] [inputWrapperStyle] no-capture">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/document-upload">'
			                           + '<input type="hidden" id="fileid_[eid]" value="[value]">'
			                           + '<div class="input-group no-capture">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]" progress-id="progress_[eid]"'
			                           + ' class="form-control file-input [inputStyle] no-capture" placeholder="[placeholder]" [attrib] disabled>'
			                           + '<span class="input-group-btn no-capture">'
			                           + '<button type="button" id="[uid]" class="btn btn-sm btn-primary no-capture" [disabled] title="Browse for file"><span class="glyphicon glyphicon-search"></span></button>'
			                           + '<button type="button" id="[did]" class="btn btn-sm btn-primary no-capture ghost" title="Download" disabled><span class="glyphicon glyphicon-download"></span></button>'
			                           + '</span>'
			                           + '</div>'
			                           + '<div id="progress_[eid]" class="progress progress-thin progress-striped active progress-container ghost no-capture">'
			                           + '<div class="progress-bar progress-bar-success"></div>'
			                           + '</div>'
			                           + '</div>',
			'Collector':               '<div class="accordion" id="[eid]">'
			                           + '</div>'
		}

	};

})();

;;
(function ()
{

	_App.Config = function ()
	{

		this.initialize();

	};

	_App.Config.prototype =
	{

		dataManglerCs: false,

		appKey: 'MUKURU',

		sectionLandingPage: {
			Brochure: '/',
			Portal: '/purchase',
			Admin: '/orders'
		},

		isDevEnvironment: (window.location.hostname == 'exchange.local'
		                   || window.location.hostname == 'exchange.local'),

		initialize: function () {}

	};

})();
;;
(function ()
{

	_App.ElementLibrary = function ()
	{
		this.initialize();
	};

	_App.ElementLibrary.prototype =
	{

		initialize: function ()
		{
			// Nothing to do.
		},

		ImageLoader: function (uri, size)
		{
			var id1 = Math.floor((Math.random() * 99999) + 1);
			var id2 = Math.floor((Math.random() * 9999) + 1)
			var imgId = 'img_' + id1.toString() + id2.toString();
			var html = '<div id="' + imgId + '" class="image-loader ' + size + ' image-load-container"></div>';

			var js = $.proxy(function (imgId, uri)
			{
				$('#' + imgId).addClass('is-loading');
				var img = new Image();
				$('#' + imgId).html(img);

				img.onload = $.proxy(function (imgId, img, elem)
				{
					$('#' + imgId).removeClass('is-loading');
					$('#' + imgId).addClass('is-loaded');
				}, this, imgId, img);

				img.onerror = $.proxy(function (imgId, img, elem)
				{
					$('#' + imgId).addClass('is-broken');

				}, this, imgId, img);

				img.src = uri;
			}, this, imgId, uri);
			return {'html': html, init: js};

		},

		Button: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '';
				}
				var preset = undefined != meta.btnPreset
					? meta.btnPreset
					: 'Default';
				var btnType = undefined != meta.btnType
					? meta.btnType
					: 'button';
				var disabledclass = (undefined != meta.permission && false == meta.permission)
				                    || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				var eid = meta.id
					? ' id="' + meta.id + '"'
					: '';
				var href = undefined != meta.href
					? ' href="' + meta.href + '"'
					: '';
				var style = undefined != meta.btnStyle
					? meta.btnStyle
					: 'btn-default';
				var icon = undefined != meta.icon
					? App.Theme.Icon.Glyphicon
					           .replaceAll('[eid]', '')
					           .replaceAll('[name]', meta.icon)
					           .replaceAll('[style]', '')
					: '';
				return App.Theme.Button[preset]
					.replaceAll('[type]', btnType)
					.replaceAll('[eid]', eid)
					.replaceAll('[href]', href)
					.replaceAll('[style]', style)
					.replaceAll('[disabled]', disabledclass)
					.replaceAll('[icon]', icon)
					.replaceAll('[label]', meta.label);
			},
			bind: function (meta)
			{
				if (null == meta)
				{
					return;
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}

				if (meta.actionContext)
				{
					$("#" + meta.id).unbind('click');
					$("#" + meta.id).click($.proxy(function (meta)
					{
						if (meta.onClick)
						{
							meta.onClick();
						}
						this.actionContext = meta.actionContext;
						if (true != meta.noSubmit)
						{
							$('#' + meta.actionForm).submit();
						}
					}, meta.proxy, meta));
				}
				else if (meta.onClick)
				{
					$("#" + meta.id).unbind('click');
					if (meta.proxy)
					{
						$("#" + meta.id).click($.proxy(meta.onClick, meta.proxy));
					}
					else
					{
						$("#" + meta.id).click(meta.onClick);
					}
				}
			}
		},

		InlineNotification: {
			html: function (meta, value)
			{
				if (null == meta)
				{
					return '';
				}

				return App.Theme.Display.InlineNotification
					.replaceAll('[message]', value);
			},
			bind: function (meta)
			{
				if (null == meta)
				{
					return;
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}
			}
		},

		SimpleDataTable: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var tableStyles = meta.tableStyles
					? meta.tableStyles
					: 'table-striped table-bordered table-condensed table-responsive';
				var html = '<table class="table ' + tableStyles + '">';
				var i = 0;
				for (var item in meta)
				{
					i++;
					if (1 == i)
					{
						// Headers
						html += '<thead><tr>';
						for (var cell in meta[item])
						{
							html += '<td><b>' + meta[item][cell] + '</b></td>';
						}
						html += '</tr><thead><tbody>';
					}
					else
					{
						// Row data
						html += '<tr>';
						for (var cell in meta[item])
						{
							html += '<td>' + meta[item][cell] + '</td>';
						}
						html += '</tr>';
					}
				}
				if (1 < meta.length)
				{
					html += '</tbody>';
				}
				html += '</table>';
				return html;
			},
			bind: function (meta)
			{
				return;
			}
		},

		DataTable: {
			build: function (containerId, meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var eid = meta.id
					? meta.id
					: '';
				var html = '<table id="' + eid + '" class="table table-striped table-bordered table-condensed">';
				if (meta.headers)
				{
					for (var item in meta.headers)
					{
						// Headers
						html += '<thead><tr>';
						for (var cell in meta.headers[item])
						{
							html += '<td><b>' + meta.headers[item][cell] + '</b></td>';
						}
						html += '</tr><thead><tbody>';
					}
				}
				for (var item in meta.data)
				{
					// Row data
					var rowId = meta.data[item].id;
					delete meta.data[item].id;
					html += '<tr data-id="' + rowId + '">';
					for (var cell in meta.data[item])
					{
						html += '<td>' + meta.data[item][cell] + '</td>';
					}
					html += '</tr>';
				}
				if (1 < meta.length)
				{
					html += '</tbody>';
				}
				html += '</table>';
				$('#' + containerId).html(html);
				return;
			},
			addRow: function (tableId, row, onClick)
			{
				var rowId = row.id;
				delete row.id;
				html = '<tr data-id="' + rowId + '">';
				for (var cell in row)
				{
					html += '<td>' + row[cell] + '</td>';
				}
				html += '</tr>';
				$('#' + tableId + ' tbody').append(html);
				if (onClick)
				{
					$('#' + tableId + ' [data-id="' + rowId + ']').click(onClick);
				}
			},
			addCollapsableRow: function (tableId, row, secData, colspan, tid, onClick)
			{
				var rowId = row.id;
				delete row.id;
				html = '<tr data-id="' + rowId + '" class="handy">';
				for (var cell in row.data)
				{
					html += '<td>' + row.data[cell] + '</td>';
				}
				html += '</tr>';

				html += '<tr data-id="' + rowId + '_col" data-mode="hidden" class="ghost"><td colspan="' + colspan + '" class="ddu-item-container"><form class="form form-horizontal"><div class="ddu-item-container-div" id="' + rowId + '_secContainer"></div></form><div>&nbsp;</div></td></tr>';

				$('#' + tableId + ' tbody').append(html);

				for (i in secData)
				{
					var html = '';

					switch (secData[i].type)
					{
						case 'formItem':
							html = secData[i].html;
							$('#' + rowId + '_secContainer').append(html);
							App.ElementLibrary.Field.bind(tid, secData[i].meta);
							break;
						default:
							html = secData[i].html;
							$('#' + rowId + '_secContainer').append(html);
							break;
					}
				}

				$('#' + tableId + ' [data-id="' + rowId + '"]').click($.proxy(function ()
				{
					var tg = $('#' + tableId + ' [data-id="' + rowId + '_col"]');
					if ('hidden' == $(tg).attr('data-mode'))
					{
						$(tg).show(150);
						$(tg).attr('data-mode', 'shown');
					}
					else
					{
						$(tg).hide(150);
						$(tg).attr('data-mode', 'hidden');
					}
				}, this, rowId));

			},
			updateRow: function (tableId, row)
			{
				var rowId = row.id;
				delete row.id;
				var html = '';
				for (var cell in row)
				{
					html += '<td>' + row[cell] + '</td>';
				}
				html += '</tr>';
				$('#' + tableId + ' tbody tr[data-id="' + rowId + '"]').html(html);
			},
			removeRow: function (tableId, rowId)
			{
				$('#' + tableId + ' tbody tr[data-id="' + rowId + '"]').remove();
			}
		},

		GridContextFilter: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '<div class="">&nbsp;</div>';
				}
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? ' disabled'
					: '';

				if (meta.actions)
				{
					var preset = undefined != meta.btnPreset
						? meta.btnPreset
						: 'Default';
					var btnType = undefined != meta.btnType
						? meta.btnType
						: 'button';
					var eid = meta.id
						? ' id="' + meta.id + '"'
						: '';
					var href = undefined != meta.href
						? ' href="' + meta.href + '"'
						: '';
					var style = undefined != meta.btnStyle
						? meta.btnStyle
						: 'btn-default';
					var searchIcon = undefined != meta.icon
						? App.Theme.Icon.Glyphicon
						                 .replaceAll('[eid]', '')
						                 .replaceAll('[name]', 'search')
						                 .replaceAll('[style]', '')
						: '';
					var clearIcon = undefined != meta.icon
						? App.Theme.Icon.Glyphicon
						                .replaceAll('[eid]', '')
						                .replaceAll('[name]', 'remove-circle')
						                .replaceAll('[style]', '')
						: '';
					var html = '</div><div class="row"><div class="col-xs-12"><div class="pull-right pad-5">';
					html += App.Theme.Button[preset]
						.replaceAll('[type]', btnType)
						.replaceAll('[eid]', ' id="' + meta.clearId + '"')
						.replaceAll('[href]', href)
						.replaceAll('[style]', style + ' ' + App.Theme.Grid.defaults.resetButtonStyle)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[icon]', clearIcon)
						.replaceAll('[label]', 'Clear search');
					html += App.Theme.Button[preset]
						.replaceAll('[type]', btnType)
						.replaceAll('[eid]', ' id="' + meta.searchId + '"')
						.replaceAll('[href]', href)
						.replaceAll('[style]', style + ' ' + App.Theme.Grid.defaults.searchButtonStyle)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[icon]', searchIcon)
						.replaceAll('[label]', 'Search');
					html += '</div></div>';
					return html;
				}
				else
				{
					var eid = meta.id
						? meta.id
						: Math.floor((Math.random() * 100000) + 1);
					var labelSpan = undefined != meta.contextLabelSpan
						? meta.contextLabelSpan
						: App.Theme.Grid.defaults.contextLabelSpan;
					var labelStyle = undefined != meta.contextLabelStyle
						? meta.contextLabelStyle
						: App.Theme.Grid.defaults.contextLabelStyle;
					var inputSpan = undefined != meta.contextInputSpan
						? meta.contextInputSpan
						: App.Theme.Grid.defaults.contextInputSpan;
					var inputWrapperStyle = undefined != meta.contextInputWrapperStyle
						? meta.contextInputWrapperStyle
						: App.Theme.Grid.defaults.contextInputWrapperStyle;
					var inputStyle = undefined != meta.contextInputStyle
						? meta.contextInputStyle
						: App.Theme.Grid.defaults.contextInputStyle;
					var placeholder = undefined != meta.placeholder
						? meta.placeholder
						: '';
					var attrib = undefined != meta.contextAttrib
						? ' ' + meta.contextAttrib
						: '';
					var value = meta.value
						? meta.value
						: '';
					var inputType = meta.inputType
						? meta.inputType
						: 'text';
					var max = meta.maxlength
						? ' maxlength="' + meta.maxlength + '"'
						: '';
					labelStyle += ' context-filter-label';
					inputWrapperStyle += ' filter-input';
					if (meta.context)
					{
						inputStyle += ' ' + meta.context;
					}
					if (meta.readonly)
					{
						attrib += ' readonly';
					}
					if (meta.maxlength)
					{
						attrib += ' maxlength="' + meta.maxlength + '"';
					}
					var html = '<div class="' + App.Theme.Grid.defaults.contextDivSpan + '">';
					if ('date' == inputType)
					{
						attrib += ' data-date-format="' + App.DataStruct.dateFormat + '"';
						inputStyle = inputStyle + ' datepicker';
						html += App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', value)
							.replaceAll('[append]', '<span class="text-sm"><span class="glyphicon glyphicon-calendar"></span></span>')
							.replaceAll('[disabled]', disabled);
					}
					else if (meta.dataSource)
					{
						if (meta.dataList)
						{
							App.DataStore.setData(meta.dataSource, meta.dataList);
						}
						else if (meta.dataQuery)
						{
							if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
							{

								App.DataStore.loadSelectListData(
									meta.dataSource,
									meta.dataQuery.isStatic,
									meta.dataQuery.workspace,
									meta.dataQuery.task,
									meta.dataQuery.jobId,
									meta.dataQuery.data,
									meta.dataQuery.options,
									meta.dataQuery.callback
								);
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.selected)
						{
							meta.selected = '';
						}
						attrib += (meta.label)
							? ' title="' + meta.label + '"'
							: '';
						var selectMe = '';
						var options = '';
						for (var i = 0; i < meta.options.length; i++)
						{
							selectMe = (meta.options[i].value == meta.selected) ? ' selected' : '';
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', selectMe));
						}
						html += App.Theme.Field.Select
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[disabled]', disabled)
							.replaceAll('[options]', options);
					}
					else
					{
						html += App.Theme.Field.Input
							.replaceAll('[type]', inputType)
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', value)
							.replaceAll('[disabled]', disabled);
					}
					html += '</div>';
					return html;
				}
			},
			bind: function (meta)
			{
				if (meta && meta.actions)
				{
					$("#" + meta.clearId).click(meta.bindClear);
					$("#" + meta.searchId).click(meta.bindSearch);
				}
				else
				{
					if (null != meta && meta['bind'])
					{
						meta['bind'](meta);
					}
					if (meta.inputType && 'date' == meta.inputType)
					{
						var opt = meta.dtopt ? meta.dtopt : {};
						opt.autoclose = true;
						$('#' + meta.id).datepicker(opt);
					}
					if (null != meta && meta.dataSource)
					{
						App.DataStore.listen(
							meta.id, meta.dataSource,
							$.proxy(App.ElementLibrary.BuildSelectOptions, this, null, meta),
							'Recurring'
						);
					}
				}
			}
		},

		GridSingleSearch: {
			html: function (items, filterId)
			{
				var itemCount = 0;
				var formId = filterId + 'SsForm';
				_w.singleSearchMap[filterId] = [];
				for (var item in items)
				{
					itemCount++;
					if (items[item].field)
					{
						_w.singleSearchMap[filterId].push(items[item].field);
					}
				}
				var meta = {};
				var inputSpan = undefined != meta.columnInputSpan
					? meta.columnInputSpan
					: App.Theme.Grid.defaults.columnInputSpan;
				var inputWrapperStyle = undefined != meta.columnInputWrapperStyle
					? meta.columnInputWrapperStyle
					: App.Theme.Grid.defaults.columnInputWrapperStyle;
				var inputStyle = undefined != meta.columnInputStyle
					? meta.columnInputStyle
					: App.Theme.Grid.defaults.columnInputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: 'Search';
				var attrib = undefined != meta.columnAttrib
					? ' ' + meta.columnAttrib
					: '';
				var value = meta.value
					? meta.value
					: '';
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				inputStyle += 'input-sm';
				var filter = App.Theme.Field.InputNoLabel
					.replaceAll('[type]', 'text')
					.replaceAll('[eid]', filterId)
					.replaceAll('[inputSpan]', inputSpan)
					.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
					.replaceAll('[inputStyle]', inputStyle)
					.replaceAll('[placeholder]', placeholder)
					.replaceAll('[attrib]', attrib)
					.replaceAll('[value]', value)
					.replaceAll('[disabled]', disabled);
				var html = App.Theme.Grid.SingleSearchWrapper
					.replaceAll('[itemCount]', itemCount)
					.replaceAll('[formId]', formId)
					.replaceAll('[filter]', filter);
				return html;
			},
			bind: function (filterId)
			{
				/*if (null != meta && meta.on)
				 {
				 meta['bind'](meta);
				 }*/
			}
		},
		gridCounter: 0,

		GridColumnHeader: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '<th>&nbsp;</th>';
				}
				if (undefined != meta.permission && false == meta.permission)
				{
					return '';
				}
				var headerStyle = meta.headerStyle
					? meta.headerStyle
					: '';
				var orderDesc = meta.orderDesc
					? App.Theme.Icon.Glyphicon
					                .replaceAll('[eid]', ' id="' + meta.orderDesc.id + '"')
					                .replaceAll('[name]', 'circle-arrow-up')
					                .replaceAll('[style]', ' order-desc')
					: '';
				var orderAsc = meta.orderAsc
					? App.Theme.Icon.Glyphicon
					               .replaceAll('[eid]', ' id="' + meta.orderAsc.id + '"')
					               .replaceAll('[name]', 'circle-arrow-down')
					               .replaceAll('[style]', ' order-asc')
					: '';
				var label = meta.label;
				/*if ('Actions' == meta.id)
				 {
				 var eid = 'gridTitleAction' + App.ElementLibrary.gridCounter;
				 label = '<span id="' + eid + '" class="grid-column-controller"></span>';
				 }
				 else
				 {
				 headerStyle += ' data-column';
				 }*/
				var html = App.Theme.Grid.ColumnHeader
					.replaceAll('[headerStyle]', headerStyle + ' ' + meta.id)
					.replaceAll('[item]', meta.id)
					.replaceAll('[label]', label)
					.replaceAll('[order]', orderDesc + orderAsc);
				return html;
			},
			bind: function (meta)
			{
				if (meta && meta.orderAsc)
				{
					$("#" + meta.orderAsc.id).click(meta.orderAsc.bind);
				}
				if (meta && meta.orderDesc)
				{
					$("#" + meta.orderDesc.id).click(meta.orderDesc.bind);
				}
			}
		},

		GridColumnFilter: {
			html: function (meta)
			{
				if (null == meta || !meta.filterId)
				{
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', '&nbsp;');
					return html;
				}

				var eid = meta.filterId;
				var inputSpan = undefined != meta.columnInputSpan
					? meta.columnInputSpan
					: App.Theme.Grid.defaults.columnInputSpan;
				var inputWrapperStyle = undefined != meta.columnInputWrapperStyle
					? meta.columnInputWrapperStyle
					: App.Theme.Grid.defaults.columnInputWrapperStyle;
				var inputStyle = undefined != meta.columnInputStyle
					? meta.columnInputStyle
					: App.Theme.Grid.defaults.columnInputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: '';
				var attrib = undefined != meta.columnAttrib
					? ' ' + meta.columnAttrib
					: '';
				var value = meta.value
					? meta.value
					: '';
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				inputStyle += 'input-sm';
				if (meta.context)
				{
					inputStyle += ' ' + meta.context;
				}

				if (meta.dataSource)
				{
					if (meta.dataList)
					{
						App.DataStore.setData(meta.dataSource, meta.dataList);
					}
					else if (meta.dataQuery)
					{
						if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
						{

							App.DataStore.loadSelectListData(
								meta.dataSource,
								meta.dataQuery.isStatic,
								meta.dataQuery.workspace,
								meta.dataQuery.task,
								meta.dataQuery.jobId,
								meta.dataQuery.data,
								meta.dataQuery.options,
								meta.dataQuery.callback
							);
						}


					}
					if (!meta.options)
					{
						meta.options = [];
					}
					if (!meta.selected)
					{
						meta.selected = '';
					}
					attrib += (meta.label)
						? ' title="' + meta.label + '"'
						: '';
					var selectMe = '';
					var options = '';
					for (var i = 0; i < meta.options.length; i++)
					{
						selectMe = (meta.options[i].value == meta.selected) ? ' selected' : '';
						options += (App.Theme.Field.SelectOption
							.replaceAll('[value]', meta.options[i].value)
							.replaceAll('[label]', meta.options[i].label)
							.replaceAll('[selected]', selectMe));
					}
					var filter = App.Theme.Field.SelectNoLabel
						.replaceAll('[eid]', eid)
						.replaceAll('[inputSpan]', inputSpan)
						.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
						.replaceAll('[inputStyle]', inputStyle)
						.replaceAll('[placeholder]', placeholder)
						.replaceAll('[attrib]', attrib)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[options]', options);
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', filter);
					return html;
				}
				else
				{
					var inputType = meta.inputType
						? meta.inputType
						: 'text';
					var max = meta.maxlength
						? ' maxlength="' + meta.maxlength + '"'
						: '';
					if (meta.maxlength)
					{
						attrib += ' maxlength="' + meta.maxlength + '"';
					}
					var filter = App.Theme.Field.InputNoLabel
						.replaceAll('[type]', inputType)
						.replaceAll('[eid]', eid)
						.replaceAll('[inputSpan]', inputSpan)
						.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
						.replaceAll('[inputStyle]', inputStyle)
						.replaceAll('[placeholder]', placeholder)
						.replaceAll('[attrib]', attrib)
						.replaceAll('[value]', value)
						.replaceAll('[disabled]', disabled);
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', filter);
					return html;
				}
			},
			bind: function (meta)
			{
				if (null != meta && meta.on)
				{
					meta['bind'](meta);
				}
				if (null != meta && meta.dataSource)
				{
					App.DataStore.listen(
						meta.filterId, meta.dataSource,
						$.proxy(App.ElementLibrary.BuildSelectOptions, this, null, meta),
						'Recurring'
					);
				}
			}
		},

		GridDataRow: {
			html: function (meta, isGroupingRow, groupValue)
			{
				if (null == meta)
				{
					return '<tr><td></td></tr>';
				}
				id = meta.items.id;
				if (isNaN(id))
				{
					var ident = [];
					for (var field in id)
					{
						ident.push(field + '=' + id[field]);
					}
					var identifier = ident.join('&');
				}
				else
				{
					var identifier = 'id=' + id;
				}
				var cells = '';
				var editableRow = meta.editable && meta.editable.canEditRow(id, meta.items)
				                  && (undefined == meta.editable.permissions
				                      || true == meta.editable.permissions);
				if (isGroupingRow)
				{
					var rowIdPrepend = meta.rowIdPrepend
						? meta.rowIdPrepend
						: '';
					var rowId = meta.rowId
						? 'id="group_row' + rowIdPrepend + meta.rowId + '"'
						: '';
					var columnCount = 0;
					for (var item in meta.items)
					{
						columnCount++;
					}

					var cellStyle = '';
					var cellAttrib = ' colspan="' + columnCount + '"';
					var cellPrepend = '';
					var cellAppend = '';
					cells += App.Theme.Grid.DataCell
						.replaceAll('[cellStyle]', cellStyle + ' grid-group-cell')
						.replaceAll('[cellAttrib]', cellAttrib)
						.replaceAll('[prepend]', cellPrepend)
						.replaceAll('[value]', groupValue)
						.replaceAll('[append]', cellAppend);
				}
				else
				{
					var rowIdPrepend = meta.rowIdPrepend
						? meta.rowIdPrepend
						: '';
					var rowId = meta.rowId
						? 'id="row' + rowIdPrepend + meta.rowId + '"'
						: '';
					for (var item in meta.items)
					{
						if ('id' == item)
						{
							continue;
						}
						if (meta.items[item]
						    && undefined != meta.items[item].permission
						    && false == meta.items[item].permission)
						{
							continue;
						}
						var cellStyle = meta.cellStyle && meta.cellStyle[item]
							? meta.cellStyle[item]
							: '';
						var cellAttrib = meta.cellAttrib && meta.cellAttrib[item]
							? meta.cellAttrib[item]
							: '';
						var cellPrepend = meta.cellPrepend && meta.cellPrepend[item]
							? '<span class="grid-column-prepend">' + meta.cellPrepend[item] + '</span>'
							: '';
						var cellAppend = meta.cellAppend && meta.cellAppend[item]
							? '<span class="grid-column-append">' + meta.cellAppend[item] + '</span>'
							: '';
						var value = meta.items && meta.items[item]
							? meta.items[item]
							: '&nbsp;';
						if (undefined != meta.columnPermission
						    && undefined != meta.columnPermission[item]
						    && false == meta.columnPermission[item])
						{
							continue;
						}
						if (editableRow && meta.editable.items[item])
						{
							var dataType = meta.editable.items[item].dataType
								? meta.editable.items[item].dataType
								: 'text';
							var dataTile = meta.editable.items[item].dataTile
								? meta.editable.items[item].dataTile
								: 'Edit Value';
							if ('checkbox' == dataType)
							{
								var libElement = true === value
									? 'CheckValueEditableTrue'
									: 'CheckValueEditableFalse';
								value = App.Theme.Grid[libElement]
									.replaceAll('[rowId]', meta.rowId)
									.replaceAll('[dataField]', item);
							}
							else
							{
								value = App.Theme.Field.Editable
									.replaceAll('[eid]', item + '_' + meta.rowId)
									.replaceAll('[dataType]', dataType)
									.replaceAll('[pid]', meta.rowId)
									.replaceAll('[dataTile]', dataTile)
									.replaceAll('[value]', value);
							}
							if (('select' == dataType || 'select2' == dataType || 'checklist' == dataType)
							    && meta.editable.items[item].dataList)
							{
								var source = meta.editable.items[item].dataSource;
								if (!_w.runningSelects)
								{
									_w.runningSelects = {};
								}
								if (!_w.runningSelects[source])
								{
									_w.runningSelects[source] = true;
									setTimeout($.proxy(function (source)
									{
										delete _w.runningSelects[source];
									}, this, source), 1000);
									App.DataStore.setData(
										meta.editable.items[item].dataSource,
										meta.editable.items[item].dataList
									);
								}
							}
							if (('select' == dataType || 'select2' == dataType || 'checklist' == dataType)
							    && meta.editable.items[item].dataQuery)
							{
								var source = meta.editable.items[item].dataSource;
								if (!_w.runningSelects)
								{
									_w.runningSelects = {};
								}
								if (!_w.runningSelects[source])
								{
									_w.runningSelects[source] = true;
									setTimeout($.proxy(function (source)
									{
										delete _w.runningSelects[source];
									}, this, source), 1000);
									var query = meta.editable.items[item].dataQuery;
									App.DataStore.loadSelectListData(
										source,
										query.isStatic,
										query.workspace,
										query.task,
										null,
										{},
										{},
										null
									);
								}
							}
						}
						cells += App.Theme.Grid.DataCell
							.replaceAll('[cellStyle]', cellStyle + ' ' + item)
							.replaceAll('[cellAttrib]', cellAttrib)
							.replaceAll('[prepend]', cellPrepend)
							.replaceAll('[value]', value)
							.replaceAll('[append]', cellAppend);
					}
				}
				var rowStyle = meta.rowStyle
					? meta.rowStyle
					: '';
				var rowAttrib = meta.rowAttrib
					? meta.rowAttrib
					: '';

				if (!isGroupingRow && groupValue)
				{
					rowAttrib += ' data-group-value="' + groupValue + '"';
				}
				if (isGroupingRow)
				{
					rowStyle += ' grid-group-row';
				}
				if (meta.url)
				{
					rowAttrib += ' onClick="window.location=\'#/' + meta.url + '?' + identifier + '\';"';
					rowStyle += ' handy';
				}
				var html = App.Theme.Grid.DataRow
					.replaceAll('[rowId]', rowId)
					.replaceAll('[rowStyle]', rowStyle)
					.replaceAll('[cells]', cells)
					.replaceAll('[rowAttrib]', rowAttrib);
				return html;
			},
			bind: function (meta, isGroupingRow, groupValue)
			{
				var rowIdPrepend = meta.rowIdPrepend
					? meta.rowIdPrepend
					: '';
				if (null != meta && meta['bind'])
				{
					meta['bind'](meta);
				}

				if (null != meta && meta.rowClick && !isGroupingRow)
				{
					$('#row' + rowIdPrepend + meta.rowId).unbind('click');
					$('#row' + rowIdPrepend + meta.rowId).click($.proxy(meta.rowClick, this, meta.items));
				}

				if (null != meta && isGroupingRow)
				{
					$('#group_row' + rowIdPrepend + meta.rowId).attr('data-visible', 1);
					$('#group_row' + rowIdPrepend + meta.rowId).unbind('click');
					$('#group_row' + rowIdPrepend + meta.rowId).click($.proxy(function (groupRowId, groupValue)
					{
						if (1 != $(groupRowId).attr('data-visible'))
						{
							$('[data-group-value=' + groupValue + ']').show();
							$(groupRowId).attr('data-visible', 1);
						}
						else
						{
							$('[data-group-value=' + groupValue + ']').hide();
							$(groupRowId).attr('data-visible', 0);
						}
					}, this, '#group_row' + rowIdPrepend + meta.rowId, groupValue));
				}

				if (meta.editable)
				{
					for (var item in meta.editable.items)
					{
						if (meta.editable.items[item].dataSource)
						{
							// Select List
							App.DataStore.listen(
								item + '_' + meta.rowId,
								meta.editable.items[item].dataSource,
								$.proxy(function (meta, item, dataId, data)
								{
									var dataList = [];
									for (var si in data)
									{
										dataList.push({value: data[si].value, text: data[si].label});
									}
									var value = $('#' + item + '_' + meta.rowId).html();
									if (meta.editable.items[item].multiple)
									{
										var currValue = [];
										var values = undefined != value
											? value.split(', ')
											: [];
										for (var i in values)
										{
											for (var si in data)
											{
												if (values[i] == data[si].label)
												{
													currValue.push(data[si].value);
												}
											}
										}
									}
									else
									{
										var currValue = '';
										for (var i in values)
										{
											for (var si in data)
											{
												if (values[i] == data[si].label)
												{
													currValue = data[si].value;
												}
											}
										}
									}
									var select2 = meta.editable.items[item].select2
										? meta.editable.items[item].select2
										: {};
									$('#' + item + '_' + meta.rowId).editable({
										onblur: 'ignore',
										showbuttons: false,
										source: dataList,
										value: currValue,
										select2: select2,
										success: $.proxy(function (meta, field, response, value)
										{
											$.proxy(_w.updateGridRowField, meta.editable.context)(
												meta.editable, meta.rowId, meta.editable.items[field].field, value
											);
										}, this, meta, item),
										validate: $.proxy(_w.validateInlineEdit, this, item + '_' + meta.rowId, meta.editable.items[item])
									});
								}, this, meta, item)
							);
						}
						else
						{
							if ('checkbox' == meta.editable.items[item].dataType)
							{
								$('#row' + meta.rowIdPrepend + meta.rowId + ' .editable-check').unbind('click');
								$('#row' + meta.rowIdPrepend + meta.rowId + ' .editable-check').click($.proxy(function (meta,
								                                                                                        evt)
								{
									var field = $(evt.currentTarget).attr('data-field');
									var value = 1 == $(evt.currentTarget).attr('data-value')
										? false
										: true;
									if (value)
									{
										$(evt.currentTarget).removeClass('glyphicon-remove').removeClass('red');
										$(evt.currentTarget).addClass('glyphicon-ok').addClass('green');
										$(evt.currentTarget).attr('data-value', '1');
									}
									else
									{
										$(evt.currentTarget).removeClass('glyphicon-ok').removeClass('green');
										$(evt.currentTarget).addClass('glyphicon-remove').addClass('red');
										$(evt.currentTarget).attr('data-value', '0');
									}
									$.proxy(_w.updateGridRowField, meta.editable.context)(
										meta.editable, meta.rowId, meta.editable.items[field].field, value
									);
								}, this, meta));
							}
							else
							{
								// Text element
								$('#' + item + '_' + meta.rowId).editable({
									//mode: 'inline',
									showbuttons: false,
									success: $.proxy(function (meta, field, response, value)
									{
										$.proxy(_w.updateGridRowField, meta.editable.context)(
											meta.editable, meta.rowId, meta.editable.items[field].field, value
										);
									}, this, meta, item),
									validate: $.proxy(_w.validateInlineEdit, this, item + '_' + meta.rowId, meta.editable.items[item])
								});

								$('#' + item + '_' + meta.rowId).on('hidden', $.proxy(function (meta, e, reason)
								{
									$('#' + item + '_' + meta.rowId).parent().find('span.grid-column-prepend, span.grid-column-append').show();
								}, this, meta));
								$('#' + item + '_' + meta.rowId).on('shown', $.proxy(function (meta, e, editable)
								{
									$('#' + item + '_' + meta.rowId).parent().find('span.grid-column-prepend, span.grid-column-append').hide();

								}, this, meta));


								var mask = meta.editable.items[item].mask;

								if (mask)
								{
									$('#' + item + '_' + meta.rowId).on('shown', $.proxy(function (mask, e, editable)
									{
										editable.input.$input.attr('id', item + '_' + meta.rowId + '_xedt');
										editable.input.$input.attr('name', item + '_' + meta.rowId + '_xedt');
										editable.input.$input.mask(mask);
									}, this, mask));
								}
							}
						}
					}
				}
			}
		},

		GridPager: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var startPage = parseInt(meta.CurrentPage, 10) - 4;
				var endPage = parseInt(meta.CurrentPage, 10) + 4;

				if (startPage < 1)
				{
					startPage = 1;
					endPage = 9 - startPage;
				}
				if (endPage > meta.TotalPages)
				{
					endPage = meta.TotalPages;
					startPage = endPage - 9;
				}
				if (startPage < 1)
				{
					startPage = 1;
				}
				if (8 >= parseInt(meta.CurrentPage))
				{
					var stepDown = 1;
				}
				else
				{
					var stepDown = parseInt(meta.CurrentPage) - 8;
				}
				if ((parseInt(meta.TotalPages) - 8) <= parseInt(meta.CurrentPage))
				{
					var stepUp = meta.TotalPages;
				}
				else
				{
					var stepUp = parseInt(meta.CurrentPage) + 8;
				}

				var eid = meta.id;
				var itemStyle = undefined != meta.pagerItemStyle
					? meta.pagerItemStyle
					: '';
				var wrapperStyle = undefined != meta.pagerWrapperStyle
					? meta.pagerWrapperStyle
					: '';
				var items = '';
				for (var i = startPage; i <= endPage; i++)
				{
					if (i == meta.CurrentPage)
					{
						items += App.Theme.Grid.PagerActiveItem
							.replaceAll('[pageNumber]', i)
							.replaceAll('[eid]', eid)
							.replaceAll('[itemStyle]', itemStyle);
					}
					else
					{
						items += App.Theme.Grid.PagerItem
							.replaceAll('[pageNumber]', i)
							.replaceAll('[eid]', eid)
							.replaceAll('[itemStyle]', itemStyle);
					}
				}
				var html = App.Theme.Grid.Pager
					.replaceAll('[wrapperStyle]', wrapperStyle)
					.replaceAll('[eid]', eid)
					.replaceAll('[itemStyle]', itemStyle)
					.replaceAll('[items]', items)
					.replaceAll('[stepDown]', stepDown)
					.replaceAll('[stepUp]', stepUp)
					.replaceAll('[maxPage]', meta.TotalPages);
				return html;
			},
			bind: function (meta)
			{
				if (meta && meta.bind)
				{
					$('.' + meta.id).click($.proxy(function (meta, evt)
					{
						$('.' + meta.id).parent().parent().find('li.active').removeClass('active');
						$(evt.currentTarget).parent().addClass('active');
						meta['bind']($(evt.currentTarget).attr('data-page'));
					}, this, meta));
				}
				$(".pagination." + meta.id).rPage();
			}
		},

		GridPageSize: {
			html: function (meta)
			{
				if (null == meta || undefined == meta.RecordsPerPage)
				{
					return '&nbsp;';
				}
				var recs = meta.RecordsPerPage;

				var html = App.Theme.Grid.PageSizeSelector
					.replaceAll('[recordsPerPage]', recs)
					.replaceAll('[eid]', meta.id);
				return html;
			},
			bind: function (meta)
			{
				if (meta.allowLarge)
				{
					$('#' + meta.id + 'Options li[data-size="500"]').removeClass('ghost');
				}
				if (meta && meta.bind)
				{
					$('#' + meta.id + 'Options li').click(function ()
					{
						meta['bind']($(this).attr('data-size'));
					});
				}
			}
		},

		GridRecords: {
			html: function (meta)
			{
				if (null == meta || undefined == meta.TotalRecords)
				{
					return '&nbsp;';
				}

				var recordStart = 0;
				var recordEnd = 0;

				if (0 != meta.TotalRecords)
				{
					recordStart = parseInt(meta.RecordsPerPage, 10) * parseInt(meta.CurrentPage, 10) - 9;
					recordEnd = parseInt(meta.RecordsPerPage, 10) * parseInt(meta.CurrentPage, 10);

					if (parseInt(meta.TotalRecords, 10) < parseInt(meta.RecordsPerPage, 10))
					{
						recordEnd = parseInt(meta.TotalRecords, 10);
					}
				}

				var html = App.Theme.Grid.PageRecords
					.replaceAll('[resultsStart]', recordStart)
					.replaceAll('[resultsEnd]', recordEnd)
					.replaceAll('[totalResults]', meta.TotalRecords);

				return html;
			}
		},


		BuildSelectOptions: function (tid, meta, dataId, options)
		{
			if ('Published' != App.Template.state)
			{
				return;
			}
			var elemId = meta.filterId
				? meta.filterId
				: meta.id;
			App.DataStore.setItem('BuildSelect:' + elemId, true);
			var selected = $('#' + elemId).val();
			if (!selected)
			{
				if (meta.value)
				{
					if (meta.multiple)
					{
						selected = [];
						var selectMulti = {};
						for (var ii = 0; ii < meta.value.length; ii++)
						{
							selected.push(meta.value[ii].toString());
							selectMulti['x' + meta.value[ii]] = true;
						}
					}
					else
					{
						selected = meta.value;
					}
				}
				else
				{
					selected = '';
				}
			}
			else if (meta.multiple)
			{
				selected = [];
				var selectMulti = {};
				for (var ii = 0; ii < meta.value.length; ii++)
				{

					if (undefined == meta.value[ii]['id'])
					{
						selected.push(meta.value[ii].toString());
						selectMulti['x' + meta.value[ii]] = true;
					}
					else
					{
						selected.push(meta.value[ii]['id'].toString());
						selectMulti['x' + meta.value[ii]['id']] = true;
					}
				}
			}
			var opts = '';
			if (meta.selectEmpty)
			{
				opts += (App.Theme.Field.SelectOption
					.replaceAll('[value]', '')
					.replaceAll('[label]', meta.selectEmpty)
					.replaceAll('[selected]', ''));
			}
			var doSelect = '';

			/*
			 * Set label & value alias for bind from grids
			 */
			var labelAlias = undefined != meta.labelField ? meta.labelField : 'label';
			var valueAlias = undefined != meta.valueField ? meta.valueField : 'value';
			for (var i = 0; i < options.length; i++)
			{
				if (meta.multiple)
				{
					var val = options[i].value;
					doSelect = (selectMulti['x' + val])
						? 'selected'
						: '';
				}
				else
				{
					if (undefined != options[i])
					{
						doSelect = (options[i].value == selected)
							? 'selected'
							: '';
					}
					else
					{
						doSelect = '';
					}
				}

				if (undefined != options[i])
				{
					opts += (App.Theme.Field.SelectOption
						.replaceAll('[value]', options[i][valueAlias])
						.replaceAll('[label]', options[i][labelAlias])
						.replaceAll('[selected]', doSelect));
				}

			}
			$('#' + elemId).html(opts);
			/*$('#' + elemId).selectpicker('refresh');
			 if (!meta.multiple)
			 {
			 $('#' + elemId).selectpicker('val', selected);
			 }*/
			$('#' + elemId).select2('updateResults', true);
			$('#' + elemId).select2('val', selected);

			/*
			 * Fire onChange internal event
			 */
			setTimeout($.proxy(function (elemId)
			{
				$('#' + elemId).change();
				setTimeout($.proxy(function (elemId)
				{
					App.DataStore.removeItem('BuildSelect:' + elemId);
				}, this, elemId), 100);
			}, this, elemId), 100);

		},

		BuildCheckGroupHtml: function (meta, options)
		{
			if ('Published' != App.Template.state)
			{
				return '';
			}
			var items = {};
			if (undefined != meta.data)
			{
				for (var i = 0; i < meta.data.length; i++)
				{
					items['i' + meta.data[i]] = true;
				}
			}
			var sectionMax = options.length;
			var sectionClass = 'col-md-12';
			var sectionSpans = ['', 'col-md-12', 'col-md-6', 'col-md-4', 'col-md-3'];
			if (meta.split)
			{
				if (4 < meta.split)
				{
					delete meta.split;
				}
				else
				{
					sectionMax = Math.ceil(options.length / meta.split);
					sectionClass = sectionSpans[meta.split];
				}
			}

			var html = '<div class="' + sectionClass + '">';

			var disabled = (undefined != meta.permission && false == meta.permission)
			               || (undefined != meta.disabled && true == meta.disabled)
				? 'disabled'
				: '';
			var labelStyle = undefined != meta.labelStyle
				? meta.labelStyle
				: App.Theme.Field.defaults.labelStyle;
			var inputSpan = undefined != meta.inputSpan
				? meta.inputSpan
				: App.Theme.Field.defaults.inputSpan;
			var inputWrapperStyle = undefined != meta.inputWrapperStyle
				? meta.inputWrapperStyle
				: App.Theme.Field.defaults.inputWrapperStyle;
			var inputStyle = undefined != meta.inputStyle
				? meta.inputStyle
				: App.Theme.Field.defaults.inputStyle;
			inputStyle += ' ' + meta.itemName;
			var r = 0;
			for (var i = 0; i < options.length; i++)
			{
				if (r == sectionMax)
				{
					html += '</div>';
					html += '<div class="' + sectionClass + '">';
					r = 0;
				}
				var itemId = options[i].value;
				var label = options[i].label;
				var checked = items['i' + itemId]
					? 'checked'
					: '';
				var chkItem = App.Theme.Field.Checkbox
					.replaceAll('[eid]', meta.itemName + itemId + 'Check')
					.replaceAll('[labelStyle]', labelStyle)
					.replaceAll('[label]', label)
					.replaceAll('[inputStyle]', inputStyle)
					.replaceAll('[value]', '')
					.replaceAll('[checked]', checked)
					.replaceAll('[attrib]', 'data-id="' + itemId + '"')
					.replaceAll('[disabled]', disabled);
				html += chkItem;
				r++;
			}
			html += '</div>';
			if ((meta.split && 4 == meta.split))
			{
				html += '</div>';
			}
			return html;
		},

		BuildCheckGroup: function (tid, meta, dataId, options)
		{
			if ('Published' != App.Template.state)
			{
				return;
			}
			var elem = $('#' + meta.id);
			if (!elem)
			{
				return;
			}
			$('#' + meta.id).empty();
			var html = App.ElementLibrary.BuildCheckGroupHtml(meta, options);

			$('#' + tid + '_' + meta.id).html(html);
			for (var i = 0; i < options.length; i++)
			{
				App.Util.updateCheckboxStyle($('#' + meta.itemName + options[i].value + 'Check'));
			}
		},

		Field: {
			html: function (meta, value)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var eid = meta.id
					? meta.id
					: Math.floor((Math.random() * 100000) + 1);
				var labelSpan = undefined != meta.labelSpan
					? meta.labelSpan
					: App.Theme.Field.defaults.labelSpan;
				var labelStyle = undefined != meta.labelStyle
					? meta.labelStyle
					: App.Theme.Field.defaults.labelStyle;
				var inputSpan = undefined != meta.inputSpan
					? meta.inputSpan
					: App.Theme.Field.defaults.inputSpan;
				var inputWrapperStyle = undefined != meta.inputWrapperStyle
					? meta.inputWrapperStyle
					: App.Theme.Field.defaults.inputWrapperStyle;
				var inputStyle = undefined != meta.inputStyle
					? meta.inputStyle
					: App.Theme.Field.defaults.inputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: '';
				var attrib = undefined != meta.inputAttrib
					? ' ' + meta.inputAttrib
					: '';
				var disabled = '';
				if (undefined != meta.disabled)
				{
					if ('function' == typeof(meta.disabled))
					{
						if ('checkbox' == meta.type)
						{
							disabled = meta.disabled(meta.checked ? true : false)
								? ' disabled'
								: '';
						}
						else
						{
							disabled = meta.disabled(meta.value ? true : false)
								? ' disabled'
								: '';
						}
					}
					else
					{
						disabled = meta.disabled
							? ' disabled'
							: '';
					}
				}
				switch (meta.type)
				{
					case 'input':
						var themeElem = meta.noLabel
							? 'InputNoLabel'
							: 'Input';
						if (meta.themeElement)
						{
							themeElem = meta.themeElement;
						}
						var inputType = meta.inputType
							? meta.inputType
							: 'text';
						if ('password' == inputType)
						{
							inputStyle += ' strength';
						}
						var max = meta.maxlength
							? ' maxlength="' + meta.maxlength + '"'
							: '';
						if (meta.maxlength)
						{
							attrib = attrib + ' maxlength="' + meta.maxlength + '"';
						}
						if (meta.dataType && 'tags' == meta.dataType)
						{
							attrib += ' data-role="tagsinput"';
						}
						var html = App.Theme.Field[themeElem]
							.replaceAll('[type]', inputType)
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[prepend]', meta.prepend ? meta.prepend : '')
							.replaceAll('[append]', meta.append ? meta.append : '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'date':
						attrib = attrib + ' data-date-format="' + App.DataStruct.dateFormat + '"';
						inputStyle = inputStyle + ' datepicker';
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[append]', '<span class="glyphicon glyphicon-calendar"></span>')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'mobile':
						var prepend = undefined != meta.inputAppend
							? meta.inputAppend
							: App.DataStruct.mobileUnit;
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[append]', prepend)
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'amount':
						var prepend = undefined != meta.inputPrepend
							? meta.inputPrepend
							: App.DataStruct.currencyUnit;
						var html = App.Theme.Field.InputWithPrepend
							.replaceAll('[type]', 'number')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled)
							.replaceAll('[prepend]', prepend);
						return html;
						break;
					case 'percentage':
						var append = undefined != meta.inputAppend
							? meta.inputAppend
							: '%';
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'number')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled)
							.replaceAll('[append]', append);
						return html;
						break;
					case 'checkbox':
						var value = meta.value
							? meta.value
							: meta.id;
						var checked = meta.checked
							? 'checked'
							: '';
						var checkElement = meta.inline
							? 'Checkbox'
							: 'FormCheckbox';
						var html = App.Theme.Field[checkElement]
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[value]', value)
							.replaceAll('[checked]', checked)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'checkGroup':
						var options = App.DataStore.dataStore[meta.dataSource]
							? App.DataStore.dataStore[meta.dataSource]
							: {};
						var html = App.ElementLibrary.BuildCheckGroupHtml(meta, options);
						return html;
						break;
					case 'select':
						if (meta.dataSource)
						{
							if (meta.dataList)
							{
								App.DataStore.setData(meta.dataSource, meta.dataList);
							}
							else if (meta.dataQuery)
							{
								if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
								{

									App.DataStore.loadSelectListData(
										meta.dataSource,
										meta.dataQuery.isStatic,
										meta.dataQuery.workspace,
										meta.dataQuery.task,
										meta.dataQuery.jobId,
										meta.dataQuery.data,
										meta.dataQuery.options,
										meta.dataQuery.callback
									);
								}
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.value)
						{
							meta.value = !meta.multiple
								? ''
								: [];
						}
						if (meta.multiple)
						{
							attrib += ' multiple';
						}
						attrib += meta.title
							? ' data-placeholder="' + meta.title + '"'
							: ((meta.label && !meta.selectEmpty)
							? ' data-placeholder="' + meta.label + '"'
							: '');
						var options = '';
						if (meta.selectEmpty)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', '')
								.replaceAll('[label]', meta.selectEmpty)
								.replaceAll('[selected]', ''));
						}
						for (var i = 0; i < meta.options.length; i++)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', ''));
						}
						if (meta.label)
						{
							var themeElem = undefined != meta.options.query
								? 'Select2Div'
								: 'Select2';
							var html = App.Theme.Field[themeElem]
								.replaceAll('[eid]', eid)
								.replaceAll('[labelSpan]', labelSpan)
								.replaceAll('[labelStyle]', labelStyle)
								.replaceAll('[label]', meta.label)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						else
						{
							var themeElem = undefined != meta.options.query
								? 'Select2NoLabelDiv'
								: 'Select2NoLabel';
							var html = App.Theme.Field[themeElem]
								.replaceAll('[eid]', eid)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						return html;
						break;
					case 'selectX':
						if (meta.dataSource)
						{
							if (meta.dataList)
							{
								App.DataStore.setData(meta.dataSource, meta.dataList);
							}
							else if (meta.dataQuery)
							{
								if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
								{

									App.DataStore.loadSelectListData(
										meta.dataSource,
										meta.dataQuery.isStatic,
										meta.dataQuery.workspace,
										meta.dataQuery.task,
										meta.dataQuery.jobId,
										meta.dataQuery.data,
										meta.dataQuery.options,
										meta.dataQuery.callback
									);
								}
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.value)
						{
							meta.value = !meta.multiple
								? ''
								: [];
						}
						if (meta.multiple)
						{
							attrib += ' multiple';
						}
						attrib += meta.title
							? ' title="' + meta.title + '"'
							: ((meta.label && !meta.selectEmpty)
							? ' title="' + meta.label + '"'
							: '');
						var options = '';
						if (meta.selectEmpty)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', '')
								.replaceAll('[label]', meta.selectEmpty)
								.replaceAll('[selected]', ''));
						}
						for (var i = 0; i < meta.options.length; i++)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', ''));
						}
						if (meta.label)
						{
							var html = App.Theme.Field.Select
								.replaceAll('[eid]', eid)
								.replaceAll('[labelSpan]', labelSpan)
								.replaceAll('[labelStyle]', labelStyle)
								.replaceAll('[label]', meta.label)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						else
						{
							var html = App.Theme.Field.SelectNoLabel
								.replaceAll('[eid]', eid)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						return html;
						break;
					case 'textarea':
						var rows = meta.rows
							? meta.rows
							: 3;
						var html = App.Theme.Field.TextArea
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[rows]', rows)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'htmltext':
						var html = App.Theme.Field.HtmlTextArea
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'image':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + eid;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + eid;
						var html = App.Theme.Field.Image
							.replaceAll('[eid]', eid)
							.replaceAll('[did]', did)
							.replaceAll('[uid]', uid)
							.replaceAll('[type]', 'text')
							.replaceAll('[label]', meta.label)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'video':
						var videoStyle = meta.videoStyle
							? meta.videoStyle
							: '';
						var html = App.Theme.Field.Video
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[videoStyle]', videoStyle);
						return html;
						break;
					case 'audio':
						var audioStyle = meta.audioStyle
							? meta.audioStyle
							: '';
						var html = App.Theme.Field.Audio
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[audioStyle]', audioStyle);
						return html;
						break;
					case 'attachment':
						var imageStyle = undefined != meta.imageStyle
							? meta.imageStyle
							: '';
						var iconSpan = undefined != meta.iconSpan
							? meta.iconSpan
							: 'col-md-3';
						var labelSpan = undefined != meta.labelSpan
							? meta.labelSpan
							: 'col-md-7';
						var html = App.Theme.Field.Attachment
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[label]', meta.label)
							.replaceAll('[iconSpan]', meta.iconSpan)
							.replaceAll('[labelSpan]', meta.labelSpan)
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[imageStyle]', imageStyle);
						return html;
						break;
					case 'document':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + eid;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + eid;
						var html = App.Theme.Field.Document
							.replaceAll('[eid]', eid)
							.replaceAll('[did]', did)
							.replaceAll('[uid]', uid)
							.replaceAll('[type]', 'text')
							.replaceAll('[label]', meta.label)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'collector':
						var html = App.Theme.Field.Collector
							.replaceAll('[eid]', eid)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle);
						return html;
						break;
				}
				return '';
			},
			setValue: function (tid, meta, value)
			{
				if ('' == value)
				{
					return;
				}
				switch (meta.type)
				{
					case 'select':
						$('#' + meta.id).select2('val', value);
						//$('#' + meta.id).selectpicker('val', value);
						break;
					case 'checkbox':
						$('#' + meta.id).prop('checked', value);
						break;
					case 'checkGroup':
					case 'image':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + meta.id;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + meta.id;
						var docId = value.id
							? value.id
							: value;
						$('#' + meta.id).addClass('valid');
						$('#progress_' + meta.id + ' .progress-bar').css(
							'width',
							'0%'
						);
						$('#' + did).attr('data-download', '/image?id=' + docId);
						$('#' + did).prop('disabled', false);
						$('#' + did).show();
						$('#' + meta.id).val(value.filename ? value.filename : 'Uploaded File');
						$('#fileid_' + meta.id).val(docId);
						$('#img_' + meta.id).attr('src', '/thumbnail?id=' + docId);
						$('#img_' + meta.id).attr('data-large', '/image?id=' + docId);
						break;
					case 'video':
						$('#vid_' + meta.id).attr('src', 'http://www.youtube.com/embed/' + value);
						$('#vidcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
						$('#' + meta.id).val(value);
						if ($('#vid_' + meta.id).hasClass('error'))
						{
							$('#vid_' + meta.id).removeClass('error');
							$('#vid_' + meta.id).addClass('valid');
						}
						break;
					case 'audio':
						var parts = value.filename.split('.');
						$('#jquery_jplayer_' + meta.id).jPlayer({
							ready: $.proxy(function (meta, value)
							{
								var parts = value.filename.split('.');
								var mediaOptions = {};
								mediaOptions[parts[1]] = '/audio/' + value.filename;
								$('#jquery_jplayer_' + meta.id)
									.jPlayer("setMedia", mediaOptions)
									.jPlayer("stop");
							}, this, meta, value),
							ended: function (event)
							{
								$(this).jPlayer("play");
							},
							cssSelectorAncestor: '#jp_interface_' + meta.id,
							swfPath: "js",
							supplied: parts[1]
						});
						$('#audcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
						$('#' + meta.id).val(value.id);
						break;
					case 'attachment':
					case 'document':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + meta.id;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + meta.id;
						var docId = value.id
							? value.id
							: value;
						$('#' + meta.id).addClass('valid');
						$('#progress_' + meta.id + ' .progress-bar').css(
							'width',
							'0%'
						);
						$('#' + did).attr('data-download', '/document?id=' + docId);
						$('#' + did).prop('disabled', false);
						$('#' + did).show();
						$('#' + meta.id).val(value.filename ? value.filename : 'Uploaded File');
						$('#fileid_' + meta.id).val(docId);
						break;
					case 'mobile':
						if (value && '0' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						if (value && '+' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						$('#' + meta.id).val(value);
						break;
					case 'collector':
						break;
					case 'htmltext':
						$('#' + meta.id + ' .note-editable').html(value);
						break;
					default:
						if (meta.rules && meta.rules.number && !meta.rules.digits)
						{
							value = '' + value;
							value = "." == value.substring(0, 1) ? '0' + value : value;
						}

						$('#' + meta.id).val(value);
						break;
				}
			},
			harvest: function (tid, meta)
			{
				if (null == meta)
				{
					return null;
				}
				switch (meta.type)
				{
					case 'collector':
						return null;
						break;
					case 'select':
						return $('#' + meta.id).select2('val');
						//return $('#' + meta.id).val();
						break;
					case 'checkGroup':
						var items = [];
						$.each($.find('.' + meta.itemName), function (i, input)
						{
							if ($(input).prop('checked'))
							{
								items.push({
									'id': $(input).attr('data-id')
								});
							}
						});
						return items;
						break;
					case 'amount':
						var val = $('#' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					case 'percentage':
						var val = $('#' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					case 'checkbox':
						return $('#' + meta.id).prop('checked');
						break;
					case 'mobile':
						value = $('#' + meta.id).val();
						if (value && '0' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						if (value && '+' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						return '+' + value;
						break;
					case 'htmltext':
						return $('#' + meta.id + ' .note-editable').html();
						break;
					case 'date':
						var value = $('#' + meta.id).val();
						return '' != value
							? value
							: null;
						break;
					case 'image':
					case 'document':
					case 'attachment':
						var val = $('#fileid_' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					default:
						if (meta.rules && meta.rules.number && !meta.rules.digits)
						{
							var val = $('#' + meta.id).val();
							return !isNaN(val)
								? parseFloat(val)
								: null;
						}
						if (meta.rules && meta.rules.digits)
						{
							var val = $('#' + meta.id).val();
							return !isNaN(val)
								? parseInt(val)
								: null;
						}
						return $('#' + meta.id).val();
						break;
				}
			},
			bind: function (tid, meta)
			{
				if (meta.mask)
				{
					$('#' + meta.id).mask(meta.mask);
					$('#' + meta.id).focus(function ()
					{
						$('#' + meta.id).setCursorPosition(0);
					});
				}
				if ('input' == meta.type && meta.inputType && 'password' == meta.inputType)
				{
					if (undefined == meta.strength || false != meta.strength)
					{
						var defaults = {
							showMeter: true,
							toggleMask: true
						};
						var options = meta.strength
							? $.extend(true, {}, defaults, meta.strength)
							: defaults;
						$('#' + meta.id).strength(options);
					}
				}
				if ('input' == meta.type && meta.dataType && 'tags' == meta.dataType)
				{
					var defaults = {
						allowDuplicates: false
					};
					var options = meta.tagOptions
						? $.extend(true, {}, defaults, meta.tagOptions)
						: defaults;
					$('#' + meta.id).tagsinput(options);
				}
				if ('select' == meta.type)
				{
					var defaults = {
						allowClear: true,
						closeOnSelect: false,
						width: "parent",
						placeholder: meta.title
							? meta.title
							: ((meta.label && !meta.selectEmpty)
							? meta.label
							: 'Select')
					};
					var options = meta.options
						? $.extend(true, {}, defaults, meta.options)
						: defaults;
					try
					{
						$('#' + meta.id).select2(options);
					}
					catch (e)
					{
					}
				}
				if ('htmltext' == meta.type)
				{
					var options = $.extend(true, {}, {
						toolbar: [
							['style', ['style']],
							['style', ['bold', 'italic', 'underline', 'clear']],
							['font', ['strike']],
							['fontsize', ['fontsize']],
							['color', ['color']],
							['para', ['ul', 'ol', 'paragraph']],
							['height', ['height']],
							['insert', ['link']],
							['table', ['table']]
							//['help', ['help']]
						]
					}, meta.options ? meta.options : {});
					$('#' + meta.id).summernote(options);
				}
				if ('document' == meta.type || 'attachment' == meta.type)
				{

					var did = undefined != meta.downloadButtonId
						? meta.downloadButtonId
						: 'btnDownload' + meta.id;
					var uid = undefined != meta.uploadButtonId
						? meta.downloadButtonId
						: 'btnUpload' + meta.id;
					$('#' + uid).click(function ()
					{
						$('#btn_' + meta.id).click();
					});
					$('#' + did).click(function ()
					{
						if (undefined != $(this).attr('data-download'))
						{
							var parts = $(this).attr('data-download').split('?');
							var parms = parts[1] && '' != parts[1]
								? parts[1].split('&')
								: {};
							var data = {};
							for (var i in parms)
							{
								var param = parms[i].split('=');
								data[param[0]] = param[1];
							}
							App.Ajax.DOWNLOAD({
								url: parts[0],
								data: data
							});
						}
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						dropZone: $('#' + meta.id),
						add: function (e, data)
						{
							_w.jqXHR[meta.id] = data.submit();
						},
						send: $.proxy(function (meta, e, data)
						{
							if (!meta.fileTypes)
							{
								return true;
							}
							for (var i in data.files)
							{
								var allGood = false;
								var file = data.files[i].name;
								for (var x in meta.fileTypes)
								{
									if (meta.fileTypes[x] == file.substr(file.lastIndexOf('.') + 1))
									{
										allGood = true;
										$('#' + meta.id).val(file);
									}
								}
								if (!allGood)
								{
									return false;
								}
							}
							return true;
						}, this, meta),
						start: $.proxy(function (meta)
						{
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#' + meta.id).removeClass('error');
							$('#progress_' + meta.id).show();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
						}, this, meta),
						progress: $.proxy(function (meta, e, data)
						{
							var progress = parseInt(data.loaded / data.total * 100, 10);
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								progress + '%'
							);
						}, this, meta),
						fail: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#container_' + meta.id)
								.find("label[for=" + meta.id + "].error")
								.remove();
							$('#' + meta.id).addClass('error');

							$('#progress_' + meta.id).hide();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
							$('#fileid_' + meta.id).val('');
							$('#' + meta.id).val('');
							$('#' + did).prop('disabled', true);
							$('#' + did).hide();
							alert('Could not upload document.');
						},
						done: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#progress_' + meta.id).hide();
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											if (file.error)
											{
												$('#' + meta.id).removeClass('valid');
												$('#' + meta.id).removeClass('required');
												$('#container_' + meta.id)
													.find("label[for=" + meta.id + "].error")
													.remove();
												$('#' + meta.id).addClass('error');

												$('#progress_' + meta.id + ' .progress-bar').css(
													'width',
													'0%'
												);
												$('#fileid_' + meta.id).val('');
												$('#' + meta.id).val('');
												$('#' + did).prop('disabled', true);
												$('#' + did).hide();
												return;
											}
											$('#' + meta.id).removeClass('error');
											$('#' + meta.id).removeClass('required');
											$('#container_' + meta.id)
												.find("label[for=" + meta.id + "].error")
												.remove();
											$('#' + meta.id).addClass('valid');
											$('#progress_' + meta.id + ' .progress-bar').css(
												'width',
												'0%'
											);
											$('#fileid_' + meta.id).val(file.id);
											$('#' + meta.id).val(file.name);
											$('#' + did).attr('data-download', '/document?id=' + file.id);
											$('#' + did).prop('disabled', false);
											$('#' + did).show();

											if (meta.afterSuccess)
											{
												meta.afterSuccess(file.id, file.name);
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								if (file.error)
								{
									$('#' + meta.id).removeClass('valid');
									$('#' + meta.id).removeClass('required');
									$('#container_' + meta.id)
										.find("label[for=" + meta.id + "].error")
										.remove();
									$('#' + meta.id).addClass('error');

									$('#progress_' + meta.id + ' .progress-bar').css(
										'width',
										'0%'
									);
									$('#fileid_' + meta.id).val('');
									$('#' + meta.id).val('');
									$('#' + did).prop('disabled', true);
									$('#' + did).hide();
									return;
								}
								$('#' + meta.id).removeClass('error');
								$('#' + meta.id).removeClass('required');
								$('#container_' + meta.id)
									.find("label[for=" + meta.id + "].error")
									.remove();
								$('#' + meta.id).addClass('valid');
								$('#progress_' + meta.id + ' .progress-bar').css(
									'width',
									'0%'
								);
								$('#fileid_' + meta.id).val(file.id);
								$('#' + meta.id).val(file.name);
								$('#' + did).attr('data-download', '/document?id=' + file.id);
								$('#' + did).prop('disabled', false);
								$('#' + did).show();

								if (meta.afterSuccess)
								{
									meta.afterSuccess(file.id, file.name);
								}
							});
						}
					});
				}
				if ('video' == meta.type)
				{
					$('#' + meta.id).change($.proxy(function (meta)
					{
						$('#vid_' + meta.id).attr('src', 'http://www.youtube.com/embed/' + $('#' + meta.id).val());
						$('#vidcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
					}, this, meta));
				}
				if ('image' == meta.type)
				{
					var did = undefined != meta.downloadButtonId
						? meta.downloadButtonId
						: 'btnDownload' + meta.id;
					var uid = undefined != meta.uploadButtonId
						? meta.downloadButtonId
						: 'btnUpload' + meta.id;
					$('#' + uid).click(function ()
					{
						$('#btn_' + meta.id).click();
					});
					$('#' + did).click(function ()
					{
						if (undefined != $(this).attr('data-download'))
						{
							var parts = $(this).attr('data-download').split('?');
							var parms = parts[1] && '' != parts[1]
								? parts[1].split('&')
								: {};
							var data = {};
							for (var i in parms)
							{
								var param = parms[i].split('=');
								data[param[0]] = param[1];
							}
							App.Ajax.DOWNLOAD({
								url: parts[0],
								data: data
							});
						}
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						dropZone: $('#' + meta.id),
						formData: meta.imageRules ? meta.imageRules : {},
						add: function (e, data)
						{
							_w.jqXHR[meta.id] = data.submit();
						},
						send: $.proxy(function (meta, e, data)
						{
							if (!meta.fileTypes)
							{
								return true;
							}
							for (var i in data.files)
							{
								var allGood = false;
								var file = data.files[i].name;
								for (var x in meta.fileTypes)
								{
									if (meta.fileTypes[x] == file.substr(file.lastIndexOf('.') + 1))
									{
										allGood = true;
										$('#' + meta.id).val(file);
									}
								}
								if (!allGood)
								{
									return false;
								}
							}
							return true;
						}, this, meta),
						start: $.proxy(function (meta)
						{
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#' + meta.id).removeClass('error');
							$('#progress_' + meta.id).show();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
						}, this, meta),
						progress: $.proxy(function (meta, e, data)
						{
							var progress = parseInt(data.loaded / data.total * 100, 10);
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								progress + '%'
							);
						}, this, meta),
						fail: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#container_' + meta.id)
								.find("label[for=" + meta.id + "].error")
								.remove();
							$('#' + meta.id).addClass('error');

							$('#progress_' + meta.id).hide();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
							$('#fileid_' + meta.id).val('');
							$('#' + meta.id).val('');
							$('#' + did).prop('disabled', true);
							$('#' + did).hide();
							alert('Could not upload document.');
						},
						done: $.proxy(function (meta, e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#progress_' + meta.id).hide();
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											$('label.error[for="' + meta.id + '"]').remove();
											if (file.error)
											{
												$('#' + meta.id).removeClass('valid');
												$('#' + meta.id).removeClass('required');
												$('#container_' + meta.id)
													.find("label[for=" + meta.id + "].error")
													.remove();

												$('#' + meta.id).addClass('error');
												$('#' + meta.id).parent().parent().append('<label for="' + meta.id + '" class="error">' + file.error + '</label>');

												$('#progress_' + meta.id + ' .progress-bar').css(
													'width',
													'0%'
												);
												$('#fileid_' + meta.id).val('');
												$('#' + meta.id).val('');
												$('#' + did).prop('disabled', true);
												$('#' + did).hide();
												return;
											}
											$('#' + meta.id).removeClass('error');
											$('#' + meta.id).removeClass('required');
											$('#container_' + meta.id)
												.find("label[for=" + meta.id + "].error")
												.remove();
											$('#' + meta.id).addClass('valid');
											$('#progress_' + meta.id + ' .progress-bar').css(
												'width',
												'0%'
											);
											$('#fileid_' + meta.id).val(file.id);
											$('#img_' + meta.id).attr('src', '/thumbnail?id=' + file.id);
											$('#' + meta.id).val(file.name);
											$('#' + did).attr('data-download', '/image?id=' + file.id);
											$('#' + did).prop('disabled', false);
											$('#' + did).show();
											if (meta.afterSuccess)
											{
												meta.afterSuccess(file.id, file.name);
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								$('label.error[for="' + meta.id + '"]').remove();
								if (file.error)
								{
									$('#' + meta.id).removeClass('valid');
									$('#' + meta.id).removeClass('required');
									$('#container_' + meta.id)
										.find("label[for=" + meta.id + "].error")
										.remove();

									$('#' + meta.id).addClass('error');
									$('#' + meta.id).parent().parent().append('<label for="' + meta.id + '" class="error">' + file.error + '</label>');

									$('#progress_' + meta.id + ' .progress-bar').css(
										'width',
										'0%'
									);
									$('#fileid_' + meta.id).val('');
									$('#' + meta.id).val('');
									$('#' + did).prop('disabled', true);
									$('#' + did).hide();
									return;
								}
								$('#' + meta.id).removeClass('error');
								$('#' + meta.id).removeClass('required');
								$('#container_' + meta.id)
									.find("label[for=" + meta.id + "].error")
									.remove();
								$('#' + meta.id).addClass('valid');
								$('#progress_' + meta.id + ' .progress-bar').css(
									'width',
									'0%'
								);
								$('#fileid_' + meta.id).val(file.id);
								$('#img_' + meta.id).attr('src', '/thumbnail?id=' + file.id);
								$('#' + meta.id).val(file.name);
								$('#' + did).attr('data-download', '/image?id=' + file.id);
								$('#' + did).prop('disabled', false);
								$('#' + did).show();
								if (meta.afterSuccess)
								{
									meta.afterSuccess(file.id, file.name);
								}
							});
						}, this, meta)
					});
				}
				if ('audio' == meta.type)
				{
					$('#img_' + meta.id).click(function ()
					{

						$('#btn_' + meta.id).click();
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						fail: function (e, data)
						{
							alert('Could not upload audio file.');
						},
						done: function (e, data)
						{
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											if (file.error)
											{
												alert(file.error);
												return;
											}
											var haveVal = ('' == $('#' + meta.id).val())
												? false
												: true;
											$('#' + meta.id).val(file.id);
											if (haveVal)
											{
												var parts = file.name.split('.');
												var mediaOptions = {};
												mediaOptions[parts[1]] = 'http://art.local/audio/' + file.name;
												$('#jquery_jplayer_' + meta.id)
													.jPlayer("setMedia", mediaOptions)
													.jPlayer("stop");
											}
											else
											{
												var parts = file.name.split('.');
												$('#jquery_jplayer_' + meta.id).jPlayer({
													ready: $.proxy(function (meta, file)
													{
														var parts = file.name.split('.');
														var mediaOptions = {};
														mediaOptions[parts[1]] = 'http://art.local/audio/' + value.name;
														$('#jquery_jplayer_' + meta.id)
															.jPlayer("setMedia", mediaOptions)
															.jPlayer("stop");
													}, this, meta, file),
													ended: function (event)
													{
														$(this).jPlayer("play");
													},
													cssSelectorAncestor: '#jp_interface_' + meta.id,
													swfPath: "js",
													supplied: parts[1]
												});
												$('#audcon_' + meta.id).show();
												$('#img_' + meta.id).hide();
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								if (file.error)
								{
									alert(file.error);
									return;
								}
								var haveVal = ('' == $('#' + meta.id).val())
									? false
									: true;
								$('#' + meta.id).val(file.id);
								if (haveVal)
								{
									var parts = file.name.split('.');
									var mediaOptions = {};
									mediaOptions[parts[1]] = 'http://art.local/audio/' + file.name;
									$('#jquery_jplayer_' + meta.id)
										.jPlayer("setMedia", mediaOptions)
										.jPlayer("stop");
								}
								else
								{
									var parts = file.name.split('.');
									$('#jquery_jplayer_' + meta.id).jPlayer({
										ready: $.proxy(function (meta, file)
										{
											var parts = file.name.split('.');
											var mediaOptions = {};
											mediaOptions[parts[1]] = 'http://art.local/audio/' + value.name;
											$('#jquery_jplayer_' + meta.id)
												.jPlayer("setMedia", mediaOptions)
												.jPlayer("stop");
										}, this, meta, file),
										ended: function (event)
										{
											$(this).jPlayer("play");
										},
										cssSelectorAncestor: '#jp_interface_' + meta.id,
										swfPath: "js",
										supplied: parts[1]
									});
									$('#audcon_' + meta.id).show();
									$('#img_' + meta.id).hide();
								}
							});
						}
					});
				}
				if (meta.dataSource)
				{
					switch (meta.type)
					{
						case 'select':
							App.DataStore.listen(
								meta.id, meta.dataSource,
								$.proxy(App.ElementLibrary.BuildSelectOptions, this, tid, meta),
								'Recurring'
							);
							break;
						case 'checkGroup':
							App.DataStore.listen(
								meta.id, meta.dataSource,
								$.proxy(App.ElementLibrary.BuildCheckGroup, this, tid, meta),
								'Recurring'
							);
							break;
					}
				}
				if ('date' == meta.type)
				{
					var opt = meta.dtopt ? meta.dtopt : {};
					opt.autoclose = true;
					$('#' + meta.id)
						.datepicker(opt)
						.on('changeDate', $.proxy(function (meta, ev)
						{
							try
							{
								if ($('#' + meta.id).valid())
								{
									$('#' + meta.id).removeClass('invalid').addClass('success');
								}
							}
							catch (err)
							{
								// failure expected if not inside validation form.
							}
						}, this, meta));
				}
				if ('select' == meta.type)
				{
					$('#' + meta.id).change(function ()
					{
						if (!App.DataStore.getItem('BuildSelect:' + meta.id, false))
						{
							try
							{
								$(this).valid();
							}
							catch (err)
							{
								// no worries
							}
						}
					});
				}
				if (meta.rules && (meta.rules.number || meta.rules.digits))
				{
					var signed = meta.signed;
					App.Util.enforceNumericInput(meta.id, signed);
				}
				if (meta.rules && meta.rules.maxlength)
				{
					$('#' + meta.id).attr('maxlength', meta.rules.maxlength);
				}
				if (meta.onChange)
				{
					$('#' + meta.id).unbind('change');
					if ('select' == meta.type)
					{
						$('#' + meta.id).change(function (e)
						{
							if (!App.DataStore.getItem('BuildSelect:' + meta.id, false))
							{
								try
								{
									$(this).valid();
								}
								catch (err)
								{
									// no worries
								}
							}
						});
					}
					$('#' + meta.id).change(meta.onChange);
				}
				if (meta.onFocus)
				{
					$('#' + meta.id).on('focus', meta.onFocus);
				}
				if (meta.onBlur)
				{
					$('#' + meta.id).on('blur', meta.onBlur);
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}
				if ('checkbox' == meta.type || 'amountCheck' == meta.type)
				{
					App.Util.updateCheckboxStyle($('#' + meta.id));
				}
			}
		}


	};
})();

;;
(function ()
{
	_App.Template = function ()
	{
		this.initialize();
	};

	_App.Template.prototype =
	{

		state: null,
		tempStore: {},
		templateStore: {},
		instanceCounter: 0,

		initialize: function ()
		{
			// Nothing to do.
		},

		emptyTemplate: {
			jobId: null,
			itemId: null,
			newItem: null,
			itemId: null,
			itemData: null,
			haveData: false,
			grids: {},
			groups: {},
			forms: {},
			rules: {},
			messages: {},
			meta: {},
			elements: {},
			defaultForm: 'NoFormSpecified'
		},

		/**
		 * Retrieve a template from the server.
		 * @param type
		 * @param name
		 * @param lifespan
		 */
		retrieve: function (type, name, lifespan, callback)
		{
			if (!this.templateStore[name])
			{
				this.templateStore[name] = {};
				this.tempStore[name] = {};
				this.tempStore[name]["callback"] = callback;
				var rnd = new Date().getTime();
				App.Ajax.GET({
						id: name,
						url: 'templates/' + type + '/' + name + '.html?t=' + rnd
					},
					$.proxy(this._retrievedHtml, this),
					$.proxy(this._retrievalError, this));
				App.Ajax.SCRIPT({
						id: name,
						url: 'templates/' + type + '/' + name + '.js?t=' + rnd
					},
					$.proxy(this._retrievedJs, this),
					$.proxy(this._jsRetrievalError, this));
			}
			else
			{
				callback(name);
			}
		},

		_retrievalError: function (name)
		{
			this.templateStore[name]["redirect"] = '/notice/error?error=noSuchPage';
			window.location.hash = this.templateStore[name]["redirect"];
		},

		_jsRetrievalError: function (name, textStatus, errorThrown)
		{
			if ('error' == textStatus)
			{
				return;
			}
			_w.notify('Error retrieving template.', textStatus);
			//console.log(errorThrown);
		},

		_retrievedJs: function (name, data)
		{
			this.tempStore[name]['class'] = "template_" + name;
			if (this.tempStore[name]['html'])
			{
				this._retrievedHtmlAndJs(name);
			}
		},

		_retrievedHtml: function (name, data)
		{
			this.tempStore[name]['html'] = data;
			if (this.tempStore[name]['class'])
			{
				this._retrievedHtmlAndJs(name);
			}
		},

		_retrievedHtmlAndJs: function (name)
		{
			// Instantiate
			if (!window[this.tempStore[name]['class']])
			{
				//console.log('The requested template is named incorrectly and cannot be instantiated.');
				return;
			}
			this.templateStore[name] = new window[this.tempStore[name]['class']](
				this.tempStore[name]['html']
			);
			// Setup some basic fields that we can bargain on having around.
			if (undefined == this.templateStore[name].defaultForm)
			{
				this.templateStore[name].defaultForm = 'General';
			}
			this.templateStore[name].nsMap = {};
			if (!this.templateStore[name].rules)
			{
				this.templateStore[name].rules = {};
			}
			if (!this.templateStore[name].messages)
			{
				this.templateStore[name].messages = {};
			}
			// Process meta to a more refined and ready to use state.
			this.templateStore[name].gridFieldMap = {};
			this.templateStore[name].gridFieldPermissions = {};
			if (!this.templateStore[name]['meta'].General)
			{
				this.templateStore[name]['meta'].General = {};
			}
			if (this.templateStore[name].defaultForm)
			{
				for (var formName in this.templateStore[name].forms)
				{
					var form = this.templateStore[name].forms[formName];
					if (!this.templateStore[name]['meta'][form.namespace])
					{
						this.templateStore[name]['meta'][form.namespace] = {};
					}
					if (form.fields)
					{
						if (form.dataspace)
						{
							for (var elem in form.fields)
							{
								if (!form.fields[elem].namespace)
								{
									form.fields[elem].namespace = form.dataspace;
								}
								if (!form.fields[elem].field)
								{
									form.fields[elem].field = elem;
								}
							}
						}
						this.templateStore[name]['meta'][form.namespace] = $.extend(
							true, {},
							this.templateStore[name]['meta'][form.namespace],
							form.fields
						);
					}
					for (var action in form.actions)
					{
						if (form.actions[action].button)
						{
							form.actions[action].button.actionForm = formName;
							form.actions[action].button.actionContext = action;
							this.templateStore[name]['meta'].General[
								form.actions[action].button.id
								] = form.actions[action].button;
						}
					}
				}
			}
			if (this.templateStore[name].defaultGrid)
			{
				for (var gridName in this.templateStore[name].grids)
				{
					var grid = this.templateStore[name].grids[gridName];
					if (!this.templateStore[name]['meta'][grid.namespace])
					{
						this.templateStore[name]['meta'][grid.namespace] = {};
					}
					if (grid.titleId && grid.titleText)
					{
						this.templateStore[name]['meta'].General[grid.titleId] = {
							handler: 'Text',
							id: grid.titleId,
							value: grid.titleText,
							grid: gridName
						};
					}
					if (grid.titleButtons)
					{
						this.templateStore[name]['meta'].General[grid.titleButtons.id] = $.extend(
							true, {},
							App.DataElement.GridTitleButtons,
							grid.titleButtons
						);
					}
					if (grid.contextFilter)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.contextFilter.id] = $.extend(
							true, {},
							App.DataElement.GridContextFilter,
							{}
						);
					}
					if (grid.dataFields)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.dataFields.id] = $.extend(
							true, {},
							App.DataElement.GridColumns,
							grid.dataFields.targets
								? grid.dataFields.targets
								: {}
						);
						if (grid.dataFields.repeaterId)
						{
							this.templateStore[name]['meta'][grid.namespace][grid.dataFields.repeaterId] = $.extend(
								true, {},
								App.DataElement.GridRowRepeater,
								{}
							);
						}
					}
					if (grid.pagerId)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pagerId] = $.extend(
							true, {},
							App.DataElement.GridPager,
							{}
						);
					}
					if (grid.pageSizerId)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pageSizerId] = $.extend(
							true, {},
							App.DataElement.GridPageSize,
							{
								allowLarge: grid.sizerAllowLarge
							}
						);
					}
					if (grid.pageRecords)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pageRecords] = $.extend(
							true, {},
							App.DataElement.GridRecords,
							{}
						);
					}
				}
			}

			if (this.templateStore[name].defaultGroup)
			{
				for (var groupName in this.templateStore[name].groups)
				{
					var group = this.templateStore[name].groups[groupName];
					if (!this.templateStore[name]['meta'][group.namespace])
					{
						this.templateStore[name]['meta'][group.namespace] = {};
					}
					if (group.titleId && group.titleText)
					{
						this.templateStore[name]['meta'].General[group.titleId] = {
							handler: 'Text',
							id: group.titleId,
							value: group.titleText,
							group: groupName
						};
					}
					if (group.titleButtons)
					{
						group.titleButtons.id = $.extend(
							true, {},
							App.DataElement.GroupTitleButtons,
							group.titleButtons
						);
					}
					if (group.contextFilter)
					{
						this.templateStore[name]['meta'][group.namespace][group.contextFilter.id] = $.extend(
							true, {},
							App.DataElement.groupContextFilter,
							{}
						);
					}
					if (group.dataFields)
					{
						this.templateStore[name]['meta'][group.namespace][group.dataFields.id] = $.extend(
							true, {},
							App.DataElement.GroupColumns,
							group.dataFields.targets
								? group.dataFields.targets
								: {}
						);
						if (group.dataFields.repeaterId)
						{
							this.templateStore[name]['meta'][group.namespace][group.dataFields.repeaterId] = $.extend(
								true, {},
								App.DataElement.GroupRowRepeater,
								{}
							);
						}
					}
					/*
					 if (group.pagerId)
					 {
					 this.templateStore[name]['meta'][group.namespace][group.pagerId] = $.extend(
					 true, {},
					 App.DataElement.groupPager,
					 {}
					 );
					 }*/
				}
			}


			for (var ns in this.templateStore[name].meta)
			{
				for (var item in this.templateStore[name].meta[ns])
				{
					// Namespace map
					this.templateStore[name].nsMap[item] = ns;

					// Form elements
					if (this.templateStore[name].defaultForm)
					{
						if (undefined == this.templateStore[name].meta[ns][item].form)
						{
							this.templateStore[name]['meta'][ns][item].form = 'General' != ns
								? this.templateStore[name].defaultForm
								: 'General';
						}
						var form = this.templateStore[name]['meta'][ns][item].form;
						if (this.templateStore[name].forms[form]
						    && this.templateStore[name].forms[form].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name].forms[form].defaults,
								this.templateStore[name]['meta'][ns][item]
							);
						}
						if (!this.templateStore[name].rules[form])
						{
							this.templateStore[name].rules[form] = {};
						}
						this.templateStore[name].rules[form][item]
						= this.templateStore[name]['meta'][ns][item].rules;
						if (!this.templateStore[name].messages[form])
						{
							this.templateStore[name].messages[form] = {};
						}
						this.templateStore[name].messages[form][item]
						= this.templateStore[name]['meta'][ns][item].messages
							? this.templateStore[name]['meta'][ns][item].messages
							: {};
					}

					// Grid elements
					if (this.templateStore[name].defaultGrid)
					{
						if (undefined == this.templateStore[name]['meta'][ns][item].grid)
						{
							this.templateStore[name]['meta'][ns][item].grid = 'General' != ns
								? this.templateStore[name].defaultGrid
								: 'General';
						}
						var grid = this.templateStore[name]['meta'][ns][item].grid;
						if (this.templateStore[name].grids[grid]
						    && this.templateStore[name].grids[grid].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name]['meta'][ns][item],
								this.templateStore[name].grids[grid].defaults
							);
						}
						if ('GridContextFilter' == this.templateStore[name]['meta'][ns][item].constructor
						    || 'GridConstructorComponentCollection'
						       == this.templateStore[name]['meta'][ns][item].handler)
						{
							if ('GridContextFilter' == this.templateStore[name]['meta'][ns][item].constructor)
							{
								this.templateStore[name]['meta'][ns][item] = $.extend(
									true, {},
									this.templateStore[name]['meta'][ns][item],
									this.templateStore[name].grids[grid].contextFilter
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindClear = $.proxy(
									_w.clearSearch, this.templateStore[name], grid
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindSearch = $.proxy(
									_w.searchGrid, this.templateStore[name], grid
								);
								var items = this.templateStore[name]['meta'][ns][item].items;
								for (var i in items)
								{
									if (!items[i].id)
									{
										continue;
									}
									if (!this.templateStore[name].gridFieldMap[grid])
									{
										this.templateStore[name].gridFieldMap[grid] = {};
									}
									this.templateStore[name].gridFieldMap[grid][items[i].id] = items[i].field;
								}
							}
							if ('GridConstructorComponentCollection' == this.templateStore[name]['meta'][ns][item].handler)
							{
								var fields = this.templateStore[name].grids[grid].dataFields.items;
								var items = this.templateStore[name]['meta'][ns][item].items;

								var elemNs = this.templateStore[name].grids[grid].elementNs;
								this.templateStore[name]['meta'][ns][item].defaults
								= this.templateStore[name].grids[grid].dataFields.defaults;
								if (!this.templateStore[name].gridFieldMap[grid])
								{
									this.templateStore[name].gridFieldMap[grid] = {};
								}
								if (!this.templateStore[name].gridFieldPermissions[grid])
								{
									this.templateStore[name].gridFieldPermissions[grid] = {};
								}
								for (var fld in fields)
								{
									this.templateStore[name].gridFieldPermissions[grid][fld] = true;
									if ('id' == fld)
									{
										continue;
									}
									if (fields[fld].permissions && !_w.checkPermissions(fields[fld].permissions))
									{
										this.templateStore[name].gridFieldPermissions[grid][fld] = false;
										continue;
									}
									items[fld] = {};
									items[fld].id = fld;
									items[fld].label = fields[fld].label;
									if (undefined != fields[fld].permission)
									{
										items[fld].permission = fields[fld].permission;
									}
									if (fields[fld].dataSource)
									{
										items[fld].dataSource = fields[fld].dataSource;
									}
									if (fields[fld].dataList)
									{
										items[fld].dataList = fields[fld].dataList;
									}
									if (fields[fld].dataQuery)
									{
										items[fld].dataQuery = fields[fld].dataQuery;
									}
									if (fields[fld].selectEmpty)
									{
										items[fld].selectEmpty = fields[fld].selectEmpty;
									}
									if (fields[fld].field)
									{
										items[fld].filterId = elemNs + 'Filter_' + items[fld].id;
										items[fld].field = fields[fld].field;
										items[fld].orderAsc = {
											id: elemNs + 'Order_' + items[fld].id + 'Asc',
											bind: $.proxy(_w.orderGrid, this.templateStore[name], grid, items[fld].field, 'ASC')
										};
										items[fld].orderDesc = {
											id: elemNs + 'Order_' + items[fld].id + 'Desc',
											bind: $.proxy(_w.orderGrid, this.templateStore[name], grid, items[fld].field, 'DESC')
										};
										this.templateStore[name].gridFieldMap[grid][items[fld].filterId] = items[fld].field;
									}
								}
							}
						}
						if ('GridPager' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pagerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.pageGrid, this.templateStore[name], grid);
						}
						if ('GridPageSize' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pageSizerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.sizeGrid, this.templateStore[name], grid);
						}
						if ('GridRecords' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pageRecords;
						}
					}

					// Group elements

					if (this.templateStore[name].defaultGroup)
					{
						if (undefined == this.templateStore[name]['meta'][ns][item].group)
						{
							this.templateStore[name]['meta'][ns][item].group = 'General' != ns
								? this.templateStore[name].defaultGroup
								: 'General';
						}
						var group = this.templateStore[name]['meta'][ns][item].group;
						if (this.templateStore[name].groups[group]
						    && this.templateStore[name].groups[group].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name]['meta'][ns][item],
								this.templateStore[name].groups[group].defaults
							);


						}


						if ('GroupContextFilter' == this.templateStore[name]['meta'][ns][item].constructor
						    || 'GroupConstructorComponentCollection'
						       == this.templateStore[name]['meta'][ns][item].handler)
						{
							if ('GroupContextFilter' == this.templateStore[name]['meta'][ns][item].constructor)
							{
								this.templateStore[name]['meta'][ns][item] = $.extend(
									true, {},
									this.templateStore[name]['meta'][ns][item],
									this.templateStore[name].groups[group].contextFilter
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindClear = $.proxy(
									_w.clearSearch, this.templateStore[name], group
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindSearch = $.proxy(
									_w.searchGroup, this.templateStore[name], group
								);
								var items = this.templateStore[name]['meta'][ns][item].items;


								for (var i in items)
								{
									if (!items[i].id)
									{
										continue;
									}
									if (!this.templateStore[name].groupFieldMap[group])
									{
										this.templateStore[name].groupFieldMap[group] = {};
									}
									this.templateStore[name].groupFieldMap[group][items[i].id] = items[i].field;
								}
							}
							if ('groupConstructorComponentCollection' == this.templateStore[name]['meta'][ns][item].handler)
							{
								var fields = this.templateStore[name].groups[group].dataFields.items;
								var items = this.templateStore[name]['meta'][ns][item].items;
								var elemNs = this.templateStore[name].groups[group].elementNs;
								this.templateStore[name]['meta'][ns][item].defaults
								= this.templateStore[name].groups[group].dataFields.defaults;
								if (!this.templateStore[name].groupFieldMap[group])
								{
									this.templateStore[name].groupFieldMap[group] = {};
								}
								if (!this.templateStore[name].groupFieldPermissions[group])
								{
									this.templateStore[name].groupFieldPermissions[group] = {};
								}
								for (var fld in fields)
								{
									this.templateStore[name].groupFieldPermissions[group][fld] = true;
									if ('id' == fld)
									{
										continue;
									}
									if (fields[fld].permissions && !_w.checkPermissions(fields[fld].permissions))
									{
										this.templateStore[name].groupFieldPermissions[group][fld] = false;
										continue;
									}
									items[fld] = {};
									items[fld].id = fld;
									items[fld].label = fields[fld].label;
									if (undefined != fields[fld].permission)
									{
										items[fld].permission = fields[fld].permission;
									}
									if (fields[fld].dataSource)
									{
										items[fld].dataSource = fields[fld].dataSource;
									}
									if (fields[fld].dataList)
									{
										items[fld].dataList = fields[fld].dataList;
									}
									if (fields[fld].dataQuery)
									{
										items[fld].dataQuery = fields[fld].dataQuery;
									}
									if (fields[fld].selectEmpty)
									{
										items[fld].selectEmpty = fields[fld].selectEmpty;
									}
									if (fields[fld].field)
									{
										items[fld].filterId = elemNs + 'Filter_' + items[fld].id;
										items[fld].field = fields[fld].field;
										items[fld].orderAsc = {
											id: elemNs + 'Order_' + items[fld].id + 'Asc',
											bind: $.proxy(_w.orderGroup, this.templateStore[name], group, items[fld].field, 'ASC')
										};
										items[fld].orderDesc = {
											id: elemNs + 'Order_' + items[fld].id + 'Desc',
											bind: $.proxy(_w.orderGroup, this.templateStore[name], group, items[fld].field, 'DESC')
										};
										// add the order by here (see distinct)
										this.templateStore[name].groupFieldMap[group][items[fld].filterId] = items[fld].field;
									}
								}
							}
						}
						if ('GroupPager' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].groups[group].pagerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.pageGroup, this.templateStore[name], group);
						}
					}

					// Construct the element
					if (undefined == App.TemplateElement[this.templateStore[name]['meta'][ns][item].handler])
					{
						//console.log('Could not construct element ' + ns + ':' + item);
						//console.log('Handler ' + this.templateStore[name]['meta'][ns][item].handler);
						//console.log(App.TemplateElement);
						continue;
					}
					this.templateStore[name].elements[item] = new App.TemplateElement[
						this.templateStore[name]['meta'][ns][item].handler
						](item);
					this.templateStore[name]['meta'][ns][item].id = item;
				}
			}
			// Let somebody know that the template is ready for use.
			this.tempStore[name]["callback"](name);
			delete this.tempStore[name];
		},

		/**
		 * Register a new template instance.
		 * Template must already have been retrieved from server.
		 * @param id
		 * @param name
		 * @param target
		 * @param data
		 * @returns
		 */
		register: function (id, type, name, target, data, callback)
		{
			if (_r[id + ':' + name])
			{
				return;
			}
			_r[id + ':' + name] = true;
			_t[id] = new this._templateInstance(
				this.instanceCounter,
				null,
				target, data
			);
			App.Event.trigger(
				'Template.Ready:' + name,
				{"id": name, "pageName": name}
			);
			if (!this.templateStore[name] || !this.templateStore[name].ti)
			{
				this.retrieve(type, name, true, $.proxy(this._hydrateTemplate, this, callback, id));
			}
			else
			{
				if (this.templateStore[name]["redirect"])
				{
					window.location.hash = this.templateStore[name]["redirect"];
					return;
				}
				_t[id].setTemplate(this.templateStore[name]);
				callback(id, name);
				delete _r[id + ':' + name];
			}
			this.instanceCounter++;
			return _t[id];
		},

		_hydrateTemplate: function (callback, id, name)
		{
			_t[id].setTemplate(this.templateStore[name]);
			_t[id].template.templateName = id;
			callback(id, name);
			delete _r[id + ':' + name];
		},

		_templateInstance: function (tid, template, target, data)
		{
			this.tid = tid;
			this.template = template;
			this.target = target;
			this.data = null;
			this.ready = false;
			this.published = false;
			this.autoPublish = [];
			if (this.template && this.template.static)
			{
				_w.checkPermissions(this.template.permissions);
				$.proxy(_w.setupContracts, this.template)();
				this.construct = this.template.static.replaceAll('[tid]', this.tid);
				this.template.ti = this;
				if (undefined != this.template.init)
				{
					this.template.init();
				}
				this.hydrate(this.data);
			}

			/**
			 * Do something when we publish.
			 */
			this.onPublish = function (callback)
			{
				if (!this.published)
				{
					this.autoPublish.push(callback);
				}
				else
				{
					callback();
				}
			};

			/**
			 * Set the template to work with for this instance.
			 * @param template
			 */
			this.setTemplate = function (template)
			{
				this.template = template;
				this.construct = this.template.static
					? this.template.static.replaceAll('[tid]', this.tid)
					: '';
				this.template.ti = (this);
				if (undefined != this.template.permissions
				    && 0 < this.template.permissions.length)
				{
					if (!App.Authenticated)
					{
						window.location.hash = '/notice/error?error=pagePermissionDenied';
						return;
					}
					for (var i in this.template.permissions)
					{
						var perm = this.template.permissions[i];
						if (!App.permissions[perm])
						{
							window.location.hash = '/notice/error?error=pagePermissionDenied';
							return;
						}
					}
				}
				$.proxy(_w.setupContracts, this.template)();
				if (undefined != this.template.init)
				{
					this.template.init();
				}
				this.hydrate(this.data);
			};

			/**
			 * Hydrate template with dataset.
			 * This can be called before and after template publication.
			 * @param data
			 */
			this.hydrate = function (data)
			{
				data = $.extend(true, {}, this.template.meta, data);
				this.data = data;
				if (this.template)
				{
					for (var ns in data)
					{
						for (var element in data[ns])
						{
							var elem = this.template.elements[element];
							if (undefined == elem)
							{
								continue;
							}
							value = (data[ns][element])
								? data[ns][element]
								: null;
							if (this.published)
							{
								elem.hydrateLive(this.tid, value);
							}
							else
							{
								this.construct = elem.hydrate(this.construct, value);
							}
						}
					}
				}
			};
			if (this.template && this.data)
			{
				this.hydrate(this.data);
			}

			this.hydratePartial = function (data)
			{
				if (!this.data)
				{
					this.data = {};
				}
				data = $.extend(true, {}, this.template.meta, data);
				if (this.template && this.template.elements)
				{
					for (var ns in data)
					{
						for (var element in data[ns])
						{
							if (this.template.elements[element])
							{
								var elem = this.template.elements[element];
								if (undefined == elem)
								{
									continue;
								}
								value = (data[ns][element])
									? data[ns][element]
									: null;
								this.data[element] = value;
								if (this.published)
								{
									elem.hydrateLive(this.tid, value);
								}
								else
								{
									this.construct = elem.hydrate(this.construct, value);
								}
							}
						}
					}
				}
			};

			/**
			 * Hydrate template with a single parameter.
			 * This can be called before and after template publication.
			 * @param param
			 * @param value
			 */
			this.hydrateParam = function (param, value)
			{
				if (!this.data)
				{
					this.data = {};
				}
				var ns = this.template.nsMap[param];
				this.data[ns][param] = $.extend(true, {}, this.template.meta[ns][param], value);
				if (this.template && this.template.elements[param])
				{
					var elem = this.template.elements[param];
					if (this.published)
					{
						elem.hydrateLive(this.tid, this.data[ns][param]);
					}
					else
					{
						this.construct = elem.hydrate(this.construct, this.data[ns][param]);
					}
				}
			};

			/**
			 * Publish template to registered target.
			 */
			this.publish = function (target)
			{
				App.Template.state = 'Publish';
				target = target
					? target
					: this.target;
				this.target = target;
				$('#' + target).html(
					'<div id="' + this.tid + '">' + this.construct + '</div>'
				);

				this.published = true;
				//$('.selectpicker').selectpicker();
				App.Template.state = 'Published';

				for (var element in this.template.elements)
				{
					this.template.elements[element].publish(this.tid);
				}


				if (this.template.construct)
				{
					this.template.construct();
					if (this.template.altAlertBox)
					{
						_w.altAlertBox = this.template.altAlertBox;
					}
				}
				this.template.buttonRollback = [];
				for (var form in this.template.forms)
				{
					for (var i in this.template.forms[form].buttons)
					{
						if (!$('#' + this.template.forms[form].buttons[i]).prop('disabled'))
						{
							this.template.buttonRollback.push(
								this.template.forms[form].buttons[i]
							);
							$('#' + this.template.forms[form].buttons[i]).prop('disabled', true);
						}
					}
				}
				if (this.template.defaultGrid)
				{
					$.proxy(_w.publishGrids, this.template)();
				}
				if (this.template.haveData)
				{
					$.proxy(_w.setupValidators, this.template)();
				}
				for (var i in this.autoPublish)
				{
					this.autoPublish[i]();
				}
				this.autoPublish = [];
			};

			/**
			 * Harvest dataset from published template.
			 * @returns {___anonymous3461_3462}
			 */
			this.harvest = function (form)
			{
				App.Template.state = 'Harvest';
				var newData = {};
				for (var ns in this.template.meta)
				{
					for (var element in this.template.meta[ns])
					{
						if ((!form || form == this.template.meta[ns][element].form)
						    && !this.template.meta[ns][element].noHarvest)
						{
							if (!newData[ns])
							{
								newData[ns] = {};
							}
							var field = this.template.meta[ns][element].field
								? this.template.meta[ns][element].field
								: this.template.meta[ns][element].id;
							newData[ns][field] = this.template.elements[element].harvest(this.tid);
						}
					}
				}
				App.Template.state = 'Published';
				return newData;
			};

			/**
			 * Unpublish template.
			 * Template can be re-published afterward.
			 */
			this.remove = function ()
			{
				App.Template.state = 'Destruct';
				if (this.template)
				{
					try
					{
						this.template.destruct();
						if (this.template.altAlertBox)
						{
							_w.altAlertBox = false;
						}
					}
					catch (e)
					{
					}
				}
				$('#' + this.tid).remove();
				this.published = false;
			};
		}

	};

})();

;;
(function ()
{
	_App.TemplateElement = function ()
	{
		this.initialize();
	};
	_App.TemplateElement.prototype =
	{

		initialize: function ()
		{
			// Nothing to do.
		},

		/**
		 * Create a new Text element for a template.
		 * Example: var name = new App.TemplateElement.Text('name');
		 * @param id
		 */
		Text: function (id)
		{
			this.id = id;

			this.hydrate = function (template, meta)
			{
				value = meta && meta.value
					? meta.value
					: '&nbsp;';
				return template.replace('[' + this.id + ']', value);
			};

			this.hydrateLive = function (tid, value)
			{
				$('#' + tid + '_' + this.id).html(value);
			};

			this.publish = function (tid)
			{
				// element bindings and such
			};

			this.harvest = function (tid)
			{
				return $('#' + tid + '_' + this.id).html();
			};
		},

		InlineNotification: function (id)
		{
			this.id = id;

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.InlineNotification.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.InlineNotification.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.InlineNotification.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.InlineNotification.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return $('#' + tid + '_' + this.id).html();
			};
		},

		LabeledText: function (id)
		{
			this.id = id;

			this.hydrate = function (template, meta)
			{
				var value = (null == meta || null == meta.value)
					? '&nbsp;'
					: meta.value;
				var title = (null == meta || null == meta.title)
					? '&nbsp;'
					: meta.title;
				var labelStyle = (null == meta || null == meta.labelStyle)
					? ''
					: meta.labelStyle;
				var style = (null == meta || null == meta.textStyle)
					? ''
					: meta.textStyle;
				var html = '<label class="control-label ' + labelStyle + '">' + title + ':</label>';
				html += '<div class="controls">';
				html += '<p class="' + style + '" id="' + this.id + '">' + value + '</p>';
				html += '</div>';
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, meta)
			{
				var value = (undefined == meta || null == meta.value)
					? '&nbsp;'
					: meta.value;
				var title = (undefined == meta || null == meta.title)
					? '&nbsp;'
					: meta.title;
				var labelStyle = (null == meta || null == meta.labelStyle)
					? ''
					: meta.labelStyle;
				var style = (null == meta || null == meta.style)
					? ''
					: meta.style;
				var html = '<label class="control-label ' + labelStyle + '">' + title + ':</label>';
				html += '<div class="controls">';
				html += '<p class="' + style + '" id="' + this.id + '">' + value + '</p>';
				html += '</div>';
				$('#' + tid + '_' + this.id).html(html);
			};

			this.publish = function (tid)
			{
				// element bindings and such
			};

			this.harvest = function (tid)
			{
				return $('#' + this.id).html();
			};
		},

		ComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = (null == value)
					? '[...]'
					: value;
				var html = '';
				for (var item in this.meta)
				{
					html += this.meta[item]['html'];
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = (null == value)
					? '[...]'
					: value;
				var html = '';
				for (var item in this.meta)
				{
					if (this.meta[item]['html'])
					{
						html += this.meta[item]['html'];
					}
				}
				$('#' + tid + '_' + this.id).html(html);
				for (var item in this.meta)
				{
					if (this.meta[item]['js'])
					{
						this.meta[item]['js']();
					}
				}
			};

			this.publish = function (tid)
			{
				for (var item in this.meta)
				{
					if (this.meta[item]['js'])
					{
						this.meta[item]['js']();
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		ConstructorComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;

			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var html = '';
				for (var item in this.meta.items)
				{
					html += App.ElementLibrary[this.meta.constructor].html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;
				var html = '';
				if (this.meta.items)
				{
					for (var i in this.meta.items)
					{
						if (this.meta.defaults)
						{
							this.meta.items[i] = $.extend(true, {}, this.meta.defaults, this.meta.items[i]);
						}
						html += App.ElementLibrary[this.meta.constructor].html(this.meta.items[i]);
					}
				}
				$('#' + tid + '_' + this.id).html(html);
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					for (var item in this.meta.items)
					{
						App.ElementLibrary[this.meta.constructor].bind(this.meta.items[item]);
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					for (var item in this.meta.items)
					{
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},
		ConstructorGridRowCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;
			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var html = '';
				var isGroupingRow = false;
				var groupValue = false;
				for (var item in this.meta.items)
				{

					if (this.meta.items[item].grouping)
					{
						var grouping = this.meta.items[item].grouping;
						isGroupingRow = groupValue != this.meta.items[item].items[grouping.field];
						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							html += App.ElementLibrary[this.meta.constructor].html(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
					}
					html += App.ElementLibrary[this.meta.constructor].html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item],
						isGroupingRow, groupValue
					);
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;

				var html = '';
				var isGroupingRow = false;
				var groupValue = false;
				if (this.meta.items)
				{
					for (var i in this.meta.items)
					{
						if (this.meta.defaults)
						{
							this.meta.items[i] = $.extend(true, {}, this.meta.defaults, this.meta.items[i]);
						}
						if (this.meta.items[i].grouping)
						{
							var grouping = this.meta.items[i].grouping;
							isGroupingRow = groupValue != this.meta.items[i].items[grouping.field];
							if (isGroupingRow)
							{

								groupValue = this.meta.items[i].items[grouping.field];

								html += App.ElementLibrary[this.meta.constructor].html(
									undefined != this.meta.defaults
										? $.extend(true, {}, this.meta.defaults, this.meta.items[i])
										: this.meta.items[i],
									isGroupingRow, groupValue
								);
								isGroupingRow = false;
							}
						}
						html += App.ElementLibrary[this.meta.constructor].html(this.meta.items[i], isGroupingRow, groupValue);
					}
				}
				$('#' + tid + '_' + this.id).html(html);

				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					var isGroupingRow = false;
					var groupValue = false;

					for (var item in this.meta.items)
					{
						if (this.meta.items[item].grouping == undefined)
						{
							var grouping = false;
						}
						isGroupingRow = undefined == grouping
							? false
							: groupValue != this.meta.items[item].items[grouping.field];

						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							App.ElementLibrary[this.meta.constructor].bind(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item],
							isGroupingRow, groupValue
						);
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					var isGroupingRow = false;
					var groupValue = false;


					for (var item in this.meta.items)
					{

						if (this.meta.items[item].grouping == undefined)
						{
							var grouping = false;
						}
						isGroupingRow = undefined == grouping
							? false
							: groupValue != this.meta.items[item].items[grouping.field];
						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							App.ElementLibrary[this.meta.constructor].bind(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item],
							isGroupingRow, groupValue
						);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridConstructorComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;

			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var singleSearch = '';
				var headers = '';
				var filters = '';
				if (this.meta.singleSearchBarId)
				{
					singleSearch += App.ElementLibrary.GridSingleSearch.html(
						this.meta.items,
						this.meta.singleSearchFilterId
					);
				}
				for (var item in this.meta.items)
				{
					headers += App.ElementLibrary.GridColumnHeader.html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
					if (this.meta.filterId)
					{
						filters += App.ElementLibrary.GridColumnFilter.html(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
				var html = template;
				if (this.meta.singleSearchBarId)
				{
					html = html.replace('[' + this.meta.singleSearchBarId + ']', singleSearch);
				}
				html = html.replace('[' + this.meta.headerId + ']', headers);
				if (this.meta.filterId)
				{
					html = html.replace('[' + this.meta.filterId + ']', filters);
				}
				return html;
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;
				var singleSearch = '';
				var headers = '';
				var filters = '';
				if (this.meta.singleSearchBarId)
				{
					singleSearch += App.ElementLibrary.GridSingleSearch.html(
						this.meta.items,
						this.meta.singleSearchFilterId
					);
				}
				for (var item in this.meta.items)
				{
					headers += App.ElementLibrary.GridColumnHeader.html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
					if (this.meta.filterId)
					{
						filters += App.ElementLibrary.GridColumnFilter.html(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
				if (this.meta.singleSearchBarId)
				{
					$('#' + tid + '_' + this.meta.singleSearchBarId).html(singleSearch);
				}

				$('#' + tid + '_' + this.headerId).html(headers);
				if (this.meta.filterId)
				{
					$('#' + tid + '_' + this.filterId).html(filters);
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					if (this.meta.singleSearchBarId)
					{
						App.ElementLibrary.GridSingleSearch.bind(this.meta.singleSearchFilterId);
					}
					for (var item in this.meta.items)
					{
						App.ElementLibrary.GridColumnHeader.bind(this.meta.items[item]);
						if (this.meta.filterId)
						{
							App.ElementLibrary.GridColumnFilter.bind(this.meta.items[item]);
						}
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (this.meta.singleSearchBarId)
				{
					App.ElementLibrary.GridSingleSearch.bind(this.meta.singleSearchFilterId);
				}
				for (var item in this.meta.items)
				{
					App.ElementLibrary.GridColumnHeader.bind(this.meta.items[item]);
					if (this.meta.filterId)
					{
						App.ElementLibrary.GridColumnFilter.bind(this.meta.items[item]);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		Button: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Button.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Button.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Button.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Button.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridPager: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPager.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPager.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.GridPager.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.GridPager.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridPageSize: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPageSize.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPageSize.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.GridPageSize.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.GridPageSize.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridRecords: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridRecords.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridRecords.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);

			};

			this.publish = function (tid)
			{
				return;
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		FieldComponent: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return App.ElementLibrary.Field.harvest(tid, this.meta);
			};
		},

		GroupComponent: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return App.ElementLibrary.Field.harvest(tid, this.meta);
			};
		}


	};
})();

;;
(function ()
{

	_App.API = function ()
	{
		this.initialize();
	};

	_App.API.prototype =
	{

		/**
		 * Internal storage for established contracts and execution responses.
		 */
		contractWait: {},
		taskContracts: {},
		taskExecutions: {},
		routeContracts: {},
		routeExecutions: {},
		requestId: 0,
		requests: [],
		requestCallback: [],
		autoBatch: false,
		conBatching: false,
		conBatch: [],
		currConBatch: 0,
		execBatching: false,
		execBatch: [],
		currExecBatch: 0,

		initialize: function ()
		{
			// Nothing to do here.
		},


		/* ------------------------------------- TASK HANDLING ------------------------------------- */
		/**
		 * Establish a Task Contract with server.
		 * @param id
		 * @param workspace
		 * @param task
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		getTask: function (id, workspace, task, jobId, data, callback, errorCallback)
		{
			if (this.autoBatch)
			{
				if (!this.conBatching)
				{
					// Start a new batch.
					this.conBatching = true;
					this.currConBatch++;
					this.conBatch[this.currConBatch] = [];
					setTimeout($.proxy(function ()
					{
						// Batch end, do a stacked conute.
						var batchnum = this.currConBatch + 0;
						this.conBatching = false;
						this.getTasks(
							this.conBatch[batchnum],
							function () {}
						);
					}, this), 500);
				}
				;

				// Stack the call.
				this.conBatch[this.currConBatch].push({
					id: id,
					workspace: workspace,
					task: task,
					jobId: jobId,
					data: data,
					callback: callback,
					errorCallback: errorCallback
				});
			}
			else
			{
				this.taskContracts[id] = {
					"Callback": callback,
					"ErrorCallback": errorCallback
				};
				jobId = (jobId)
					? jobId
					: null;
				data = (data)
					? data
					: {};
				App.Ajax.JSON({
						"id": id,
						"url": 'workspace/contract-task',
						"data": [{"Workspace": workspace, "Task": task, "JobId": jobId, "Packet": data}]
					},
					$.proxy(this._getTaskSuccess, this),
					$.proxy(this._getTaskError, this)
				);
			}
		},

		/**
		 * Execute callback when contract is available.
		 */
		onContract: function (id, callback)
		{
			if (this.taskContracts[id] && !this.taskContracts[id]['Burn'])
			{
				callback();
			}
			else
			{
				if (undefined == this.contractWait[id])
				{
					this.contractWait[id] = [];
				}
				this.contractWait[id].push(callback);
			}
		},

		/**
		 * Retrieve a Task Contract established with server.
		 * @param id
		 * @returns object|null
		 */
		taskContract: function (id)
		{
			return this.taskContracts[id] && !this.taskContracts[id]['Burn']
				? this.taskContracts[id]
				: null;
		},

		_getTaskSuccess: function (id, response)
		{
			response = response[0];
			if (!this.taskContracts[id])
			{
				return;
			}
			this.taskContracts[id]["Response"] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				this.taskContracts[id]["Hash"] = response.Hash;
				this.taskContracts[id]["LifeTime"] = response.LifeTime;
				if (this.taskContracts[id]['Callback'])
				{
					this.taskContracts[id]['Callback'](response);
				}
				if (undefined != this.contractWait[id])
				{
					for (var i in this.contractWait[id])
					{
						this.contractWait[id][i]();
					}
					delete this.contractWait[id];
				}
			}
		},

		_getTaskError: function (id, error)
		{
			this.taskContracts[id]["Response"] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Establish multiple Task Contracts with server.
		 * @param contracts
		 */
		getTasks: function (contracts, callback)
		{
			var id = this.requestId;
			var requests = [];
			this.requestId++;
			this.requests.push({});
			this.requestCallback.push({
				callback: callback
			});
			for (var i in contracts)
			{
				this.requests[id][i] = contracts[i].id;
				this.taskContracts[contracts[i].id] = {
					"Callback": contracts[i].callback,
					"ErrorCallback": contracts[i].errorCallback
				};
				jobId = (contracts[i].jobId)
					? contracts[i].jobId
					: null;
				data = (contracts[i].data)
					? contracts[i].data
					: {};
				requests.push({
					"Workspace": contracts[i].workspace,
					"Task": contracts[i].task,
					"JobId": jobId,
					"Packet": data
				});
			}
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/contract-task',
					"data": requests
				},
				$.proxy(this._getTasksSuccess, this),
				$.proxy(this._getTaskError, this)
			);
		},

		_getTasksSuccess: function (gid, responses)
		{
			for (var i in responses)
			{
				response = responses[i];
				var id = this.requests[gid][i];
				if (!this.taskContracts[id])
				{
					return;
				}
				this.taskContracts[id]["Response"] = response;
				if (undefined != response.Status && 'Success' != response.Status)
				{
					if (this.taskContracts[id]['ErrorCallback'])
					{
						this.taskContracts[id]['ErrorCallback'](response);
					}
				}
				else
				{
					this.taskContracts[id]["Hash"] = response.Hash;
					this.taskContracts[id]["LifeTime"] = response.LifeTime;
					if (this.taskContracts[id]['Callback'])
					{
						this.taskContracts[id]['Callback'](response);
					}
				}
			}
			if (undefined != this.requestCallback[gid])
			{
				this.requestCallback[gid].callback();
			}
			delete this.requests[gid];
			delete this.requestCallback[gid];
		},

		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTask: function (id, service, task, data, callback, errorCallback, method, direct)
		{
			this.taskContracts[id] = {};
			this.taskContracts[id]["Callback"] = callback;
			this.taskContracts[id]["ErrorCallback"] = errorCallback;
			data = (data)
				? data
				: {};
			if (!method)
			{
				method = 'JSON';
			}
			var packet = {
				"id": id,
				"url": 'api/v1/execute',
				"data": {"Service": service, "Task": task, "Data": data}
			};
			if (direct)
			{
				packet.direct = true;
			}
			App.Ajax[method](
				packet,
				$.proxy(this._execTaskSuccess, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTaskSuccess: function (id, response)
		{
			this.taskExecutions[id] = response;
			if (!this.taskContracts[id])
			{
				//console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
				//console.log(id);
				//console.log(this.taskContracts);
			}
			if (response.Status && 'Success' != response.Status)
			{
				if (this.taskContracts[id] && this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				var callback = this.taskContracts[id]['Callback']
					? this.taskContracts[id]['Callback']
					: false;
				delete this.taskContracts[id];
				if (callback)
				{
					callback(response);
				}
			}
		},

		_execTaskError: function (id, error)
		{
			this.taskExecutions[id] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},


		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTasks: function (contracts, callback)
			//id, data, options, callback, errorCallback, method, direct )
		{
			var gid = this.requestId;
			var requests = [];
			this.requests.push({});
			this.requestCallback.push({
				callback: callback
			});
			this.requestId++;
			for (var i in contracts)
			{
				this.requests[gid][i] = contracts[i].id;
				this.taskContracts[contracts[i].id]["Callback"] = contracts[i].callback;
				this.taskContracts[contracts[i].id]["ErrorCallback"] = contracts[i].errorCallback;
				requests.push({
					"Contract": this.taskContracts[contracts[i].id]["Hash"],
					"Packet": contracts[i].data,
					"Options": contracts[i].options
				});
			}
			App.Ajax.JSON(
				{
					"id": gid,
					"url": 'workspace/execute-task',
					"data": requests
				},
				$.proxy(this._execTasksSuccess, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTasksSuccess: function (gid, responses)
		{
			for (var i in responses)
			{
				response = responses[i];
				var id = this.requests[gid][i];
				this.taskExecutions[id] = response;
				if (!this.taskContracts[id])
				{
					console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
					console.log(id);
					console.log(this.taskContracts);
				}
				if (response.Status && 'Success' != response.Status)
				{
					if (this.taskContracts[id] && this.taskContracts[id]['ErrorCallback'])
					{
						this.taskContracts[id]['ErrorCallback'](response);
					}
				}
				else
				{
					var callback = this.taskContracts[id]['Callback']
						? this.taskContracts[id]['Callback']
						: false;
					if (this.taskContracts[id] && this.taskContracts[id]['LifeTime'] != 'Recurring')
					{
						delete this.taskContracts[id];
					}
					if (callback)
					{
						callback(response);
					}
				}
			}
			if (undefined != this.requestCallback[gid])
			{
				this.requestCallback[gid].callback(responses);
			}
			delete this.requests[gid];
			delete this.requestCallback[gid];
		},

		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTaskMulti: function (id, data, options, callback, errorCallback, method, direct)
		{
			if (!this.taskContracts[id])
			{
				//console.log('! No contract for: ' + id);
				return false;
			}
			this.taskContracts[id]["Callback"] = callback;
			this.taskContracts[id]["ErrorCallback"] = errorCallback;
			if (!data)
			{
				return false;
			}
			options = (options)
				? options
				: [];
			if (!method)
			{
				method = 'JSON';
			}
			var packed = [];
			for (var i = 0; i < data.length; i++)
			{
				packed.push({
					"Contract": this.taskContracts[id]["Hash"],
					"Packet": data[i],
					"Options": options[i] ? options[i] : {}
				});
			}
			var packet = {
				"id": id,
				"url": 'workspace/execute-task',
				"data": packed
			};
			if (direct)
			{
				packet.direct = true;
			}
			App.Ajax[method](
				packet,
				$.proxy(this._execTaskSuccessMulti, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTaskSuccessMulti: function (id, responses)
		{
			var success = true;
			this.taskExecutions[id] = [];
			for (var i = 0; i < responses.length; i++)
			{
				response = responses[i];
				this.taskExecutions[id].push(response);
				if (!this.taskContracts[id])
				{
					//console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
					//console.log(id);
					//console.log(this.taskContracts);
				}
				if (response.Status && 'Success' != response.Status)
				{
					success = false;
				}
			}
			if (!success)
			{
				if (this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.taskContracts[id]['Callback'])
				{
					this.taskContracts[id]['Callback'](this.taskExecutions[id]);
				}
				if (this.taskContracts[id]['LifeTime'] != 'Recurring')
				{
					delete this.taskContracts[id];
				}
			}
		},

		_execTaskError: function (id, error)
		{
			this.taskExecutions[id] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},


		/* ------------------------------------- ROUTE HANDLING ------------------------------------- */
		/**
		 * Directly route an item to a new sate.
		 * @param id
		 * @param workspace
		 * @param route
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		directRoute: function (id, workspace, route, jobId, data, callback, errorCallback)
		{
			this.routeContracts[id] = {
				"Callback": callback,
				"ErrorCallback": errorCallback
			};
			jobId = (jobId)
				? jobId
				: null;
			data = (data)
				? data
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/direct-route',
					"data": [{"Workspace": workspace, "Route": route, "JobId": jobId, "Packet": data}]
				},
				$.proxy(this._directRouteSuccess, this),
				$.proxy(this._directRouteError, this)
			);
		},

		_directRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeExecutions[id] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
				delete this.routeContracts[id];
			}
		},

		_directRouteError: function (id, error)
		{
			this.routeExecutions[id] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Establish a Route Contract with server.
		 * @param id
		 * @param workspace
		 * @param route
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		getRoute: function (id, workspace, route, jobId, data, callback, errorCallback)
		{
			this.routeContracts[id] = {
				"Callback": callback,
				"ErrorCallback": errorCallback
			};
			jobId = (jobId)
				? jobId
				: null;
			data = (data)
				? data
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/contract-route',
					"data": [{"Workspace": workspace, "Route": route, "JobId": jobId, "Packet": data}]
				},
				$.proxy(this._getRouteSuccess, this),
				$.proxy(this._getRouteError, this)
			);
		},

		/**
		 * Retrieve a Route Contract established with server.
		 * @param id
		 * @returns object|null
		 */
		routeContract: function (id)
		{
			return this.routeContracts[id]
				? this.routeContracts[id]
				: null;
		},

		_getRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeContracts[id]["Response"] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				this.routeContracts[id]["Hash"] = response.Hash;
				this.routeContracts[id]["LifeTime"] = response.LifeTime;
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
			}
		},

		_getRouteError: function (id, error)
		{
			this.routeContracts[id]["Response"] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Execute a Route Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execRoute: function (id, data, options, callback, errorCallback)
		{
			if (!this.routeContracts[id])
			{
				return false;
			}
			this.routeContracts[id]["Callback"] = callback;
			this.routeContracts[id]["ErrorCallback"] = errorCallback;
			data = (data)
				? data
				: {};
			options = (options)
				? options
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/execute-route',
					"data": [{"Contract": this.routeContracts[id]["Hash"], "Packet": data, "Options": options}]
				},
				$.proxy(this._execRouteSuccess, this),
				$.proxy(this._execRouteError, this)
			);
		},

		_execRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeExecutions[id] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
				if (this.routeContracts[id]['LifeTime'] != 'Recurring')
				{
					delete this.routeContracts[id];
				}
			}
		},

		_execRouteError: function (id, error)
		{
			this.routeExecutions[id] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		}
	};

})();

;;
(function ()
{

	_App.Container = function (args)
	{
		//this.initialize( args );
	};

	_App.Container.prototype =
	{

		containers: {},

		register: function (containerId, contentTarget, setTitle, show, hide, params)
		{
			this.containers[containerId] = params
				? params
				: {};
			this.containers[containerId].contentTarget = contentTarget;
			this.containers[containerId].setTitle = setTitle;
			this.containers[containerId].show = show;
			this.containers[containerId].hide = hide;
		},

		remove: function (containerId)
		{
			if (this.containers[containerId])
			{
				delete this.containers[containerId];
			}
		},

		get: function (containerId)
		{
			if (this.containers[containerId])
			{
				return this.containers[containerId];
			}
		}

	};

})();
;;
(function ()
{

	$(document).ready(function ()
	{
		window._c = {}; // Constructor workspace
		window._t = {}; // Template workspace
		window._r = {}; // Registry
		window.App = new _App();

		var hashLoc = window.location.hash.split("#");
		hashLoc = hashLoc[1]
			? hashLoc[1]
			: '/';
		if ('/' != hashLoc && null != hashLoc
		    && '/login' != hashLoc
		    && '/forgot-password' != hashLoc
		    && '/change-password' != hashLoc)
		{
			App.redirect = hashLoc;
		}
		App.API.execTask(
			'getActiveAccount', 'Profile', 'GetAuthenticatedUser', {}, _w.onActiveAccount, _w.onActiveAccountFailure
		);
		_w.onLoad();
	});

})();