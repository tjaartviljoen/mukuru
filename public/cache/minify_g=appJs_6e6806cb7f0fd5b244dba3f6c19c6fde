/*! jQuery v1.11.1 | (c) 2005, 2014 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l="1.11.1",m=function(a,b){return new m.fn.init(a,b)},n=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,o=/^-ms-/,p=/-([\da-z])/gi,q=function(a,b){return b.toUpperCase()};m.fn=m.prototype={jquery:l,constructor:m,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=m.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return m.each(this,a,b)},map:function(a){return this.pushStack(m.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},m.extend=m.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},m.extend({expando:"jQuery"+(l+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===m.type(a)},isArray:Array.isArray||function(a){return"array"===m.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){return!m.isArray(a)&&a-parseFloat(a)>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==m.type(a)||a.nodeType||m.isWindow(a))return!1;try{if(a.constructor&&!j.call(a,"constructor")&&!j.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(k.ownLast)for(b in a)return j.call(a,b);for(b in a);return void 0===b||j.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(b){b&&m.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(o,"ms-").replace(p,q)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=r(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(n,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(r(Object(a))?m.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(g)return g.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=r(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(f=a[b],b=a,a=f),m.isFunction(a)?(c=d.call(arguments,2),e=function(){return a.apply(b||this,c.concat(d.call(arguments)))},e.guid=a.guid=a.guid||m.guid++,e):void 0},now:function(){return+new Date},support:k}),m.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function r(a){var b=a.length,c=m.type(a);return"function"===c||m.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var s=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+-new Date,v=a.document,w=0,x=0,y=gb(),z=gb(),A=gb(),B=function(a,b){return a===b&&(l=!0),0},C="undefined",D=1<<31,E={}.hasOwnProperty,F=[],G=F.pop,H=F.push,I=F.push,J=F.slice,K=F.indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(this[b]===a)return b;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",N="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",O=N.replace("w","w#"),P="\\["+M+"*("+N+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+M+"*\\]",Q=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+P+")*)|.*)\\)|)",R=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),S=new RegExp("^"+M+"*,"+M+"*"),T=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),U=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),V=new RegExp(Q),W=new RegExp("^"+O+"$"),X={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N.replace("w","w*")+")"),ATTR:new RegExp("^"+P),PSEUDO:new RegExp("^"+Q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ab=/[+~]/,bb=/'|\\/g,cb=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),db=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)};try{I.apply(F=J.call(v.childNodes),v.childNodes),F[v.childNodes.length].nodeType}catch(eb){I={apply:F.length?function(a,b){H.apply(a,J.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fb(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],!a||"string"!=typeof a)return d;if(1!==(k=b.nodeType)&&9!==k)return[];if(p&&!e){if(f=_.exec(a))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return I.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName&&b.getElementsByClassName)return I.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=9===k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(bb,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+qb(o[l]);w=ab.test(a)&&ob(b.parentNode)||b,x=o.join(",")}if(x)try{return I.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function gb(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function hb(a){return a[u]=!0,a}function ib(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function jb(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function kb(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||D)-(~a.sourceIndex||D);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function lb(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function mb(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function nb(a){return hb(function(b){return b=+b,hb(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function ob(a){return a&&typeof a.getElementsByTagName!==C&&a}c=fb.support={},f=fb.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fb.setDocument=function(a){var b,e=a?a.ownerDocument||a:v,g=e.defaultView;return e!==n&&9===e.nodeType&&e.documentElement?(n=e,o=e.documentElement,p=!f(e),g&&g!==g.top&&(g.addEventListener?g.addEventListener("unload",function(){m()},!1):g.attachEvent&&g.attachEvent("onunload",function(){m()})),c.attributes=ib(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ib(function(a){return a.appendChild(e.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(e.getElementsByClassName)&&ib(function(a){return a.innerHTML="<div class='a'></div><div class='a i'></div>",a.firstChild.className="i",2===a.getElementsByClassName("i").length}),c.getById=ib(function(a){return o.appendChild(a).id=u,!e.getElementsByName||!e.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if(typeof b.getElementById!==C&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(cb,db);return function(a){var c=typeof a.getAttributeNode!==C&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return typeof b.getElementsByTagName!==C?b.getElementsByTagName(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return typeof b.getElementsByClassName!==C&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(e.querySelectorAll))&&(ib(function(a){a.innerHTML="<select msallowclip=''><option selected=''></option></select>",a.querySelectorAll("[msallowclip^='']").length&&q.push("[*^$]="+M+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+M+"*(?:value|"+L+")"),a.querySelectorAll(":checked").length||q.push(":checked")}),ib(function(a){var b=e.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+M+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ib(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",Q)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===e||a.ownerDocument===v&&t(v,a)?-1:b===e||b.ownerDocument===v&&t(v,b)?1:k?K.call(k,a)-K.call(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,f=a.parentNode,g=b.parentNode,h=[a],i=[b];if(!f||!g)return a===e?-1:b===e?1:f?-1:g?1:k?K.call(k,a)-K.call(k,b):0;if(f===g)return kb(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?kb(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},e):n},fb.matches=function(a,b){return fb(a,null,null,b)},fb.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fb(b,n,null,[a]).length>0},fb.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fb.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&E.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fb.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fb.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fb.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fb.selectors={cacheLength:50,createPseudo:hb,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(cb,db),a[3]=(a[3]||a[4]||a[5]||"").replace(cb,db),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fb.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fb.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(cb,db).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+M+")"+a+"("+M+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||typeof a.getAttribute!==C&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fb.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fb.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?hb(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=K.call(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:hb(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?hb(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:hb(function(a){return function(b){return fb(a,b).length>0}}),contains:hb(function(a){return function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:hb(function(a){return W.test(a||"")||fb.error("unsupported lang: "+a),a=a.replace(cb,db).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:nb(function(){return[0]}),last:nb(function(a,b){return[b-1]}),eq:nb(function(a,b,c){return[0>c?c+b:c]}),even:nb(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:nb(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:nb(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:nb(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=lb(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=mb(b);function pb(){}pb.prototype=d.filters=d.pseudos,d.setFilters=new pb,g=fb.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fb.error(a):z(a,i).slice(0)};function qb(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function rb(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function sb(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function tb(a,b,c){for(var d=0,e=b.length;e>d;d++)fb(a,b[d],c);return c}function ub(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function vb(a,b,c,d,e,f){return d&&!d[u]&&(d=vb(d)),e&&!e[u]&&(e=vb(e,f)),hb(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||tb(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ub(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ub(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?K.call(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ub(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):I.apply(g,r)})}function wb(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=rb(function(a){return a===b},h,!0),l=rb(function(a){return K.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d))}];f>i;i++)if(c=d.relative[a[i].type])m=[rb(sb(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return vb(i>1&&sb(m),i>1&&qb(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&wb(a.slice(i,e)),f>e&&wb(a=a.slice(e)),f>e&&qb(a))}m.push(c)}return sb(m)}function xb(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=G.call(i));s=ub(s)}I.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&fb.uniqueSort(i)}return k&&(w=v,j=t),r};return c?hb(f):f}return h=fb.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wb(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xb(e,d)),f.selector=a}return f},i=fb.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(cb,db),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(cb,db),ab.test(j[0].type)&&ob(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qb(j),!a)return I.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,ab.test(a)&&ob(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ib(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ib(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||jb("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ib(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||jb("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ib(function(a){return null==a.getAttribute("disabled")})||jb(L,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fb}(a);m.find=s,m.expr=s.selectors,m.expr[":"]=m.expr.pseudos,m.unique=s.uniqueSort,m.text=s.getText,m.isXMLDoc=s.isXML,m.contains=s.contains;var t=m.expr.match.needsContext,u=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,v=/^.[^:#\[\.,]*$/;function w(a,b,c){if(m.isFunction(b))return m.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return m.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(v.test(b))return m.filter(b,a,c);b=m.filter(b,a)}return m.grep(a,function(a){return m.inArray(a,b)>=0!==c})}m.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?m.find.matchesSelector(d,a)?[d]:[]:m.find.matches(a,m.grep(b,function(a){return 1===a.nodeType}))},m.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(m(a).filter(function(){for(b=0;e>b;b++)if(m.contains(d[b],this))return!0}));for(b=0;e>b;b++)m.find(a,d[b],c);return c=this.pushStack(e>1?m.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(w(this,a||[],!1))},not:function(a){return this.pushStack(w(this,a||[],!0))},is:function(a){return!!w(this,"string"==typeof a&&t.test(a)?m(a):a||[],!1).length}});var x,y=a.document,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=m.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||x).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof m?b[0]:b,m.merge(this,m.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:y,!0)),u.test(c[1])&&m.isPlainObject(b))for(c in b)m.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}if(d=y.getElementById(c[2]),d&&d.parentNode){if(d.id!==c[2])return x.find(a);this.length=1,this[0]=d}return this.context=y,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):m.isFunction(a)?"undefined"!=typeof x.ready?x.ready(a):a(m):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),m.makeArray(a,this))};A.prototype=m.fn,x=m(y);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};m.extend({dir:function(a,b,c){var d=[],e=a[b];while(e&&9!==e.nodeType&&(void 0===c||1!==e.nodeType||!m(e).is(c)))1===e.nodeType&&d.push(e),e=e[b];return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),m.fn.extend({has:function(a){var b,c=m(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(m.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=t.test(a)||"string"!=typeof a?m(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&m.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?m.unique(f):f)},index:function(a){return a?"string"==typeof a?m.inArray(this[0],m(a)):m.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(m.unique(m.merge(this.get(),m(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}m.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return m.dir(a,"parentNode")},parentsUntil:function(a,b,c){return m.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return m.dir(a,"nextSibling")},prevAll:function(a){return m.dir(a,"previousSibling")},nextUntil:function(a,b,c){return m.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return m.dir(a,"previousSibling",c)},siblings:function(a){return m.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return m.sibling(a.firstChild)},contents:function(a){return m.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:m.merge([],a.childNodes)}},function(a,b){m.fn[a]=function(c,d){var e=m.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=m.filter(d,e)),this.length>1&&(C[a]||(e=m.unique(e)),B.test(a)&&(e=e.reverse())),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return m.each(a.match(E)||[],function(a,c){b[c]=!0}),b}m.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):m.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(c=a.memory&&l,d=!0,f=g||0,g=0,e=h.length,b=!0;h&&e>f;f++)if(h[f].apply(l[0],l[1])===!1&&a.stopOnFalse){c=!1;break}b=!1,h&&(i?i.length&&j(i.shift()):c?h=[]:k.disable())},k={add:function(){if(h){var d=h.length;!function f(b){m.each(b,function(b,c){var d=m.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&f(c)})}(arguments),b?e=h.length:c&&(g=d,j(c))}return this},remove:function(){return h&&m.each(arguments,function(a,c){var d;while((d=m.inArray(c,h,d))>-1)h.splice(d,1),b&&(e>=d&&e--,f>=d&&f--)}),this},has:function(a){return a?m.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],e=0,this},disable:function(){return h=i=c=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,c||k.disable(),this},locked:function(){return!i},fireWith:function(a,c){return!h||d&&!i||(c=c||[],c=[a,c.slice?c.slice():c],b?i.push(c):j(c)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!d}};return k},m.extend({Deferred:function(a){var b=[["resolve","done",m.Callbacks("once memory"),"resolved"],["reject","fail",m.Callbacks("once memory"),"rejected"],["notify","progress",m.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return m.Deferred(function(c){m.each(b,function(b,f){var g=m.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&m.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?m.extend(a,d):d}},e={};return d.pipe=d.then,m.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&m.isFunction(a.promise)?e:0,g=1===f?a:m.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&m.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;m.fn.ready=function(a){return m.ready.promise().done(a),this},m.extend({isReady:!1,readyWait:1,holdReady:function(a){a?m.readyWait++:m.ready(!0)},ready:function(a){if(a===!0?!--m.readyWait:!m.isReady){if(!y.body)return setTimeout(m.ready);m.isReady=!0,a!==!0&&--m.readyWait>0||(H.resolveWith(y,[m]),m.fn.triggerHandler&&(m(y).triggerHandler("ready"),m(y).off("ready")))}}});function I(){y.addEventListener?(y.removeEventListener("DOMContentLoaded",J,!1),a.removeEventListener("load",J,!1)):(y.detachEvent("onreadystatechange",J),a.detachEvent("onload",J))}function J(){(y.addEventListener||"load"===event.type||"complete"===y.readyState)&&(I(),m.ready())}m.ready.promise=function(b){if(!H)if(H=m.Deferred(),"complete"===y.readyState)setTimeout(m.ready);else if(y.addEventListener)y.addEventListener("DOMContentLoaded",J,!1),a.addEventListener("load",J,!1);else{y.attachEvent("onreadystatechange",J),a.attachEvent("onload",J);var c=!1;try{c=null==a.frameElement&&y.documentElement}catch(d){}c&&c.doScroll&&!function e(){if(!m.isReady){try{c.doScroll("left")}catch(a){return setTimeout(e,50)}I(),m.ready()}}()}return H.promise(b)};var K="undefined",L;for(L in m(k))break;k.ownLast="0"!==L,k.inlineBlockNeedsLayout=!1,m(function(){var a,b,c,d;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",k.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(d))}),function(){var a=y.createElement("div");if(null==k.deleteExpando){k.deleteExpando=!0;try{delete a.test}catch(b){k.deleteExpando=!1}}a=null}(),m.acceptData=function(a){var b=m.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b};var M=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,N=/([A-Z])/g;function O(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(N,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:M.test(c)?m.parseJSON(c):c}catch(e){}m.data(a,b,c)}else c=void 0}return c}function P(a){var b;for(b in a)if(("data"!==b||!m.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function Q(a,b,d,e){if(m.acceptData(a)){var f,g,h=m.expando,i=a.nodeType,j=i?m.cache:a,k=i?a[h]:a[h]&&h;
if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||m.guid++:h),j[k]||(j[k]=i?{}:{toJSON:m.noop}),("object"==typeof b||"function"==typeof b)&&(e?j[k]=m.extend(j[k],b):j[k].data=m.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[m.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[m.camelCase(b)])):f=g,f}}function R(a,b,c){if(m.acceptData(a)){var d,e,f=a.nodeType,g=f?m.cache:a,h=f?a[m.expando]:m.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){m.isArray(b)?b=b.concat(m.map(b,m.camelCase)):b in d?b=[b]:(b=m.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!P(d):!m.isEmptyObject(d))return}(c||(delete g[h].data,P(g[h])))&&(f?m.cleanData([a],!0):k.deleteExpando||g!=g.window?delete g[h]:g[h]=null)}}}m.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?m.cache[a[m.expando]]:a[m.expando],!!a&&!P(a)},data:function(a,b,c){return Q(a,b,c)},removeData:function(a,b){return R(a,b)},_data:function(a,b,c){return Q(a,b,c,!0)},_removeData:function(a,b){return R(a,b,!0)}}),m.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=m.data(f),1===f.nodeType&&!m._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=m.camelCase(d.slice(5)),O(f,d,e[d])));m._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){m.data(this,a)}):arguments.length>1?this.each(function(){m.data(this,a,b)}):f?O(f,a,m.data(f,a)):void 0},removeData:function(a){return this.each(function(){m.removeData(this,a)})}}),m.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=m._data(a,b),c&&(!d||m.isArray(c)?d=m._data(a,b,m.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=m.queue(a,b),d=c.length,e=c.shift(),f=m._queueHooks(a,b),g=function(){m.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return m._data(a,c)||m._data(a,c,{empty:m.Callbacks("once memory").add(function(){m._removeData(a,b+"queue"),m._removeData(a,c)})})}}),m.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?m.queue(this[0],a):void 0===b?this:this.each(function(){var c=m.queue(this,a,b);m._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&m.dequeue(this,a)})},dequeue:function(a){return this.each(function(){m.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=m.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=m._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var S=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,T=["Top","Right","Bottom","Left"],U=function(a,b){return a=b||a,"none"===m.css(a,"display")||!m.contains(a.ownerDocument,a)},V=m.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===m.type(c)){e=!0;for(h in c)m.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,m.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(m(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},W=/^(?:checkbox|radio)$/i;!function(){var a=y.createElement("input"),b=y.createElement("div"),c=y.createDocumentFragment();if(b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",k.leadingWhitespace=3===b.firstChild.nodeType,k.tbody=!b.getElementsByTagName("tbody").length,k.htmlSerialize=!!b.getElementsByTagName("link").length,k.html5Clone="<:nav></:nav>"!==y.createElement("nav").cloneNode(!0).outerHTML,a.type="checkbox",a.checked=!0,c.appendChild(a),k.appendChecked=a.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue,c.appendChild(b),b.innerHTML="<input type='radio' checked='checked' name='t'/>",k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,k.noCloneEvent=!0,b.attachEvent&&(b.attachEvent("onclick",function(){k.noCloneEvent=!1}),b.cloneNode(!0).click()),null==k.deleteExpando){k.deleteExpando=!0;try{delete b.test}catch(d){k.deleteExpando=!1}}}(),function(){var b,c,d=y.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(k[b+"Bubbles"]=c in a)||(d.setAttribute(c,"t"),k[b+"Bubbles"]=d.attributes[c].expando===!1);d=null}();var X=/^(?:input|select|textarea)$/i,Y=/^key/,Z=/^(?:mouse|pointer|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=/^([^.]*)(?:\.(.+)|)$/;function ab(){return!0}function bb(){return!1}function cb(){try{return y.activeElement}catch(a){}}m.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=m.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return typeof m===K||a&&m.event.triggered===a.type?void 0:m.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(E)||[""],h=b.length;while(h--)f=_.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=m.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=m.event.special[o]||{},l=m.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&m.expr.match.needsContext.test(e),namespace:p.join(".")},i),(n=g[o])||(n=g[o]=[],n.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?n.splice(n.delegateCount++,0,l):n.push(l),m.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,n,o,p,q,r=m.hasData(a)&&m._data(a);if(r&&(k=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=_.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=m.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,n=k[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=f=n.length;while(f--)g=n[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(n.splice(f,1),g.selector&&n.delegateCount--,l.remove&&l.remove.call(a,g));i&&!n.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||m.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)m.event.remove(a,o+b[j],c,d,!0);m.isEmptyObject(k)&&(delete r.handle,m._removeData(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,l,n,o=[d||y],p=j.call(b,"type")?b.type:b,q=j.call(b,"namespace")?b.namespace.split("."):[];if(h=l=d=d||y,3!==d.nodeType&&8!==d.nodeType&&!$.test(p+m.event.triggered)&&(p.indexOf(".")>=0&&(q=p.split("."),p=q.shift(),q.sort()),g=p.indexOf(":")<0&&"on"+p,b=b[m.expando]?b:new m.Event(p,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=q.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+q.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:m.makeArray(c,[b]),k=m.event.special[p]||{},e||!k.trigger||k.trigger.apply(d,c)!==!1)){if(!e&&!k.noBubble&&!m.isWindow(d)){for(i=k.delegateType||p,$.test(i+p)||(h=h.parentNode);h;h=h.parentNode)o.push(h),l=h;l===(d.ownerDocument||y)&&o.push(l.defaultView||l.parentWindow||a)}n=0;while((h=o[n++])&&!b.isPropagationStopped())b.type=n>1?i:k.bindType||p,f=(m._data(h,"events")||{})[b.type]&&m._data(h,"handle"),f&&f.apply(h,c),f=g&&h[g],f&&f.apply&&m.acceptData(h)&&(b.result=f.apply(h,c),b.result===!1&&b.preventDefault());if(b.type=p,!e&&!b.isDefaultPrevented()&&(!k._default||k._default.apply(o.pop(),c)===!1)&&m.acceptData(d)&&g&&d[p]&&!m.isWindow(d)){l=d[g],l&&(d[g]=null),m.event.triggered=p;try{d[p]()}catch(r){}m.event.triggered=void 0,l&&(d[g]=l)}return b.result}},dispatch:function(a){a=m.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(m._data(this,"events")||{})[a.type]||[],k=m.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=m.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,g=0;while((e=f.handlers[g++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(e.namespace))&&(a.handleObj=e,a.data=e.data,c=((m.event.special[e.origType]||{}).handle||e.handler).apply(f.elem,i),void 0!==c&&(a.result=c)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(e=[],f=0;h>f;f++)d=b[f],c=d.selector+" ",void 0===e[c]&&(e[c]=d.needsContext?m(c,this).index(i)>=0:m.find(c,this,null,[i]).length),e[c]&&e.push(d);e.length&&g.push({elem:i,handlers:e})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[m.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=Z.test(e)?this.mouseHooks:Y.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new m.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=f.srcElement||y),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,g.filter?g.filter(a,f):a},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button,g=b.fromElement;return null==a.pageX&&null!=b.clientX&&(d=a.target.ownerDocument||y,e=d.documentElement,c=d.body,a.pageX=b.clientX+(e&&e.scrollLeft||c&&c.scrollLeft||0)-(e&&e.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(e&&e.scrollTop||c&&c.scrollTop||0)-(e&&e.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&g&&(a.relatedTarget=g===a.target?b.toElement:g),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==cb()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===cb()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return m.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return m.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=m.extend(new m.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?m.event.trigger(e,null,b):m.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},m.removeEvent=y.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]===K&&(a[d]=null),a.detachEvent(d,c))},m.Event=function(a,b){return this instanceof m.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?ab:bb):this.type=a,b&&m.extend(this,b),this.timeStamp=a&&a.timeStamp||m.now(),void(this[m.expando]=!0)):new m.Event(a,b)},m.Event.prototype={isDefaultPrevented:bb,isPropagationStopped:bb,isImmediatePropagationStopped:bb,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=ab,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=ab,a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=ab,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},m.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){m.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!m.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.submitBubbles||(m.event.special.submit={setup:function(){return m.nodeName(this,"form")?!1:void m.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=m.nodeName(b,"input")||m.nodeName(b,"button")?b.form:void 0;c&&!m._data(c,"submitBubbles")&&(m.event.add(c,"submit._submit",function(a){a._submit_bubble=!0}),m._data(c,"submitBubbles",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&m.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){return m.nodeName(this,"form")?!1:void m.event.remove(this,"._submit")}}),k.changeBubbles||(m.event.special.change={setup:function(){return X.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(m.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._just_changed=!0)}),m.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),m.event.simulate("change",this,a,!0)})),!1):void m.event.add(this,"beforeactivate._change",function(a){var b=a.target;X.test(b.nodeName)&&!m._data(b,"changeBubbles")&&(m.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||m.event.simulate("change",this.parentNode,a,!0)}),m._data(b,"changeBubbles",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return m.event.remove(this,"._change"),!X.test(this.nodeName)}}),k.focusinBubbles||m.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){m.event.simulate(b,a.target,m.event.fix(a),!0)};m.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=m._data(d,b);e||d.addEventListener(a,c,!0),m._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=m._data(d,b)-1;e?m._data(d,b,e):(d.removeEventListener(a,c,!0),m._removeData(d,b))}}}),m.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(f in a)this.on(f,b,c,a[f],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=bb;else if(!d)return this;return 1===e&&(g=d,d=function(a){return m().off(a),g.apply(this,arguments)},d.guid=g.guid||(g.guid=m.guid++)),this.each(function(){m.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,m(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=bb),this.each(function(){m.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){m.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?m.event.trigger(a,b,c,!0):void 0}});function db(a){var b=eb.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}var eb="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",fb=/ jQuery\d+="(?:null|\d+)"/g,gb=new RegExp("<(?:"+eb+")[\\s/>]","i"),hb=/^\s+/,ib=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,jb=/<([\w:]+)/,kb=/<tbody/i,lb=/<|&#?\w+;/,mb=/<(?:script|style|link)/i,nb=/checked\s*(?:[^=]|=\s*.checked.)/i,ob=/^$|\/(?:java|ecma)script/i,pb=/^true\/(.*)/,qb=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,rb={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:k.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},sb=db(y),tb=sb.appendChild(y.createElement("div"));rb.optgroup=rb.option,rb.tbody=rb.tfoot=rb.colgroup=rb.caption=rb.thead,rb.th=rb.td;function ub(a,b){var c,d,e=0,f=typeof a.getElementsByTagName!==K?a.getElementsByTagName(b||"*"):typeof a.querySelectorAll!==K?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||m.nodeName(d,b)?f.push(d):m.merge(f,ub(d,b));return void 0===b||b&&m.nodeName(a,b)?m.merge([a],f):f}function vb(a){W.test(a.type)&&(a.defaultChecked=a.checked)}function wb(a,b){return m.nodeName(a,"table")&&m.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function xb(a){return a.type=(null!==m.find.attr(a,"type"))+"/"+a.type,a}function yb(a){var b=pb.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function zb(a,b){for(var c,d=0;null!=(c=a[d]);d++)m._data(c,"globalEval",!b||m._data(b[d],"globalEval"))}function Ab(a,b){if(1===b.nodeType&&m.hasData(a)){var c,d,e,f=m._data(a),g=m._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)m.event.add(b,c,h[c][d])}g.data&&(g.data=m.extend({},g.data))}}function Bb(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!k.noCloneEvent&&b[m.expando]){e=m._data(b);for(d in e.events)m.removeEvent(b,d,e.handle);b.removeAttribute(m.expando)}"script"===c&&b.text!==a.text?(xb(b).text=a.text,yb(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),k.html5Clone&&a.innerHTML&&!m.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&W.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}}m.extend({clone:function(a,b,c){var d,e,f,g,h,i=m.contains(a.ownerDocument,a);if(k.html5Clone||m.isXMLDoc(a)||!gb.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(tb.innerHTML=a.outerHTML,tb.removeChild(f=tb.firstChild)),!(k.noCloneEvent&&k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||m.isXMLDoc(a)))for(d=ub(f),h=ub(a),g=0;null!=(e=h[g]);++g)d[g]&&Bb(e,d[g]);if(b)if(c)for(h=h||ub(a),d=d||ub(f),g=0;null!=(e=h[g]);g++)Ab(e,d[g]);else Ab(a,f);return d=ub(f,"script"),d.length>0&&zb(d,!i&&ub(a,"script")),d=h=e=null,f},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,l,n=a.length,o=db(b),p=[],q=0;n>q;q++)if(f=a[q],f||0===f)if("object"===m.type(f))m.merge(p,f.nodeType?[f]:f);else if(lb.test(f)){h=h||o.appendChild(b.createElement("div")),i=(jb.exec(f)||["",""])[1].toLowerCase(),l=rb[i]||rb._default,h.innerHTML=l[1]+f.replace(ib,"<$1></$2>")+l[2],e=l[0];while(e--)h=h.lastChild;if(!k.leadingWhitespace&&hb.test(f)&&p.push(b.createTextNode(hb.exec(f)[0])),!k.tbody){f="table"!==i||kb.test(f)?"<table>"!==l[1]||kb.test(f)?0:h:h.firstChild,e=f&&f.childNodes.length;while(e--)m.nodeName(j=f.childNodes[e],"tbody")&&!j.childNodes.length&&f.removeChild(j)}m.merge(p,h.childNodes),h.textContent="";while(h.firstChild)h.removeChild(h.firstChild);h=o.lastChild}else p.push(b.createTextNode(f));h&&o.removeChild(h),k.appendChecked||m.grep(ub(p,"input"),vb),q=0;while(f=p[q++])if((!d||-1===m.inArray(f,d))&&(g=m.contains(f.ownerDocument,f),h=ub(o.appendChild(f),"script"),g&&zb(h),c)){e=0;while(f=h[e++])ob.test(f.type||"")&&c.push(f)}return h=null,o},cleanData:function(a,b){for(var d,e,f,g,h=0,i=m.expando,j=m.cache,l=k.deleteExpando,n=m.event.special;null!=(d=a[h]);h++)if((b||m.acceptData(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)n[e]?m.event.remove(d,e):m.removeEvent(d,e,g.handle);j[f]&&(delete j[f],l?delete d[i]:typeof d.removeAttribute!==K?d.removeAttribute(i):d[i]=null,c.push(f))}}}),m.fn.extend({text:function(a){return V(this,function(a){return void 0===a?m.text(this):this.empty().append((this[0]&&this[0].ownerDocument||y).createTextNode(a))},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=wb(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?m.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||m.cleanData(ub(c)),c.parentNode&&(b&&m.contains(c.ownerDocument,c)&&zb(ub(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&m.cleanData(ub(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&m.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return m.clone(this,a,b)})},html:function(a){return V(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(fb,""):void 0;if(!("string"!=typeof a||mb.test(a)||!k.htmlSerialize&&gb.test(a)||!k.leadingWhitespace&&hb.test(a)||rb[(jb.exec(a)||["",""])[1].toLowerCase()])){a=a.replace(ib,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(m.cleanData(ub(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,m.cleanData(ub(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,n=this,o=l-1,p=a[0],q=m.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&nb.test(p))return this.each(function(c){var d=n.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(i=m.buildFragment(a,this[0].ownerDocument,!1,this),c=i.firstChild,1===i.childNodes.length&&(i=c),c)){for(g=m.map(ub(i,"script"),xb),f=g.length;l>j;j++)d=i,j!==o&&(d=m.clone(d,!0,!0),f&&m.merge(g,ub(d,"script"))),b.call(this[j],d,j);if(f)for(h=g[g.length-1].ownerDocument,m.map(g,yb),j=0;f>j;j++)d=g[j],ob.test(d.type||"")&&!m._data(d,"globalEval")&&m.contains(h,d)&&(d.src?m._evalUrl&&m._evalUrl(d.src):m.globalEval((d.text||d.textContent||d.innerHTML||"").replace(qb,"")));i=c=null}return this}}),m.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){m.fn[a]=function(a){for(var c,d=0,e=[],g=m(a),h=g.length-1;h>=d;d++)c=d===h?this:this.clone(!0),m(g[d])[b](c),f.apply(e,c.get());return this.pushStack(e)}});var Cb,Db={};function Eb(b,c){var d,e=m(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:m.css(e[0],"display");return e.detach(),f}function Fb(a){var b=y,c=Db[a];return c||(c=Eb(a,b),"none"!==c&&c||(Cb=(Cb||m("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Cb[0].contentWindow||Cb[0].contentDocument).document,b.write(),b.close(),c=Eb(a,b),Cb.detach()),Db[a]=c),c}!function(){var a;k.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,d;return c=y.getElementsByTagName("body")[0],c&&c.style?(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),typeof b.style.zoom!==K&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(y.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(d),a):void 0}}();var Gb=/^margin/,Hb=new RegExp("^("+S+")(?!px)[a-z%]+$","i"),Ib,Jb,Kb=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ib=function(a){return a.ownerDocument.defaultView.getComputedStyle(a,null)},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c.getPropertyValue(b)||c[b]:void 0,c&&(""!==g||m.contains(a.ownerDocument,a)||(g=m.style(a,b)),Hb.test(g)&&Gb.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0===g?g:g+""}):y.documentElement.currentStyle&&(Ib=function(a){return a.currentStyle},Jb=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ib(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Hb.test(g)&&!Kb.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Lb(a,b){return{get:function(){var c=a();if(null!=c)return c?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d,e,f,g,h;if(b=y.createElement("div"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=d&&d.style){c.cssText="float:left;opacity:.5",k.opacity="0.5"===c.opacity,k.cssFloat=!!c.cssFloat,b.style.backgroundClip="content-box",b.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===b.style.backgroundClip,k.boxSizing=""===c.boxSizing||""===c.MozBoxSizing||""===c.WebkitBoxSizing,m.extend(k,{reliableHiddenOffsets:function(){return null==g&&i(),g},boxSizingReliable:function(){return null==f&&i(),f},pixelPosition:function(){return null==e&&i(),e},reliableMarginRight:function(){return null==h&&i(),h}});function i(){var b,c,d,i;c=y.getElementsByTagName("body")[0],c&&c.style&&(b=y.createElement("div"),d=y.createElement("div"),d.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(d).appendChild(b),b.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",e=f=!1,h=!0,a.getComputedStyle&&(e="1%"!==(a.getComputedStyle(b,null)||{}).top,f="4px"===(a.getComputedStyle(b,null)||{width:"4px"}).width,i=b.appendChild(y.createElement("div")),i.style.cssText=b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",i.style.marginRight=i.style.width="0",b.style.width="1px",h=!parseFloat((a.getComputedStyle(i,null)||{}).marginRight)),b.innerHTML="<table><tr><td></td><td>t</td></tr></table>",i=b.getElementsByTagName("td"),i[0].style.cssText="margin:0;border:0;padding:0;display:none",g=0===i[0].offsetHeight,g&&(i[0].style.display="",i[1].style.display="none",g=0===i[0].offsetHeight),c.removeChild(d))}}}(),m.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var Mb=/alpha\([^)]*\)/i,Nb=/opacity\s*=\s*([^)]*)/,Ob=/^(none|table(?!-c[ea]).+)/,Pb=new RegExp("^("+S+")(.*)$","i"),Qb=new RegExp("^([+-])=("+S+")","i"),Rb={position:"absolute",visibility:"hidden",display:"block"},Sb={letterSpacing:"0",fontWeight:"400"},Tb=["Webkit","O","Moz","ms"];function Ub(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=Tb.length;while(e--)if(b=Tb[e]+c,b in a)return b;return d}function Vb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=m._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&U(d)&&(f[g]=m._data(d,"olddisplay",Fb(d.nodeName)))):(e=U(d),(c&&"none"!==c||!e)&&m._data(d,"olddisplay",e?c:m.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function Wb(a,b,c){var d=Pb.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Xb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=m.css(a,c+T[f],!0,e)),d?("content"===c&&(g-=m.css(a,"padding"+T[f],!0,e)),"margin"!==c&&(g-=m.css(a,"border"+T[f]+"Width",!0,e))):(g+=m.css(a,"padding"+T[f],!0,e),"padding"!==c&&(g+=m.css(a,"border"+T[f]+"Width",!0,e)));return g}function Yb(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=Ib(a),g=k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=Jb(a,b,f),(0>e||null==e)&&(e=a.style[b]),Hb.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Xb(a,b,c||(g?"border":"content"),d,f)+"px"}m.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Jb(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":k.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=m.camelCase(b),i=a.style;if(b=m.cssProps[h]||(m.cssProps[h]=Ub(i,h)),g=m.cssHooks[b]||m.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=Qb.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(m.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||m.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=m.camelCase(b);return b=m.cssProps[h]||(m.cssProps[h]=Ub(a.style,h)),g=m.cssHooks[b]||m.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Jb(a,b,d)),"normal"===f&&b in Sb&&(f=Sb[b]),""===c||c?(e=parseFloat(f),c===!0||m.isNumeric(e)?e||0:f):f}}),m.each(["height","width"],function(a,b){m.cssHooks[b]={get:function(a,c,d){return c?Ob.test(m.css(a,"display"))&&0===a.offsetWidth?m.swap(a,Rb,function(){return Yb(a,b,d)}):Yb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ib(a);return Wb(a,c,d?Xb(a,b,d,k.boxSizing&&"border-box"===m.css(a,"boxSizing",!1,e),e):0)}}}),k.opacity||(m.cssHooks.opacity={get:function(a,b){return Nb.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=m.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===m.trim(f.replace(Mb,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Mb.test(f)?f.replace(Mb,e):f+" "+e)}}),m.cssHooks.marginRight=Lb(k.reliableMarginRight,function(a,b){return b?m.swap(a,{display:"inline-block"},Jb,[a,"marginRight"]):void 0}),m.each({margin:"",padding:"",border:"Width"},function(a,b){m.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+T[d]+b]=f[d]||f[d-2]||f[0];return e}},Gb.test(a)||(m.cssHooks[a+b].set=Wb)}),m.fn.extend({css:function(a,b){return V(this,function(a,b,c){var d,e,f={},g=0;if(m.isArray(b)){for(d=Ib(a),e=b.length;e>g;g++)f[b[g]]=m.css(a,b[g],!1,d);return f}return void 0!==c?m.style(a,b,c):m.css(a,b)},a,b,arguments.length>1)},show:function(){return Vb(this,!0)},hide:function(){return Vb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){U(this)?m(this).show():m(this).hide()})}});function Zb(a,b,c,d,e){return new Zb.prototype.init(a,b,c,d,e)}m.Tween=Zb,Zb.prototype={constructor:Zb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(m.cssNumber[c]?"":"px")
},cur:function(){var a=Zb.propHooks[this.prop];return a&&a.get?a.get(this):Zb.propHooks._default.get(this)},run:function(a){var b,c=Zb.propHooks[this.prop];return this.pos=b=this.options.duration?m.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Zb.propHooks._default.set(this),this}},Zb.prototype.init.prototype=Zb.prototype,Zb.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=m.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){m.fx.step[a.prop]?m.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[m.cssProps[a.prop]]||m.cssHooks[a.prop])?m.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Zb.propHooks.scrollTop=Zb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},m.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},m.fx=Zb.prototype.init,m.fx.step={};var $b,_b,ac=/^(?:toggle|show|hide)$/,bc=new RegExp("^(?:([+-])=|)("+S+")([a-z%]*)$","i"),cc=/queueHooks$/,dc=[ic],ec={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=bc.exec(b),f=e&&e[3]||(m.cssNumber[a]?"":"px"),g=(m.cssNumber[a]||"px"!==f&&+d)&&bc.exec(m.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,m.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function fc(){return setTimeout(function(){$b=void 0}),$b=m.now()}function gc(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=T[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function hc(a,b,c){for(var d,e=(ec[b]||[]).concat(ec["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ic(a,b,c){var d,e,f,g,h,i,j,l,n=this,o={},p=a.style,q=a.nodeType&&U(a),r=m._data(a,"fxshow");c.queue||(h=m._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,n.always(function(){n.always(function(){h.unqueued--,m.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=m.css(a,"display"),l="none"===j?m._data(a,"olddisplay")||Fb(a.nodeName):j,"inline"===l&&"none"===m.css(a,"float")&&(k.inlineBlockNeedsLayout&&"inline"!==Fb(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",k.shrinkWrapBlocks()||n.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],ac.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||m.style(a,d)}else j=void 0;if(m.isEmptyObject(o))"inline"===("none"===j?Fb(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=m._data(a,"fxshow",{}),f&&(r.hidden=!q),q?m(a).show():n.done(function(){m(a).hide()}),n.done(function(){var b;m._removeData(a,"fxshow");for(b in o)m.style(a,b,o[b])});for(d in o)g=hc(q?r[d]:0,d,n),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function jc(a,b){var c,d,e,f,g;for(c in a)if(d=m.camelCase(c),e=b[d],f=a[c],m.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=m.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function kc(a,b,c){var d,e,f=0,g=dc.length,h=m.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=$b||fc(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:m.extend({},b),opts:m.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:$b||fc(),duration:c.duration,tweens:[],createTween:function(b,c){var d=m.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(jc(k,j.opts.specialEasing);g>f;f++)if(d=dc[f].call(j,a,k,j.opts))return d;return m.map(k,hc,j),m.isFunction(j.opts.start)&&j.opts.start.call(a,j),m.fx.timer(m.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}m.Animation=m.extend(kc,{tweener:function(a,b){m.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],ec[c]=ec[c]||[],ec[c].unshift(b)},prefilter:function(a,b){b?dc.unshift(a):dc.push(a)}}),m.speed=function(a,b,c){var d=a&&"object"==typeof a?m.extend({},a):{complete:c||!c&&b||m.isFunction(a)&&a,duration:a,easing:c&&b||b&&!m.isFunction(b)&&b};return d.duration=m.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in m.fx.speeds?m.fx.speeds[d.duration]:m.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){m.isFunction(d.old)&&d.old.call(this),d.queue&&m.dequeue(this,d.queue)},d},m.fn.extend({fadeTo:function(a,b,c,d){return this.filter(U).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=m.isEmptyObject(a),f=m.speed(b,c,d),g=function(){var b=kc(this,m.extend({},a),f);(e||m._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=m.timers,g=m._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&cc.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&m.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=m._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=m.timers,g=d?d.length:0;for(c.finish=!0,m.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),m.each(["toggle","show","hide"],function(a,b){var c=m.fn[b];m.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(gc(b,!0),a,d,e)}}),m.each({slideDown:gc("show"),slideUp:gc("hide"),slideToggle:gc("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){m.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),m.timers=[],m.fx.tick=function(){var a,b=m.timers,c=0;for($b=m.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||m.fx.stop(),$b=void 0},m.fx.timer=function(a){m.timers.push(a),a()?m.fx.start():m.timers.pop()},m.fx.interval=13,m.fx.start=function(){_b||(_b=setInterval(m.fx.tick,m.fx.interval))},m.fx.stop=function(){clearInterval(_b),_b=null},m.fx.speeds={slow:600,fast:200,_default:400},m.fn.delay=function(a,b){return a=m.fx?m.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a,b,c,d,e;b=y.createElement("div"),b.setAttribute("className","t"),b.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",d=b.getElementsByTagName("a")[0],c=y.createElement("select"),e=c.appendChild(y.createElement("option")),a=b.getElementsByTagName("input")[0],d.style.cssText="top:1px",k.getSetAttribute="t"!==b.className,k.style=/top/.test(d.getAttribute("style")),k.hrefNormalized="/a"===d.getAttribute("href"),k.checkOn=!!a.value,k.optSelected=e.selected,k.enctype=!!y.createElement("form").enctype,c.disabled=!0,k.optDisabled=!e.disabled,a=y.createElement("input"),a.setAttribute("value",""),k.input=""===a.getAttribute("value"),a.value="t",a.setAttribute("type","radio"),k.radioValue="t"===a.value}();var lc=/\r/g;m.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=m.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,m(this).val()):a,null==e?e="":"number"==typeof e?e+="":m.isArray(e)&&(e=m.map(e,function(a){return null==a?"":a+""})),b=m.valHooks[this.type]||m.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=m.valHooks[e.type]||m.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(lc,""):null==c?"":c)}}}),m.extend({valHooks:{option:{get:function(a){var b=m.find.attr(a,"value");return null!=b?b:m.trim(m.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&m.nodeName(c.parentNode,"optgroup"))){if(b=m(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=m.makeArray(b),g=e.length;while(g--)if(d=e[g],m.inArray(m.valHooks.option.get(d),f)>=0)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),m.each(["radio","checkbox"],function(){m.valHooks[this]={set:function(a,b){return m.isArray(b)?a.checked=m.inArray(m(a).val(),b)>=0:void 0}},k.checkOn||(m.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var mc,nc,oc=m.expr.attrHandle,pc=/^(?:checked|selected)$/i,qc=k.getSetAttribute,rc=k.input;m.fn.extend({attr:function(a,b){return V(this,m.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){m.removeAttr(this,a)})}}),m.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===K?m.prop(a,b,c):(1===f&&m.isXMLDoc(a)||(b=b.toLowerCase(),d=m.attrHooks[b]||(m.expr.match.bool.test(b)?nc:mc)),void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=m.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void m.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=m.propFix[c]||c,m.expr.match.bool.test(c)?rc&&qc||!pc.test(c)?a[d]=!1:a[m.camelCase("default-"+c)]=a[d]=!1:m.attr(a,c,""),a.removeAttribute(qc?c:d)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&m.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),nc={set:function(a,b,c){return b===!1?m.removeAttr(a,c):rc&&qc||!pc.test(c)?a.setAttribute(!qc&&m.propFix[c]||c,c):a[m.camelCase("default-"+c)]=a[c]=!0,c}},m.each(m.expr.match.bool.source.match(/\w+/g),function(a,b){var c=oc[b]||m.find.attr;oc[b]=rc&&qc||!pc.test(b)?function(a,b,d){var e,f;return d||(f=oc[b],oc[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,oc[b]=f),e}:function(a,b,c){return c?void 0:a[m.camelCase("default-"+b)]?b.toLowerCase():null}}),rc&&qc||(m.attrHooks.value={set:function(a,b,c){return m.nodeName(a,"input")?void(a.defaultValue=b):mc&&mc.set(a,b,c)}}),qc||(mc={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},oc.id=oc.name=oc.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},m.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:mc.set},m.attrHooks.contenteditable={set:function(a,b,c){mc.set(a,""===b?!1:b,c)}},m.each(["width","height"],function(a,b){m.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),k.style||(m.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var sc=/^(?:input|select|textarea|button|object)$/i,tc=/^(?:a|area)$/i;m.fn.extend({prop:function(a,b){return V(this,m.prop,a,b,arguments.length>1)},removeProp:function(a){return a=m.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),m.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!m.isXMLDoc(a),f&&(b=m.propFix[b]||b,e=m.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=m.find.attr(a,"tabindex");return b?parseInt(b,10):sc.test(a.nodeName)||tc.test(a.nodeName)&&a.href?0:-1}}}}),k.hrefNormalized||m.each(["href","src"],function(a,b){m.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),k.optSelected||(m.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}}),m.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){m.propFix[this.toLowerCase()]=this}),k.enctype||(m.propFix.enctype="encoding");var uc=/[\t\r\n\f]/g;m.fn.extend({addClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j="string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).addClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=m.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0,i=this.length,j=0===arguments.length||"string"==typeof a&&a;if(m.isFunction(a))return this.each(function(b){m(this).removeClass(a.call(this,b,this.className))});if(j)for(b=(a||"").match(E)||[];i>h;h++)if(c=this[h],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(uc," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?m.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(m.isFunction(a)?function(c){m(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=m(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===K||"boolean"===c)&&(this.className&&m._data(this,"__className__",this.className),this.className=this.className||a===!1?"":m._data(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(uc," ").indexOf(b)>=0)return!0;return!1}}),m.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){m.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),m.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var vc=m.now(),wc=/\?/,xc=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;m.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=m.trim(b+"");return e&&!m.trim(e.replace(xc,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():m.error("Invalid JSON: "+b)},m.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new DOMParser,c=d.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||m.error("Invalid XML: "+b),c};var yc,zc,Ac=/#.*$/,Bc=/([?&])_=[^&]*/,Cc=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,Dc=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Ec=/^(?:GET|HEAD)$/,Fc=/^\/\//,Gc=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Hc={},Ic={},Jc="*/".concat("*");try{zc=location.href}catch(Kc){zc=y.createElement("a"),zc.href="",zc=zc.href}yc=Gc.exec(zc.toLowerCase())||[];function Lc(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(m.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Mc(a,b,c,d){var e={},f=a===Ic;function g(h){var i;return e[h]=!0,m.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Nc(a,b){var c,d,e=m.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&m.extend(!0,a,c),a}function Oc(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Pc(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}m.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zc,type:"GET",isLocal:Dc.test(yc[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Jc,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":m.parseJSON,"text xml":m.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Nc(Nc(a,m.ajaxSettings),b):Nc(m.ajaxSettings,a)},ajaxPrefilter:Lc(Hc),ajaxTransport:Lc(Ic),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=m.ajaxSetup({},b),l=k.context||k,n=k.context&&(l.nodeType||l.jquery)?m(l):m.event,o=m.Deferred(),p=m.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!j){j={};while(b=Cc.exec(f))j[b[1].toLowerCase()]=b[2]}b=j[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?f:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return i&&i.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||zc)+"").replace(Ac,"").replace(Fc,yc[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=m.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(c=Gc.exec(k.url.toLowerCase()),k.crossDomain=!(!c||c[1]===yc[1]&&c[2]===yc[2]&&(c[3]||("http:"===c[1]?"80":"443"))===(yc[3]||("http:"===yc[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=m.param(k.data,k.traditional)),Mc(Hc,k,b,v),2===t)return v;h=k.global,h&&0===m.active++&&m.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!Ec.test(k.type),e=k.url,k.hasContent||(k.data&&(e=k.url+=(wc.test(e)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=Bc.test(e)?e.replace(Bc,"$1_="+vc++):e+(wc.test(e)?"&":"?")+"_="+vc++)),k.ifModified&&(m.lastModified[e]&&v.setRequestHeader("If-Modified-Since",m.lastModified[e]),m.etag[e]&&v.setRequestHeader("If-None-Match",m.etag[e])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+Jc+"; q=0.01":""):k.accepts["*"]);for(d in k.headers)v.setRequestHeader(d,k.headers[d]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(d in{success:1,error:1,complete:1})v[d](k[d]);if(i=Mc(Ic,k,b,v)){v.readyState=1,h&&n.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,i.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,c,d){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),i=void 0,f=d||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,c&&(u=Oc(k,v,c)),u=Pc(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(m.lastModified[e]=w),w=v.getResponseHeader("etag"),w&&(m.etag[e]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,h&&n.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),h&&(n.trigger("ajaxComplete",[v,k]),--m.active||m.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return m.get(a,b,c,"json")},getScript:function(a,b){return m.get(a,void 0,b,"script")}}),m.each(["get","post"],function(a,b){m[b]=function(a,c,d,e){return m.isFunction(c)&&(e=e||d,d=c,c=void 0),m.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),m.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){m.fn[b]=function(a){return this.on(b,a)}}),m._evalUrl=function(a){return m.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},m.fn.extend({wrapAll:function(a){if(m.isFunction(a))return this.each(function(b){m(this).wrapAll(a.call(this,b))});if(this[0]){var b=m(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return this.each(m.isFunction(a)?function(b){m(this).wrapInner(a.call(this,b))}:function(){var b=m(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=m.isFunction(a);return this.each(function(c){m(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){m.nodeName(this,"body")||m(this).replaceWith(this.childNodes)}).end()}}),m.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0||!k.reliableHiddenOffsets()&&"none"===(a.style&&a.style.display||m.css(a,"display"))},m.expr.filters.visible=function(a){return!m.expr.filters.hidden(a)};var Qc=/%20/g,Rc=/\[\]$/,Sc=/\r?\n/g,Tc=/^(?:submit|button|image|reset|file)$/i,Uc=/^(?:input|select|textarea|keygen)/i;function Vc(a,b,c,d){var e;if(m.isArray(b))m.each(b,function(b,e){c||Rc.test(a)?d(a,e):Vc(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==m.type(b))d(a,b);else for(e in b)Vc(a+"["+e+"]",b[e],c,d)}m.param=function(a,b){var c,d=[],e=function(a,b){b=m.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=m.ajaxSettings&&m.ajaxSettings.traditional),m.isArray(a)||a.jquery&&!m.isPlainObject(a))m.each(a,function(){e(this.name,this.value)});else for(c in a)Vc(c,a[c],b,e);return d.join("&").replace(Qc,"+")},m.fn.extend({serialize:function(){return m.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=m.prop(this,"elements");return a?m.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!m(this).is(":disabled")&&Uc.test(this.nodeName)&&!Tc.test(a)&&(this.checked||!W.test(a))}).map(function(a,b){var c=m(this).val();return null==c?null:m.isArray(c)?m.map(c,function(a){return{name:b.name,value:a.replace(Sc,"\r\n")}}):{name:b.name,value:c.replace(Sc,"\r\n")}}).get()}}),m.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&Zc()||$c()}:Zc;var Wc=0,Xc={},Yc=m.ajaxSettings.xhr();a.ActiveXObject&&m(a).on("unload",function(){for(var a in Xc)Xc[a](void 0,!0)}),k.cors=!!Yc&&"withCredentials"in Yc,Yc=k.ajax=!!Yc,Yc&&m.ajaxTransport(function(a){if(!a.crossDomain||k.cors){var b;return{send:function(c,d){var e,f=a.xhr(),g=++Wc;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)void 0!==c[e]&&f.setRequestHeader(e,c[e]+"");f.send(a.hasContent&&a.data||null),b=function(c,e){var h,i,j;if(b&&(e||4===f.readyState))if(delete Xc[g],b=void 0,f.onreadystatechange=m.noop,e)4!==f.readyState&&f.abort();else{j={},h=f.status,"string"==typeof f.responseText&&(j.text=f.responseText);try{i=f.statusText}catch(k){i=""}h||!a.isLocal||a.crossDomain?1223===h&&(h=204):h=j.text?200:404}j&&d(h,i,j,f.getAllResponseHeaders())},a.async?4===f.readyState?setTimeout(b):f.onreadystatechange=Xc[g]=b:b()},abort:function(){b&&b(void 0,!0)}}}});function Zc(){try{return new a.XMLHttpRequest}catch(b){}}function $c(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}m.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return m.globalEval(a),a}}}),m.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),m.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=y.head||m("head")[0]||y.documentElement;return{send:function(d,e){b=y.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||e(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var _c=[],ad=/(=)\?(?=&|$)|\?\?/;m.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=_c.pop()||m.expando+"_"+vc++;return this[a]=!0,a}}),m.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(ad.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&ad.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=m.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(ad,"$1"+e):b.jsonp!==!1&&(b.url+=(wc.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||m.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,_c.push(e)),g&&m.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),m.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||y;var d=u.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=m.buildFragment([a],b,e),e&&e.length&&m(e).remove(),m.merge([],d.childNodes))};var bd=m.fn.load;m.fn.load=function(a,b,c){if("string"!=typeof a&&bd)return bd.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=m.trim(a.slice(h,a.length)),a=a.slice(0,h)),m.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(f="POST"),g.length>0&&m.ajax({url:a,type:f,dataType:"html",data:b}).done(function(a){e=arguments,g.html(d?m("<div>").append(m.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,e||[a.responseText,b,a])}),this},m.expr.filters.animated=function(a){return m.grep(m.timers,function(b){return a===b.elem}).length};var cd=a.document.documentElement;function dd(a){return m.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}m.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=m.css(a,"position"),l=m(a),n={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=m.css(a,"top"),i=m.css(a,"left"),j=("absolute"===k||"fixed"===k)&&m.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),m.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(n.top=b.top-h.top+g),null!=b.left&&(n.left=b.left-h.left+e),"using"in b?b.using.call(a,n):l.css(n)}},m.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){m.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,m.contains(b,e)?(typeof e.getBoundingClientRect!==K&&(d=e.getBoundingClientRect()),c=dd(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===m.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),m.nodeName(a[0],"html")||(c=a.offset()),c.top+=m.css(a[0],"borderTopWidth",!0),c.left+=m.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-m.css(d,"marginTop",!0),left:b.left-c.left-m.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||cd;while(a&&!m.nodeName(a,"html")&&"static"===m.css(a,"position"))a=a.offsetParent;return a||cd})}}),m.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);m.fn[a]=function(d){return V(this,function(a,d,e){var f=dd(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?m(f).scrollLeft():e,c?e:m(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),m.each(["top","left"],function(a,b){m.cssHooks[b]=Lb(k.pixelPosition,function(a,c){return c?(c=Jb(a,b),Hb.test(c)?m(a).position()[b]+"px":c):void 0})}),m.each({Height:"height",Width:"width"},function(a,b){m.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){m.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return V(this,function(b,c,d){var e;return m.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?m.css(b,c,g):m.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),m.fn.size=function(){return this.length},m.fn.andSelf=m.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return m});var ed=a.jQuery,fd=a.$;return m.noConflict=function(b){return a.$===m&&(a.$=fd),b&&a.jQuery===m&&(a.jQuery=ed),m},typeof b===K&&(a.jQuery=a.$=m),m});

;/*! jQuery Validation Plugin - v1.11.1 - 3/22/2013\n* https://github.com/jzaefferer/jquery-validation
* Copyright (c) 2013 Jörn Zaefferer; Licensed MIT */(function(t){t.extend(t.fn,{validate:function(e){if(!this.length)return e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing."),void 0;var i=t.data(this[0],"validator");return i?i:(this.attr("novalidate","novalidate"),i=new t.validator(e,this[0]),t.data(this[0],"validator",i),i.settings.onsubmit&&(this.validateDelegate(":submit","click",function(e){i.settings.submitHandler&&(i.submitButton=e.target),t(e.target).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==t(e.target).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.submit(function(e){function s(){var s;return i.settings.submitHandler?(i.submitButton&&(s=t("<input type='hidden'/>").attr("name",i.submitButton.name).val(t(i.submitButton).val()).appendTo(i.currentForm)),i.settings.submitHandler.call(i,i.currentForm,e),i.submitButton&&s.remove(),!1):!0}return i.settings.debug&&e.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,s()):i.form()?i.pendingRequest?(i.formSubmitted=!0,!1):s():(i.focusInvalid(),!1)})),i)},valid:function(){if(t(this[0]).is("form"))return this.validate().form();var e=!0,i=t(this[0].form).validate();return this.each(function(){e=e&&i.element(this)}),e},removeAttrs:function(e){var i={},s=this;return t.each(e.split(/\s/),function(t,e){i[e]=s.attr(e),s.removeAttr(e)}),i},rules:function(e,i){var s=this[0];if(e){var r=t.data(s.form,"validator").settings,n=r.rules,a=t.validator.staticRules(s);switch(e){case"add":t.extend(a,t.validator.normalizeRule(i)),delete a.messages,n[s.name]=a,i.messages&&(r.messages[s.name]=t.extend(r.messages[s.name],i.messages));break;case"remove":if(!i)return delete n[s.name],a;var u={};return t.each(i.split(/\s/),function(t,e){u[e]=a[e],delete a[e]}),u}}var o=t.validator.normalizeRules(t.extend({},t.validator.classRules(s),t.validator.attributeRules(s),t.validator.dataRules(s),t.validator.staticRules(s)),s);if(o.required){var l=o.required;delete o.required,o=t.extend({required:l},o)}return o}}),t.extend(t.expr[":"],{blank:function(e){return!t.trim(""+t(e).val())},filled:function(e){return!!t.trim(""+t(e).val())},unchecked:function(e){return!t(e).prop("checked")}}),t.validator=function(e,i){this.settings=t.extend(!0,{},t.validator.defaults,e),this.currentForm=i,this.init()},t.validator.format=function(e,i){return 1===arguments.length?function(){var i=t.makeArray(arguments);return i.unshift(e),t.validator.format.apply(this,i)}:(arguments.length>2&&i.constructor!==Array&&(i=t.makeArray(arguments).slice(1)),i.constructor!==Array&&(i=[i]),t.each(i,function(t,i){e=e.replace(RegExp("\\{"+t+"\\}","g"),function(){return i})}),e)},t.extend(t.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",validClass:"valid",errorElement:"label",focusInvalid:!0,errorContainer:t([]),errorLabelContainer:t([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(t){this.lastActive=t,this.settings.focusCleanup&&!this.blockFocusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,t,this.settings.errorClass,this.settings.validClass),this.addWrapper(this.errorsFor(t)).hide())},onfocusout:function(t){this.checkable(t)||!(t.name in this.submitted)&&this.optional(t)||this.element(t)},onkeyup:function(t,e){(9!==e.which||""!==this.elementValue(t))&&(t.name in this.submitted||t===this.lastElement)&&this.element(t)},onclick:function(t){t.name in this.submitted?this.element(t):t.parentNode.name in this.submitted&&this.element(t.parentNode)},highlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).addClass(i).removeClass(s):t(e).addClass(i).removeClass(s)},unhighlight:function(e,i,s){"radio"===e.type?this.findByName(e.name).removeClass(i).addClass(s):t(e).removeClass(i).addClass(s)}},setDefaults:function(e){t.extend(t.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",creditcard:"Please enter a valid credit card number.",equalTo:"Please enter the same value again.",maxlength:t.validator.format("Please enter no more than {0} characters."),minlength:t.validator.format("Please enter at least {0} characters."),rangelength:t.validator.format("Please enter a value between {0} and {1} characters long."),range:t.validator.format("Please enter a value between {0} and {1}."),max:t.validator.format("Please enter a value less than or equal to {0}."),min:t.validator.format("Please enter a value greater than or equal to {0}.")},autoCreateRanges:!1,prototype:{init:function(){function e(e){var i=t.data(this[0].form,"validator"),s="on"+e.type.replace(/^validate/,"");i.settings[s]&&i.settings[s].call(i,this[0],e)}this.labelContainer=t(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||t(this.currentForm),this.containers=t(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var i=this.groups={};t.each(this.settings.groups,function(e,s){"string"==typeof s&&(s=s.split(/\s/)),t.each(s,function(t,s){i[s]=e})});var s=this.settings.rules;t.each(s,function(e,i){s[e]=t.validator.normalizeRule(i)}),t(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'] ,[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'] ","focusin focusout keyup",e).validateDelegate("[type='radio'], [type='checkbox'], select, option","click",e),this.settings.invalidHandler&&t(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),t.extend(this.submitted,this.errorMap),this.invalid=t.extend({},this.errorMap),this.valid()||t(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var t=0,e=this.currentElements=this.elements();e[t];t++)this.check(e[t]);return this.valid()},element:function(e){e=this.validationTargetFor(this.clean(e)),this.lastElement=e,this.prepareElement(e),this.currentElements=t(e);var i=this.check(e)!==!1;return i?delete this.invalid[e.name]:this.invalid[e.name]=!0,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),i},showErrors:function(e){if(e){t.extend(this.errorMap,e),this.errorList=[];for(var i in e)this.errorList.push({message:e[i],element:this.findByName(i)[0]});this.successList=t.grep(this.successList,function(t){return!(t.name in e)})}this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){t.fn.resetForm&&t(this.currentForm).resetForm(),this.submitted={},this.lastElement=null,this.prepareForm(),this.hideErrors(),this.elements().removeClass(this.settings.errorClass).removeData("previousValue")},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(t){var e=0;for(var i in t)e++;return e},hideErrors:function(){this.addWrapper(this.toHide).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{t(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin")}catch(e){}},findLastActive:function(){var e=this.lastActive;return e&&1===t.grep(this.errorList,function(t){return t.element.name===e.name}).length&&e},elements:function(){var e=this,i={};return t(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image").not(this.settings.ignore).filter(function(){return!this.name&&e.settings.debug&&window.console&&console.error("%o has no name assigned",this),this.name in i||!e.objectLength(t(this).rules())?!1:(i[this.name]=!0,!0)})},clean:function(e){return t(e)[0]},errors:function(){var e=this.settings.errorClass.replace(" ",".");return t(this.settings.errorElement+"."+e,this.errorContext)},reset:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=t([]),this.toHide=t([]),this.currentElements=t([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(t){this.reset(),this.toHide=this.errorsFor(t)},elementValue:function(e){var i=t(e).attr("type"),s=t(e).val();return"radio"===i||"checkbox"===i?t("input[name='"+t(e).attr("name")+"']:checked").val():"string"==typeof s?s.replace(/\r/g,""):s},check:function(e){e=this.validationTargetFor(this.clean(e));var i,s=t(e).rules(),r=!1,n=this.elementValue(e);for(var a in s){var u={method:a,parameters:s[a]};try{if(i=t.validator.methods[a].call(this,n,e,u.parameters),"dependency-mismatch"===i){r=!0;continue}if(r=!1,"pending"===i)return this.toHide=this.toHide.not(this.errorsFor(e)),void 0;if(!i)return this.formatAndAdd(e,u),!1}catch(o){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+e.id+", check the '"+u.method+"' method.",o),o}}return r?void 0:(this.objectLength(s)&&this.successList.push(e),!0)},customDataMessage:function(e,i){return t(e).data("msg-"+i.toLowerCase())||e.attributes&&t(e).attr("data-msg-"+i.toLowerCase())},customMessage:function(t,e){var i=this.settings.messages[t];return i&&(i.constructor===String?i:i[e])},findDefined:function(){for(var t=0;arguments.length>t;t++)if(void 0!==arguments[t])return arguments[t];return void 0},defaultMessage:function(e,i){return this.findDefined(this.customMessage(e.name,i),this.customDataMessage(e,i),!this.settings.ignoreTitle&&e.title||void 0,t.validator.messages[i],"<strong>Warning: No message defined for "+e.name+"</strong>")},formatAndAdd:function(e,i){var s=this.defaultMessage(e,i.method),r=/\$?\{(\d+)\}/g;"function"==typeof s?s=s.call(this,i.parameters,e):r.test(s)&&(s=t.validator.format(s.replace(r,"{$1}"),i.parameters)),this.errorList.push({message:s,element:e}),this.errorMap[e.name]=s,this.submitted[e.name]=s},addWrapper:function(t){return this.settings.wrapper&&(t=t.add(t.parent(this.settings.wrapper))),t},defaultShowErrors:function(){var t,e;for(t=0;this.errorList[t];t++){var i=this.errorList[t];this.settings.highlight&&this.settings.highlight.call(this,i.element,this.settings.errorClass,this.settings.validClass),this.showLabel(i.element,i.message)}if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(t=0;this.successList[t];t++)this.showLabel(this.successList[t]);if(this.settings.unhighlight)for(t=0,e=this.validElements();e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return t(this.errorList).map(function(){return this.element})},showLabel:function(e,i){var s=this.errorsFor(e);s.length?(s.removeClass(this.settings.validClass).addClass(this.settings.errorClass),s.html(i)):(s=t("<"+this.settings.errorElement+">").attr("for",this.idOrName(e)).addClass(this.settings.errorClass).html(i||""),this.settings.wrapper&&(s=s.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.append(s).length||(this.settings.errorPlacement?this.settings.errorPlacement(s,t(e)):s.insertAfter(e))),!i&&this.settings.success&&(s.text(""),"string"==typeof this.settings.success?s.addClass(this.settings.success):this.settings.success(s,e)),this.toShow=this.toShow.add(s)},errorsFor:function(e){var i=this.idOrName(e);return this.errors().filter(function(){return t(this).attr("for")===i})},idOrName:function(t){return this.groups[t.name]||(this.checkable(t)?t.name:t.id||t.name)},validationTargetFor:function(t){return this.checkable(t)&&(t=this.findByName(t.name).not(this.settings.ignore)[0]),t},checkable:function(t){return/radio|checkbox/i.test(t.type)},findByName:function(e){return t(this.currentForm).find("[name='"+e+"']")},getLength:function(e,i){switch(i.nodeName.toLowerCase()){case"select":return t("option:selected",i).length;case"input":if(this.checkable(i))return this.findByName(i.name).filter(":checked").length}return e.length},depend:function(t,e){return this.dependTypes[typeof t]?this.dependTypes[typeof t](t,e):!0},dependTypes:{"boolean":function(t){return t},string:function(e,i){return!!t(e,i.form).length},"function":function(t,e){return t(e)}},optional:function(e){var i=this.elementValue(e);return!t.validator.methods.required.call(this,i,e)&&"dependency-mismatch"},startRequest:function(t){this.pending[t.name]||(this.pendingRequest++,this.pending[t.name]=!0)},stopRequest:function(e,i){this.pendingRequest--,0>this.pendingRequest&&(this.pendingRequest=0),delete this.pending[e.name],i&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(t(this.currentForm).submit(),this.formSubmitted=!1):!i&&0===this.pendingRequest&&this.formSubmitted&&(t(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e){return t.data(e,"previousValue")||t.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,"remote")})}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,i){e.constructor===String?this.classRuleSettings[e]=i:t.extend(this.classRuleSettings,e)},classRules:function(e){var i={},s=t(e).attr("class");return s&&t.each(s.split(" "),function(){this in t.validator.classRuleSettings&&t.extend(i,t.validator.classRuleSettings[this])}),i},attributeRules:function(e){var i={},s=t(e),r=s[0].getAttribute("type");for(var n in t.validator.methods){var a;"required"===n?(a=s.get(0).getAttribute(n),""===a&&(a=!0),a=!!a):a=s.attr(n),/min|max/.test(n)&&(null===r||/number|range|text/.test(r))&&(a=Number(a)),a?i[n]=a:r===n&&"range"!==r&&(i[n]=!0)}return i.maxlength&&/-1|2147483647|524288/.test(i.maxlength)&&delete i.maxlength,i},dataRules:function(e){var i,s,r={},n=t(e);for(i in t.validator.methods)s=n.data("rule-"+i.toLowerCase()),void 0!==s&&(r[i]=s);return r},staticRules:function(e){var i={},s=t.data(e.form,"validator");return s.settings.rules&&(i=t.validator.normalizeRule(s.settings.rules[e.name])||{}),i},normalizeRules:function(e,i){return t.each(e,function(s,r){if(r===!1)return delete e[s],void 0;if(r.param||r.depends){var n=!0;switch(typeof r.depends){case"string":n=!!t(r.depends,i.form).length;break;case"function":n=r.depends.call(i,i)}n?e[s]=void 0!==r.param?r.param:!0:delete e[s]}}),t.each(e,function(s,r){e[s]=t.isFunction(r)?r(i):r}),t.each(["minlength","maxlength"],function(){e[this]&&(e[this]=Number(e[this]))}),t.each(["rangelength","range"],function(){var i;e[this]&&(t.isArray(e[this])?e[this]=[Number(e[this][0]),Number(e[this][1])]:"string"==typeof e[this]&&(i=e[this].split(/[\s,]+/),e[this]=[Number(i[0]),Number(i[1])]))}),t.validator.autoCreateRanges&&(e.min&&e.max&&(e.range=[e.min,e.max],delete e.min,delete e.max),e.minlength&&e.maxlength&&(e.rangelength=[e.minlength,e.maxlength],delete e.minlength,delete e.maxlength)),e},normalizeRule:function(e){if("string"==typeof e){var i={};t.each(e.split(/\s/),function(){i[this]=!0}),e=i}return e},addMethod:function(e,i,s){t.validator.methods[e]=i,t.validator.messages[e]=void 0!==s?s:t.validator.messages[e],3>i.length&&t.validator.addClassRules(e,t.validator.normalizeRule(e))},methods:{required:function(e,i,s){if(!this.depend(s,i))return"dependency-mismatch";if("select"===i.nodeName.toLowerCase()){var r=t(i).val();return r&&r.length>0}return this.checkable(i)?this.getLength(e,i)>0:t.trim(e).length>0},email:function(t,e){return this.optional(e)||/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(t)},url:function(t,e){return this.optional(e)||/^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(t)},date:function(t,e){return this.optional(e)||!/Invalid|NaN/.test(""+new Date(t))},dateISO:function(t,e){return this.optional(e)||/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(t)},number:function(t,e){return this.optional(e)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(t)},digits:function(t,e){return this.optional(e)||/^\d+$/.test(t)},creditcard:function(t,e){if(this.optional(e))return"dependency-mismatch";if(/[^0-9 \-]+/.test(t))return!1;var i=0,s=0,r=!1;t=t.replace(/\D/g,"");for(var n=t.length-1;n>=0;n--){var a=t.charAt(n);s=parseInt(a,10),r&&(s*=2)>9&&(s-=9),i+=s,r=!r}return 0===i%10},minlength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(t.trim(e),i);return this.optional(i)||r>=s},maxlength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(t.trim(e),i);return this.optional(i)||s>=r},rangelength:function(e,i,s){var r=t.isArray(e)?e.length:this.getLength(t.trim(e),i);return this.optional(i)||r>=s[0]&&s[1]>=r},min:function(t,e,i){return this.optional(e)||t>=i},max:function(t,e,i){return this.optional(e)||i>=t},range:function(t,e,i){return this.optional(e)||t>=i[0]&&i[1]>=t},equalTo:function(e,i,s){var r=t(s);return this.settings.onfocusout&&r.unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){t(i).valid()}),e===r.val()},remote:function(e,i,s){if(this.optional(i))return"dependency-mismatch";var r=this.previousValue(i);if(this.settings.messages[i.name]||(this.settings.messages[i.name]={}),r.originalMessage=this.settings.messages[i.name].remote,this.settings.messages[i.name].remote=r.message,s="string"==typeof s&&{url:s}||s,r.old===e)return r.valid;r.old=e;var n=this;this.startRequest(i);var a={};return a[i.name]=e,t.ajax(t.extend(!0,{url:s,mode:"abort",port:"validate"+i.name,dataType:"json",data:a,success:function(s){n.settings.messages[i.name].remote=r.originalMessage;var a=s===!0||"true"===s;if(a){var u=n.formSubmitted;n.prepareElement(i),n.formSubmitted=u,n.successList.push(i),delete n.invalid[i.name],n.showErrors()}else{var o={},l=s||n.defaultMessage(i,"remote");o[i.name]=r.message=t.isFunction(l)?l(e):l,n.invalid[i.name]=!0,n.showErrors(o)}r.valid=a,n.stopRequest(i,a)}},s)),"pending"}}}),t.format=t.validator.format})(jQuery),function(t){var e={};if(t.ajaxPrefilter)t.ajaxPrefilter(function(t,i,s){var r=t.port;"abort"===t.mode&&(e[r]&&e[r].abort(),e[r]=s)});else{var i=t.ajax;t.ajax=function(s){var r=("mode"in s?s:t.ajaxSettings).mode,n=("port"in s?s:t.ajaxSettings).port;return"abort"===r?(e[n]&&e[n].abort(),e[n]=i.apply(this,arguments),e[n]):i.apply(this,arguments)}}}(jQuery),function(t){t.extend(t.fn,{validateDelegate:function(e,i,s){return this.bind(i,function(i){var r=t(i.target);return r.is(e)?s.apply(r,arguments):void 0})}})}(jQuery);
;/* jQuery.twinkle 0.8.0 - http://larsjung.de/jquery-twinkle/ */
!function(){"use strict";function t(t,e,n,i,o){this.offset={left:t,top:e},this.element=n,this.position={left:i,top:o}}function e(){var e={};this.add=function(t){return e[t.id]||(e[t.id]=t),this},this.remove=function(t){return e[t]?delete e[t]:t.id&&e[t.id]&&delete e[t.id],this},this.twinkle=function(t,o){var r=n.extend({},i,o),a=e[r.effect];return a&&(t.element=t.element||"body",a.run(t,r.effectOptions,function(){n.isFunction(r.callback)&&r.callback()})),this},this.stop=function(t,i){var r=n.extend({},o,i),a=e[r.effect];return a&&(t.element=t.element||"body",a.stop(t,r.effectOptions,r.callback)),this},this.twinkleAtElement=function(e,o){var r=n.extend({},i,o),a=n(e),s=a.offset(),u=a.position(),c=a.outerWidth(!0),l=a.outerHeight(!0),d=s.left+c*r.widthRatio,f=s.top+l*r.heightRatio,h=u.left+c*r.widthRatio,p=u.top+l*r.heightRatio;return this.twinkle(new t(d,f,e,h,p),o)},this.twinkleAtElements=function(t,e){var o=this,r=n.extend({},i,e),a=r.delay,s=n(t),u=s.size();return s.each(function(t){var i=this,s=n.extend({},e);t!==u-1&&delete s.callback,setTimeout(function(){o.twinkleAtElement(i,s)},a),a+=r.gap}),this},this.stopAtElement=function(e,o){var r=n.extend({},i,o),a=n(e),s=a.offset(),u=a.position(),c=a.outerWidth(!0),l=a.outerHeight(!0),d=s.left+c*r.widthRatio,f=s.top+l*r.heightRatio,h=u.left+c*r.widthRatio,p=u.top+l*r.heightRatio;return this.twinkle(new t(d,f,e,h,p),o)},this.stopAtElements=function(t,e){var i=this,r=n.extend({},o,e),a=(r.delay,n(t)),s=a.size();return a.each(function(t){var o=this,r=n.extend({},e);t!==s-1&&delete r.callback,i.stopAtElement(o,r)}),this}}var n=jQuery,i={widthRatio:.5,heightRatio:.5,delay:0,gap:0,effect:"splash",effectOptions:void 0,callback:void 0},o={id:void 0,effectOptions:void 0,callback:void 0},r=function(t,e){var n=[].slice,i=jQuery,o=i.extend,r=i.isFunction,a=o({},e),s=function(e,n,o,a){return o=r(o)?o.apply(e,n):o,r(a[o])?a[o].apply(e,n):void i.error('Method "'+o+'" does not exist on jQuery.'+t)},u=function(){return s(this,n.call(arguments),a.defaultStatic,u)},c=function(t){return r(c[t])?c[t].apply(this,n.call(arguments,1)):s(this,n.call(arguments),a.defaultMethod,c)},l=function(t){t&&(o(u,t.statics),o(c,t.methods)),u.modplug=l};l.prev={statics:i[t],methods:i.fn[t]},l(e),i[t]=u,i.fn[t]=c},a=new e;r("twinkle",{statics:{twinkle:function(e,n,i,o){return a.twinkle(new t(0,0,e,n,i),o),this},add:function(t){return a.add(t),this},remove:function(t){return a.remove(t),this}},methods:{twinkle:function(t){return a.twinkleAtElements(this,t),this},stop:function(t){return a.stopAtElements(this,t),this}},defaultStatic:"twinkle",defaultMethod:"twinkle"})}(),function(){"use strict";function t(t){return t.stopImmediatePropagation(),t.preventDefault(),!1}function e(e,n,i,o){function a(){l.remove(),o instanceof Function&&o()}function s(){l.animate({left:n.position.left-i.radius,top:n.position.top-i.radius,width:2*i.radius,height:2*i.radius,opacity:0},.5*i.duration,"linear",a)}function u(){l=r("<div />").css(e).bind("click dblclick mousedown mouseenter mouseover mousemove",t),r(n.element).after(l),l.animate({left:n.position.left-.5*i.radius,top:n.position.top-.5*i.radius,width:i.radius,height:i.radius,opacity:1},.5*i.duration,"linear",s)}function c(){}var l;return u(),{stop:c}}function n(){this.id="splash-css",this.run=function(t,n,i){var o=r.extend({},a,n),s={position:"absolute",zIndex:1e3,display:"block",borderRadius:o.radius,backgroundColor:o.color,boxShadow:"0 0 30px "+o.color,left:t.position.left,top:t.position.top,width:0,height:0,opacity:.4};e(s,t,o,i)}}function i(){this.id="drops-css",this.run=function(t,n,i){function o(n,i){setTimeout(function(){e(c,t,u,i)},n)}var a,u=r.extend({},s,n),c={position:"absolute",zIndex:1e3,display:"block",borderRadius:u.radius,border:u.width+"px solid "+u.color,left:t.position.left,top:t.position.top,width:0,height:0,opacity:.4},l=0;for(a=0;a<u.count;a+=1)o(l,a===u.count-1?i:void 0),l+=u.delay}}function o(){var t=new i;this.id="drop-css",this.run=function(e,n,i){t.run(e,r.extend(n,{count:1}),i)}}var r=jQuery,a={color:"rgba(255,0,0,0.5)",radius:300,duration:1e3},s={color:"rgba(255,0,0,0.5)",radius:300,duration:1e3,width:2,count:3,delay:300};r.twinkle.add(new n).add(new o).add(new i)}(),function(){"use strict";var t={};!function(){function e(t){function e(t){var e,n=1/(t.length-1),i=[];for(e=0;e<t.length;e+=1)i.push({x:n*e,y:t[e]});return i}function n(t,e,n){var i=(e.y-t.y)/(e.x-t.x),o=t.y+i*(n-t.x);return o}function i(t){var e,n,i;for(e=1;e<o.length;e+=1)if(n=o[e-1],i=o[e],t>=n.x&&t<=i.x)return[n,i];return void 0}var o;o=e(t),this.get=function(t){var e;return t=Math.max(0,Math.min(1,t)),e=i(t),n(e[0],e[1],t)}}function n(t,e,n){return e=e||1,n=n||0,t=(t-n)/e,t>=0&&1>=t?t:void 0}t.Interpolator=e,t.Interpolator.scale=n}(),function(){function e(t){var e=t.getContext();e.beginPath(),this.fill=function(n){return e.fillStyle=n,e.fill(),t},this.stroke=function(n,i){return e.lineWidth=n,e.strokeStyle=i,e.stroke(),t},this.draw=function(e,n,i){return this.fill(i),this.stroke(e,n),t},this.circle=function(t,n,i){return e.arc(t,n,i,0,2*Math.PI,!1),this}}function n(t){if(!t||!t.canvas)return void 0;if(!(this instanceof n))return new n(t);var o=i(t.canvas).width(),r=i(t.canvas).height();this.getContext=function(){return t},this.getWidth=function(){return o},this.getHeight=function(){return r},this.clear=function(){return this.resetTransform(),t.clearRect(0,0,o,r),this},this.resetTransform=function(){return t.setTransform(1,0,0,1,0,0),this},this.translate=function(e,n){return t.translate(e,n),this},this.rotate=function(e){return t.rotate(Math.PI*e/180),this},this.opacity=function(e){return t.globalAlpha=e,this},this.path=function(){return new e(this)}}var i=jQuery;t.Ctx=n}(),function(){function e(e,n,i,o,r){if(!(this instanceof t.CanvasEffect))return new t.CanvasEffect(e,n,i,o,r);var a=e.element,s=e.position.left,u=e.position.top,c={position:"absolute",zIndex:1e3,display:"block",left:s-.5*n,top:u-.5*i,width:n,height:i};this.run=function(e,s){function u(t){setTimeout(function(){h&&o({ctx:h,frac:t,millis:e*t})},e*t)}function l(){f.remove(),f=void 0,h=void 0,r instanceof Function&&r()}function d(t){return t.stopImmediatePropagation(),t.preventDefault(),!1}var f,h,p,v=e/1e3*s,w=1/v;for(f=jQuery("<canvas />").attr("width",n).attr("height",i).css(c),jQuery(a).after(f),f.bind("click dblclick mousedown mouseenter mouseover mousemove",d),h=new t.Ctx(f.get(0).getContext("2d")),p=0;v>=p;p+=1)u(p*w);setTimeout(l,e)}}t.CanvasEffect=e}(),function(){function e(){this.id="splash",this.run=function(e,o,r){function a(t){var e=l.get(t.frac),n=c.get(t.frac),i=t.ctx;i.clear().opacity(n).path().circle(.5*i.getWidth(),.5*i.getHeight(),e).fill(s.color)}var s=n.extend({},i,o),u=2*s.radius,c=new t.Interpolator([.4,1,0]),l=new t.Interpolator([0,s.radius]);new t.CanvasEffect(e,u,u,a,r).run(s.duration,25)}}var n=jQuery,i={color:"rgba(255,0,0,0.5)",radius:300,duration:1e3};n.twinkle.add(new e)}(),function(){function e(){this.id="drop",this.run=function(e,o,r){function a(t){var e=l.get(t.frac),n=c.get(t.frac),i=t.ctx;i.clear().opacity(n).path().circle(.5*i.getWidth(),.5*i.getHeight(),e).stroke(s.width,s.color)}var s=n.extend({},i,o),u=2*s.radius,c=new t.Interpolator([.4,1,0]),l=new t.Interpolator([0,s.radius]);new t.CanvasEffect(e,u,u,a,r).run(s.duration,25)}}var n=jQuery,i={color:"rgba(255,0,0,0.5)",radius:300,duration:1e3,width:2};n.twinkle.add(new e)}(),function(){function e(){this.id="drops",this.run=function(e,o,r){function a(e){var n,i,o,r,a=e.ctx,u=a.getWidth(),h=a.getHeight();for(a.clear(),n=0;n<s.count;n+=1)i=t.Interpolator.scale(e.frac,d,f*n),void 0!==i&&(o=l.get(i),r=c.get(i),a.opacity(r).path().circle(.5*u,.5*h,o).stroke(s.width,s.color))}var s=n.extend({},i,o),u=2*s.radius,c=new t.Interpolator([.4,1,0]),l=new t.Interpolator([0,s.radius]),d=(s.duration-(s.count-1)*s.delay)/s.duration,f=s.delay/s.duration;new t.CanvasEffect(e,u,u,a,r).run(s.duration,25)}}var n=jQuery,i={color:"rgba(255,0,0,0.5)",radius:300,duration:1e3,width:2,count:3,delay:100};n.twinkle.add(new e)}(),function(){function e(){this.id="pulse",this.run=function(e,o,r){function a(t){var e=l.get(t.frac),n=c.get(t.frac),i=t.ctx;i.clear().opacity(n).path().circle(.5*i.getWidth(),.5*i.getHeight(),e).fill(s.color)}var s=n.extend({},i,o),u=2*s.radius,c=new t.Interpolator([0,1,.6,1,.6,1,0]),l=new t.Interpolator([0,s.radius,.6*s.radius,s.radius,.6*s.radius,s.radius,0]);new t.CanvasEffect(e,u,u,a,r).run(s.duration,25)}}var n=jQuery,i={color:"rgba(255,0,0,0.5)",radius:100,duration:3e3};n.twinkle.add(new e)}(),function(){function e(){this.id="orbit",this.run=function(e,o,r){function a(t){var e,n,i,o,r=d.get(t.frac),a=c.get(t.frac),u=2*Math.PI*s.circulations*t.frac,l=t.ctx;for(l.clear().opacity(a).translate(.5*l.getWidth(),.5*l.getHeight()),e=l.path(),n=0;n<s.satellites;n+=1)u+=2*Math.PI/s.satellites,i=Math.cos(u)*r,o=Math.sin(u)*r,l.getContext().moveTo(i,o),e.circle(i,o,s.satellitesRadius);e.fill(s.color)}var s=n.extend({},i,o),u=2*s.radius,c=new t.Interpolator([.4,1,1,.4]),l=s.radius-s.satellitesRadius,d=new t.Interpolator([0,l,l,0]);new t.CanvasEffect(e,u,u,a,r).run(s.duration,25)}}var n=jQuery,i={color:"rgba(255,0,0,0.5)",radius:100,duration:3e3,satellites:10,satellitesRadius:10,circulations:1.5};n.twinkle.add(new e)}()}();
;/*!
 * Bootstrap v3.3.5 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

/*!
 * Generated using the Bootstrap Customizer (http://getbootstrap.com/customize/?id=5a882cdd6923a8bf8b69)
 * Config saved to config.json and https://gist.github.com/5a882cdd6923a8bf8b69
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.5",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t(s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.5",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target);o.hasClass("btn")||(o=o.closest(".btn")),e.call(o,"toggle"),t(i.target).is('input[type="radio"]')||t(i.target).is('input[type="checkbox"]')||i.preventDefault()}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.5",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e),o="prev"==t&&0===i||"next"==t&&i==this.$items.length-1;if(o&&!this.options.wrap)return e;var n="prev"==t?-1:1,s=(i+n)%this.$items.length;return this.$items.eq(s)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){return this.sliding?void 0:this.slide("next")},i.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),+function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger("hidden.bs.dropdown",s))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.5",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger("shown.bs.dropdown",r)}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=" li:not(.disabled):visible a",l=n.find(".dropdown-menu"+r);if(l.length){var h=l.index(i.target);38==i.which&&h>0&&h--,40==i.which&&h<l.length-1&&h++,~h||(h=0),l.eq(h).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.5",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){return this.ignoreBackdropClick?void(this.ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide()))},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;(n||!/destroy|hide/.test(e))&&(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.5",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),i.isInStateTrue()?void 0:(clearTimeout(i.timeout),i.hoverState="out",i.options.delay&&i.options.delay.hide?void(i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)):i.hide())},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);return this.$element.trigger(a),a.isDefaultPrevented()?void 0:(s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this)},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=o?{top:0,left:0}:e.offset(),a={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},r=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,a,r,s)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t,e=this.$element,i=this.options;return t=e.attr("data-original-title")||("function"==typeof i.title?i.title.call(e[0]):i.title)},i.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&(i=t(e.currentTarget).data("bs."+this.type),i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;(n||!/destroy|hide/.test(e))&&(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.5",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.5",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.5",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return i>n?"top":!1;if("bottom"==this.affixed)return null!=i?n+this.unpin<=s.top?!1:"bottom":t-o>=n+a?!1:"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&i>=n?"top":null!=o&&l+h>=t-o?"bottom":!1},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery),+function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.5",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"),e&&e.transitioning))){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l]);
}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};return t.support.transition?void this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION):n.call(this)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),+function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.5",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery);
;;
(function ()
{


	//-> Ensure that we have a usable console object so that we don't crash finicky browsers.
	if (!window.console)
	{
		var names = [
			    "log", "debug", "info", "warn", "error",
			    "assert", "dir", "dirxml", "group", "groupEnd", "time",
			    "timeEnd", "count", "trace", "profile", "profileEnd"
		    ],
		    i,
		    l = names.length,
		    noOp = function () {};
		window.console = {};
		for (i = 0; i < l; i = i + 1)
		{
			window.console[names[i]] = noOp;
		}
	}

	window._w = {

		itemId: null,
		itemData: null,
		formMeta: null,
		apeLoaded: false,
		apeLive: false,
		altAlertBox: false,
		alertTimeout: false,
		alertTimeMsg: false,
		formSize: '',
		formStyle: '',
		alertType: '',
		singleSearchMap: {},
		contextVisible: false,
		jqXHR: {},
		gridSearchOverride: {},
		storeDataCache: {},
		storeDataTerm: '',
		userDataCache: {},
		userDataTerm: '',
		dealGenUpdate: {},
		dguSection: {},

		/**
		 * Initialize generic modal container.
		 */
		init: function ()
		{
			App.Container.register(
				// containerId
				'frmModal',
				// contentTarget
				'modalFormContent',
				// setTitle
				function (title)
				{
					$('#modalFormTitle').html(title);
				},
				// show
				function (options)
				{
					var con = App.Container.containers.frmModal;
					if ('' != con.formSize)
					{
						$('#frmModal').removeClass(con.formSize);
					}
					if ('' != con.formStyle)
					{
						$('#frmModal').removeClass(con.formStyle);
					}
					if (options.size)
					{
						con.formSize = 'modal-' + options.size;
						$('#frmModal').addClass(con.formSize);
					}
					if (options.style)
					{
						con.formStyle = options.style;
						$('#frmModal').addClass(con.formStyle);
					}
					$('#frmModal').modal({
						backdrop: 'static',
						show: true
					});
				},
				// hide
				function ()
				{
					$('#frmModal').modal('hide');
					$('#modalFormContent').html('Loading...');
				},
				// params
				{
					formSize: '',
					formStyle: ''
				}
			);
			App.Container.register(
				// containerId
				'frmHeader',
				// contentTarget
				'headerForm',
				// setTitle
				function (title)
				{
					// Nothing to do
				},
				// show
				function (options)
				{
					$('#headerFormContent').show();
				},
				// hide
				function ()
				{
					$('#headerFormContent').hide();
					$('#modalFormContent').html('Loading...');
				},
				// params
				{
					formSize: '',
					formStyle: ''
				}
			);
		},


		/**
		 * Generic notification functionality.
		 */
		alert: function (title, notification, type, permanent)
		{
			if (!_w.altAlertBox)
			{
				// Enforce using page specific alert containers.
				return false;
			}
			if (_w.alertTimeout)
			{
				_w.alertTimeMsg = {
					title: title,
					notification: notification,
					type: type,
					permanent: permanent
				};
				return;
			}
			if (!permanent)
			{
				_w.alertTimeout = true;
			}
			var id = _w.altAlertBox
				? _w.altAlertBox
				: 'alertPrimary';
			$('#' + id)
				.removeClass('alert-danger')
				.removeClass('alert-success')
				.removeClass('alert-info')
				.removeClass('alert-warning');
			type = type
				? type
				: 'info';
			_w.alertType = 'alert-' + type;
			$('#' + id).addClass(_w.alertType);
			$('#' + id).html(
				(title
					? '<strong>' + title + ':</strong> '
					: '')
				+ notification);
			$('#' + id).show(300);
			if (!permanent)
			{
				setTimeout($.proxy(function (id)
				{
					_w.alertTimeout = false;
					if (_w.alertTimeMsg)
					{
						_w.alert(
							_w.alertTimeMsg.title,
							_w.alertTimeMsg.notification,
							_w.alertTimeMsg.type,
							_w.alertTimeMsg.permanent
						);
						_w.alertTimeMsg = false;
					}
					else
					{
						$('#' + id).hide(300);
					}
				}, this, id), 4000);
			}
		},

		notify: function (title, content)
		{
			$('#modalNotifyTitle').html(title);
			$('#modalNotifyContent').html(content);
			$('#modalNotify').modal('show');
		},

		quickConfirm: function (id, yesCallback, noCallback)
		{
			var element = 'span.confirm[data-id="' + id + '"]';
			$(element).popover({
				html: true,
				placement: 'left',
				title: 'Are you sure?',
				content: App.Theme.Grid.ConfirmationContent
			});
			$(element).popover('show');
			$('#actionConfirmation').click($.proxy(function (element, yesCallback)
			{
				$('#actionConfirmation').unbind('click');
				$('#actionDecline').unbind('click');
				$(element).popover('hide');
				$(element).popover('destroy');
				if (undefined != yesCallback)
				{
					yesCallback();
				}
			}, this, element, yesCallback));
			$('#actionDecline').click($.proxy(function (element, noCallback)
			{
				$('#actionConfirmation').unbind('click');
				$('#actionDecline').unbind('click');
				$(element).popover('hide');
				$(element).popover('destroy');
				if (undefined != noCallback)
				{
					noCallback();
				}
			}, this, element, noCallback));
		},

		confirm: function (question, yesCallback, noCallback)
		{
			$('#modalConfirmContent').html(question);
			$('#modalConfirm').modal({
				backdrop: 'static',
				show: true
			});
			if (undefined != yesCallback)
			{
				$('#btnConfirmYes').click($.proxy(function (callback)
				{
					$('#btnConfirmYes').unbind('click');
					$('#btnConfirmNo').unbind('click');
					callback();
				}, this, yesCallback));
			}
			if (undefined != noCallback)
			{
				$('#btnConfirmNo').click($.proxy(function (callback)
				{
					$('#btnConfirmYes').unbind('click');
					$('#btnConfirmNo').unbind('click');
					callback();
				}, this, noCallback));
			}
		},


		/**
		 * Usefull delay functionality for single-search usage.
		 */
		delay: (function ()
		{
			var timer = 0;
			return function (callback, ms)
			{
				clearTimeout(timer);
				timer = setTimeout(callback, ms);
			};
		})(),


		/**
		 * Session expiry warning service.
		 */
		sessionUpdate: function ()
		{
			return;
			if (!App.Authenticated)
			{
				return;
			}
			_w.delay(function ()
			{
				App.Authenticated = false;
				App.permissions = {};
				App.companyData = {};
				App.Sudo = {};
				App.userData = {};
				App.API.execTask(
					'logout', 'Profile', 'Logout',
					{}, function ()
					{
						window.location = '/';
					}, function () {}
				);
			}, 1680 * 1000); // 28 Minutes
		},


		/**
		 * Generic error handling functionality.
		 */
		contractErrorHandler: function (result)
		{
			if (App.Config.isDevEnvironment)
			{
				//console.log(result);
			}
			var message = result.StatusReason + "<br/>";
			if ('Invalid contract request. No such contract found for execution.' == result.StatusReason
			    || 'Authentication required for this functionality.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},

		execErrorHandler: function (result)
		{
			var message = result.StatusReason + "<br/>";
			if ('Invalid contract request. No such contract found for execution.' == result.StatusReason
			    || 'Authentication required for this functionality.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			if (result.Messages && result.Messages.Base)
			{
				message += "<br/>";
				for (var ns in result.Messages.Base)
				{
					message += ns + ":<br/>";
					message += result.Messages.Base[ns].join("<br/>");
					message += "<br/>";
				}
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},

		routeErrorHandler: function (result)
		{
			if (App.Config.isDevEnvironment)
			{
				//console.log(result);
			}
			var message = result.StatusReason + "<br/>";
			if ('Invalid route request. No such route found for execution.' == result.StatusReason)
			{
				window.location = '/';
				return;
			}
			_w.notify('Oops', message);
			for (var i in this.buttonRollback)
			{
				$('#' + this.buttonRollback[i]).prop('disabled', false);
			}
		},


		/**
		 * Permissions utility to check for valid permissions.
		 */
		checkPermissions: function (permissions, onFail, onSuccess)
		{
			if (undefined != permissions
			    && 0 < permissions.length)
			{
				if (!App.Authenticated)
				{
					return false;
				}
				for (var i in permissions)
				{
					var perm = permissions[i];
					if (!App.permissions[perm])
					{
						if (onFail)
						{
							onFail();
						}
						return false;
					}
				}
			}
			if (onSuccess)
			{
				onSuccess();
			}
			return true;
		},


		/**
		 * Setup data collection and publication for forms and grids on load.
		 */
		setupContracts: function ()
		{
			for (var form in this.forms)
			{
				if (this.forms[form].ids)
				{
					for (var internalField in this.forms[form].ids)
					{
						var idField = this.forms[form].ids[internalField];
						this[internalField] = this.forms[form].idSource
							? App.Controller.formParams[this.forms[form].idSource][idField]
							: App.Util.getUrlParam(idField);
						if (isNaN(this[internalField]))
						{
							this[internalField] = 0;
						}
					}
					this.newItem = (0 == this.itemId)
						? true
						: false;
					this.haveData = this.newItem
						? true
						: false;
					this.actionContext = this.forms[form].initContext();
				}
			}
			if (this.contracts)
			{
				this.contracts();
			}
			if (this.grids)
			{
				$.proxy(_w.initGrids, this)();
			}
			for (var form in this.forms)
			{
				var chosen = this.forms[form].choose();
				if (!this.forms[form].actions || !this.forms[form].actions[chosen])
				{
					return;
				}
				var action = this.forms[form].actions[chosen];
				var data = this.itemId
					? {id: this.itemId}
					: {};
				var taskAlias = action.taskAlias
					? action.taskAlias()
					: false;
				if (this.forms[form].collect
				    && !this.forms[form].collect.except[chosen]
				    && this.forms[form].collect.execRequired)
				{
					App.API.execTask(
						this.forms[form].collect.taskAlias,
						this.forms[form].workspace,
						this.forms[form].collect.task,
						data,
						$.proxy(_w.formInitData, this, form),
						$.proxy(_w.execErrorHandler, this)
					);
				}
				else if (this.forms[form].collect
				         && !this.forms[form].collect.except[chosen])
				{
					App.API.execTask(
						this.forms[form].collect.taskAlias,
						this.forms[form].workspace,
						this.forms[form].collect.task,
						data,
						$.proxy(_w.formInitData, this, form),
						$.proxy(_w.execErrorHandler, this)
					);
				}
				else
				{
					$.proxy(_w.formInitData, this)(form, null);
				}
			}
		},


		/**
		 * Data-form functionality.
		 */
		formInitData: function (form, response)
		{
			this.haveData = true;
			this.ti.onPublish($.proxy(function (response)
			{
				$.proxy(_w.setupValidators, this)(
					null == response
						? null
						: response.Data
				);
			}, this, response));
			if (null != response)
			{
				$.proxy(_w.populateData, this)(
					form, this.forms[form].collect.assign(response.Data)
				);
			}
		},

		setupValidators: function (record)
		{
			record = record
				? record
				: null;
			for (var form in this.forms)
			{
				var rules = {};
				$.extend(true, rules, this.rules[form]);
				if (null == record)
				{
					// Create action.
					for (var r in rules)
					{
						if (undefined != rules[r].create)
						{
							rules[r] = $.extend({}, true, rules[r], rules[r].create);
							delete rules[r]['create'];
						}
						if (undefined != rules[r].update)
						{
							delete rules[r]['update'];
						}
					}
				}
				else
				{
					// Update action
					for (var r in rules)
					{
						if (undefined != rules[r].create)
						{
							delete rules[r]['create'];
						}
						if (undefined != rules[r].update)
						{
							rules[r] = $.extend({}, true, rules[r], rules[r].update);
							delete rules[r]['update'];
						}
					}
				}
				this.buttonRollback = [];
				for (var action in this.forms[form].actions)
				{
					if (this.forms[form].actions[action].button
					    && this.forms[form].actions[action].enable(record))
					{
						if (_w.checkPermissions(this.forms[form].actions[action].permissions, function () {}))
						{
							$('#' + this.forms[form].actions[action].button.id).show();
							this.buttonRollback.push(this.forms[form].actions[action].button.id);
						}
					}
				}
				this.forms[form].validations = 0;
				$('#' + form).validate({
					rules: rules,
					messages: this.messages[form],
					invalidHandler: $.proxy(function (formName, event, validator)
					{
						var errors = validator.numberOfInvalids();
						if (0 < this.forms[formName].validations && errors)
						{
							var message = errors == 1
								? 'You missed 1 field. It has been highlighted'
								: 'You missed ' + errors + ' fields. They have been highlighted';
							//_w.notify('Validation Errors', message);
						}
						this.forms[formName].validations++;
					}, this, form),
					submitHandler: $.proxy(function (formName)
					{
						var chosen = this.forms[formName].choose();
						if (!this.forms[formName].actions || !this.forms[formName].actions[chosen])
						{
							return;
						}
						var action = this.forms[formName].actions[chosen];
						if (action.postValidate)
						{
							if (!action.postValidate())
							{
								return;
							}
						}
						this.buttonRollback = [];
						if (this.forms[formName].buttons)
						{
							for (var i in this.forms[formName].buttons)
							{
								if (!$('#' + this.forms[formName].buttons[i]).prop('disabled'))
								{
									this.buttonRollback.push(
										this.forms[formName].buttons[i]
									);
									$('#' + this.forms[formName].buttons[i]).prop('disabled', true);
								}
							}
						}
						var data = this.ti.harvest(form);
						if (this.forms[formName].dataTransform)
						{
							data = this.forms[formName].dataTransform(data);
						}
						if (this.forms[formName].preExecute)
						{
							this.forms[formName].preExecute();
						}
						if (action.dataTransform)
						{
							data = action.dataTransform(data);
						}
						if (action.preExecute)
						{
							action.preExecute();
						}
						if (!action.taskAlias)
						{
							if (action.customAction)
							{
								action.customAction(data);
							}
							return;
						}
						var taskAlias = action.taskAlias();
						if (action.task)
						{
							var requestData = this.itemId
								? {id: this.itemId}
								: {};
							App.API.execTask(
								taskAlias,
								this.forms[formName].workspace,
								action.task,
								data,
								action.successHandler
									? $.proxy(action.successHandler, this)
									: $.proxy(App.Controller.closeForm, App.Controller, this.ti.container, 'Success'),
								action.errorHandler
									? $.proxy(action.errorHandler, this)
									: $.proxy(_w.execErrorHandler, this),
								action.method
									? action.method
									: false,
								action.direct
									? action.direct
									: false
							);
						}
					}, this, form)
				});
				try
				{
					this.forms[form].validations = 0;
					$('#' + form).valid();
				}
				catch (err)
				{
				}
				$('label.error').remove();
				$.each($('.error'), function (i, elem)
				{
					$(elem).removeClass('error');
					$(elem).addClass('required');
				});
				$('.valid').removeClass('valid');
				for (var i in this.buttonRollback)
				{
					$('#' + this.buttonRollback[i]).prop('disabled', false);
				}
			}
		},

		populateData: function (formName, data)
		{
			var disable = false;
			if (this.forms[formName].disableFieldsOnValue)
			{
				disable = this.forms[formName].disableFieldsOnValue(data);
			}
			var fields = this.forms[formName].fields;
			for (var elemId in fields)
			{
				var fieldDisable = disable || fields[elemId].disabled
					? true
					: false;
				if (undefined == data[fields[elemId].namespace]
				    || undefined == data[fields[elemId].namespace][fields[elemId].field])
				{
					var value = '';
				}
				else
				{
					var value = data[fields[elemId].namespace][fields[elemId].field];
				}
				this.ti.hydrateParam(elemId, {value: value, disabled: fieldDisable});
			}
			if (this.forms[formName].dataPublished)
			{
				this.forms[formName].dataPublished(data);
			}
		},


		/**
		 * Data-grid functionality.
		 */
		initGrids: function ()
		{
			// Reques grid data.
			this.gridSearchFilter = {};
			for (var gridName in this.grids)
			{
				var grid = this.grids[gridName];
				if (grid.taskAlias && grid.workspace && grid.task)
				{
					_w.gridSearchOverride[gridName] = false;
					this.gridSearchFilter[gridName] = {};
					if (null == App.API.taskContract(grid.taskAlias))
					{
						App.API.getTask(
							grid.taskAlias, grid.workspace, grid.task, null,
							{}, $.proxy(_w.loadGrid, this, gridName), _w.contractErrorHandler
						);
					}
					else
					{
						$.proxy(_w.loadGrid, this)(gridName, null, {}, {});
					}
				}
			}
		},
		publishGrids: function ()
		{
			for (var gridName in this.grids)
			{
				// Setup context search functionality.
				var classes = [];
				for (var i in this.grids[gridName].contexts)
				{
					classes.push('.' + this.grids[gridName].contexts[i]);
				}
				$(classes.join(', ')).keypress($.proxy(function (gridName, evt)
				{
					var charCode = evt.charCode || evt.keyCode;
					if (charCode == 13)
					{
						$.proxy(_w.searchGrid, this)(gridName);
					}
				}, this, gridName));

				// Setup single-search functionality
				if (this.grids[gridName].dataFields.targets.singleSearchFilterId)
				{
					var filterId = this.grids[gridName].dataFields.targets.singleSearchFilterId;
					$('#' + filterId).keyup($.proxy(function (gridName, filterId, event)
					{
						if (event.keyCode == 13)
						{
							// Enter pressed, fast-trac the search.
							_w.delay($.proxy(function ()
							{
								var val = $('#' + filterId).val();
								if (val.length < 3)
								{
									$('#' + filterId).val('');
									val = '';
								}
								$.proxy(_w.singleSearchGrid, this)(gridName, filterId, val);
							}, this, gridName, filterId), 1);
							return false;
						}
						// Search value changed, wait 400ms for next keystroke else run the search.
						_w.delay($.proxy(function ()
						{
							var val = $('#' + filterId).val();
							if (val.length < 3)
							{
								val = '';
							}
							$.proxy(_w.singleSearchGrid, this)(gridName, filterId, val);
						}, this, gridName, filterId), 400);
					}, this, gridName, filterId));
					$('#' + filterId + 'SsForm').submit(function ()
					{
						return false;
					});
				}
			}
		},
		loadGrid: function (gridName, contract, data, options, report)
		{
			// We have a task contract, now we execute to retrieve data.
			if (!this.grids[gridName])
			{
				return;
			}
			if (!data)
			{
				data = {};
			}
			if (!data.Grid)
			{
				data.Grid = {};
			}
			if (!data.Grid.Filter)
			{
				data.Grid.Filter = {};
			}

			var baseFilter = {};
			if (undefined != this.grids[gridName].baseFilter)
			{
				baseFilter = typeof this.grids[gridName].baseFilter === 'function'
					? this.grids[gridName].baseFilter()
					: this.grids[gridName].baseFilter;
			}

			data.Grid.Filter = $.extend(true,
				{},
				baseFilter,
				data.Grid.Filter,
				this.gridSearchFilter[gridName],
				this.grids[gridName].defaultFilter
					? this.grids[gridName].defaultFilter
					: {},
				_w.gridSearchOverride[gridName]
					? _w.gridSearchOverride[gridName]
					: {},
				this.grids[gridName].baseSearch
					? ('function' == typeof this.grids[gridName].baseSearch
					? this.grids[gridName].baseSearch()
					: this.grids[gridName].baseSearch)
					: {}
			);

			// What type of request are we handling?
			if (!report)
			{
				// Regular grid data request.
				App.API.execTask(
					this.grids[gridName].taskAlias, data, options,
					$.proxy(_w.onGridDataReceived, this, gridName), _w.execErrorHandler
				);
			}
			else
			{
				// Excel grid export request.
				App.API.execTask(
					this.grids[gridName].taskAlias, {}, {'ExportToExcel': true},
					function () {}, _w.execErrorHandler,
					'EXPORT', true
				);
			}
		},
		clearSearch: function (gridName)
		{
			// Clear context and column filters.
			App.DataStore.setItem('GridContextClearing:' + gridName, true);
			var grid = this.grids[gridName];
			for (var i in grid.contexts)
			{
				try
				{
					$('.' + grid.contexts[i]).val('');
				}
				catch (err)
				{
				}
			}
			App.DataStore.removeItem('GridContextClearing:' + gridName);
			$.proxy(_w.searchGrid, this)(gridName, true);
		},
		singleSearchGrid: function (gridName, filterId, val)
		{
			// Prepare single search request filter.
			var filter = {
				count: 0,
				filters: {}
			};
			filter = App.DataElement.singleFilter(
				filter,
				val,
				_w.singleSearchMap[filterId]
			);
			this.gridSearchFilter[gridName] = filter.filters;
			var request = {
				"Grid": {
					"Page": 1,
					"Filter": filter.filters
				}
			};
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		searchGrid: function (gridName, resetOrder)
		{
			// Prepare search filters.
			if (undefined == this.grids[gridName]
			    || undefined == gridName)
			{
				//console.log('Cannot locate relevant grid');
				//console.log('gridName');
				//console.log(gridName);
				//console.log('context');
				//console.log(this);
			}
			var filter = {
				count: 0,
				filters: {}
			};
			var fieldMap = this.gridFieldMap[gridName];
			for (var elem in fieldMap)
			{
				filter = App.DataElement.filterIfnotEmpty(filter, elem, fieldMap[elem]);
			}
			var request = {
				"Grid": {
					"Page": 1,
					"Filter": filter.filters
				}
			};
			if (resetOrder && this.grids[gridName] && this.grids[gridName].defaultOrder)
			{
				request.Grid.OrderBy = this.grids[gridName].defaultOrder;
			}
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		refreshGrid: function (gridName, resetOrder)
		{
			// Prepare search filters.
			if (undefined == this.grids[gridName]
			    || undefined == gridName)
			{
				return;
			}
			var filter = {
				count: 0,
				filters: {}
			};
			var fieldMap = this.gridFieldMap[gridName];
			for (var elem in fieldMap)
			{
				filter = App.DataElement.filterIfnotEmpty(filter, elem, fieldMap[elem]);
			}
			var request = {
				"Grid": {
					"Filter": filter.filters
				}
			};
			if (resetOrder && this.grids[gridName] && this.grids[gridName].defaultOrder)
			{
				request.Grid.OrderBy = this.grids[gridName].defaultOrder;
			}
			$.proxy(_w.loadGrid, this)(gridName, null, request, {});
		},
		onGridDataReceived: function (gridName, response)
		{
			// Safety checks.
			if (!this.grids)
			{
				//console.log('Incorrect context passed to onGridDataReceived!');
				//console.log(this);
			}
			if (!this.gridFieldMap)
			{
				//console.log('FieldMap not yet built (onGridDataReceived).')
				//console.log(this);
			}

			// Put up a notice that we be messing with grid html.
			App.DataStore.setItem('GridDataPublishing:' + gridName, true);

			// Populate search filters back into html elements.
			var grid = this.grids[gridName];

			if (grid.onData)
			{
				grid.onData(response.Data.DataSet);
			}
			var fieldMap = this.gridFieldMap[gridName];
			var filters = {};
			for (var elem in fieldMap)
			{
				filters[filters[elem]] = elem;
			}
			if (response.Data.Meta.Filters.singleSearch)
			{
				App.DataElement.populateSingleFilter(
					response.Data.Meta.Filters.singleSearch,
					grid.dataFields.targets.singleSearchFilterId
				);
			}
			else
			{
				App.DataElement.populateFilters(response.Data.Meta.Filters, filters);
			}

			// Prepare the data.
			this.rawData = {};
			this.gridEntryUpdates = {};
			var gridData = [];
			for (var i = 0; i < response.Data.DataSet.length; i++)
			{
				var row = response.Data.DataSet[i];
				var cellData = {};
				for (var f in row)
				{
					row[f] = App.Util.htmlEncode(row[f]);
				}
				for (var field in grid.dataFields.items)
				{
					if (!this.gridFieldPermissions[gridName][field])
					{
						continue
					}
					cellData[field] = grid.dataFields.items[field].getValue(row);
				}
				var rowId = grid.gridDataRow.getRowId
					? grid.gridDataRow.getRowId(cellData)
					: i;
				this.rawData['id:' + rowId] = row;
				this.gridEntryUpdates['id:' + rowId] = {};
				gridData.push($.extend(true, {}, grid.gridDataRow, {
					rowId: rowId,
					items: cellData
				}));
			}

			// Rebuild the list of grid entries.
			this.ti.hydrateParam(grid.repeaterId, {
				items: gridData
			});

			// Rebuild the pager.
			if (grid.pagerId)
			{
				this.ti.hydrateParam(grid.pagerId, response.Data.Meta);
			}

			// Rebuild the page-size selector.
			if (grid.pageSizerId)
			{
				this.ti.hydrateParam(grid.pageSizerId, response.Data.Meta);
			}
			if (grid.pageRecords)
			{
				this.ti.hydrateParam(grid.pageRecords, response.Data.Meta);
			}

			// Editable columns, x-editable rocks!
			var editable = grid.gridDataRow.editable
				? grid.gridDataRow.editable
				: false;
			if (editable)
			{
				this.ti.onPublish($.proxy(function (gridName, editable)
				{
					//$('#' + editable.recordActionContainer).hide();
					$('#' + editable.recordActionContainer).attr('data-grid-name', gridName);
				}, this, gridName, editable));
				$('#' + this.ti.tid + ' .editable').on('hidden', function (e, reason)
				{
					if (reason === 'save' || reason === 'nochange')
					{
						var $next = $(this).closest('td').next().find('.editable');
						setTimeout(function ()
						{
							$next.editable('show');
						}, 300);
					}
				});
			}

			App.DataStore.removeItem('GridDataPublishing:' + gridName);

			if (grid.onLoadFinished)
			{
				grid.onLoadFinished(response.Data.Meta.Filters, response.Data.Meta.TotalRecords);
			}
		},
		orderGrid: function (grid, field, direction)
		{
			// Request a different order, can we do that with the goverment?
			var order = {};
			order[field] = direction;
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"Page": 1, "OrderBy": order}});
		},

		pageGrid: function (grid, page)
		{
			// Move to a specific data page.
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"Page": page}});
		},

		sizeGrid: function (grid, size)
		{
			// Change the data page size.
			$.proxy(_w.loadGrid, this)(grid, {}, {"Grid": {"NumberOfRecords": size, "Page": 1}});
		},

		updateGridRowField: function (editable, rowId, field, value)
		{
			// Field value update from inline editing.
			if (undefined == this.gridEntryUpdates['id:' + rowId][editable.itemNS])
			{
				this.gridEntryUpdates['id:' + rowId][editable.itemNS] = {};
			}
			this.gridEntryUpdates['id:' + rowId][editable.itemNS][field] = value;
			var gridName = $('#' + editable.recordActionContainer).attr('data-grid-name');
			_w.alert(
				false,
				App.Theme.Grid.RecordUpdateAction
					.replaceAll('[eid]', gridName),
				'success',
				true
			);
			$('#' + gridName + '_yes').unbind('click');
			$('#' + gridName + '_yes').click(
				$.proxy(_w.updateGridEntries, this, gridName, editable)
			);
			$('#' + gridName + '_no').unbind('click');
			$('#' + gridName + '_no').click(
				$.proxy(_w.revertGridEntries, this, gridName, editable)
			);
		},

		revertGridEntries: function (gridName, editable)
		{
			// Throw away all local inline edited changes.
			$.proxy(_w.searchGrid, this)(gridName);
			_w.alert(
				false,
				'Changes ignored.',
				'success',
				false
			);
		},

		updateGridEntries: function (gridName, editable)
		{
			// Update on server all entries that were updated via inline editing.
			if (undefined == this.grids[gridName])
			{
				//console.log('updateGridEntries:context');
				//console.log(this);
			}
			var count = 0;
			for (var i in this.gridEntryUpdates)
			{
				if ($.isEmptyObject(this.gridEntryUpdates[i]))
				{
					continue;
				}
				count++;
			}
			this.gridEntryUpdateCount = count;
			this.gridEntryUpdated = 0;
			_w.alert(
				false,
				'Updating record 1 of ' + count + '...',
				'success',
				true
			);
			for (var i in this.gridEntryUpdates)
			{
				if ($.isEmptyObject(this.gridEntryUpdates[i]))
				{
					continue;
				}
				var data = this.gridEntryUpdates[i];
				if (undefined != editable.additionalData)
				{
					data = $.extend(true, {}, data, editable.additionalData);
				}
				var id = i.substr(3, i.length - 3);
				var jobId = editable.idIsJobId
					? id
					: null;
				App.API.getTask(
					editable.taskUpdate + ':' + id,
					editable.workspace,
					editable.taskUpdate,
					jobId,
					{id: id},
					$.proxy(function (gridName, editable, id, data)
					{
						App.API.execTask(
							editable.taskUpdate + ':' + id, data, {},
							$.proxy(_w.gridEntryUpdateMessage, this, gridName, editable),
							$.proxy(_w.execErrorHandler, this)
						);
					}, this, gridName, editable, id, data),
					$.proxy(_w.contractErrorHandler, this)
				);
			}

		},

		gridEntryUpdateMessage: function (gridName, editable)
		{
			// Provide the user some info on entry update progress.
			this.gridEntryUpdated++;
			if (this.gridEntryUpdated == this.gridEntryUpdateCount)
			{
				// All entries processed.
				$.proxy(_w.searchGrid, this)(gridName);
				_w.alert(
					false,
					'Changes saved.',
					'success',
					false
				);
				this.gridEntryUpdateCount = 0;
				this.gridEntryUpdated = 0;
				if (undefined != editable.onSuccessHandler)
				{
					editable.onSuccessHandler();
				}
			}
			else
			{
				// Still busy updating.
				_w.alert(
					false,
					'Updating record ' + (this.gridEntryUpdated + 1)
					+ ' of ' + this.gridEntryUpdateCount + '...',
					'success',
					true
				);
			}
		},

		validateInlineEdit: function (eid, meta, value)
		{
			// We need da same validation here as in regular form, boorah!
			// Inline edit field dynamically created, to validate we need to provide id and name attribs.
			var formId = new Date().getTime();
			var elemId = eid + '_' + formId;
			var elem = $('#' + eid).parent().find('input');
			$(elem).attr('id', elemId);
			$(elem).attr('name', elemId);

			// And we need a form, so wrap the element in such.
			$(elem).wrap('<form id="' + formId + '">');

			// Select2 be special, gets some special attention...
			if ('select2' == meta.dataType && meta.rules.required)
			{
				if ('' == $('#' + eid).next().find('.select2-chosen').html())
				{
					return 'This field is required';
				}
				return;
			}

			// Prepare validation rules.
			var rules = {};
			rules[elemId] = meta.rules
				? meta.rules
				: {};

			// Hook up the validator.
			var validator = $('#' + formId).validate({
				debug: true,
				rules: rules,
				submitHandler: function (form)
				{
					return false;
				}
			});

			// Check if stuff be valid.
			var isValid = true;
			try
			{
				isValid = $('#' + formId).valid();
			}
			catch (err)
			{
			}
			if (!isValid)
			{
				var msg = validator.errorList[0].message;
			}

			// Cleanup.
			$(elem).unwrap();
			$('label.error').remove();

			// Do we complain?
			if (!isValid)
			{
				return msg;
			}
		},

		validateSubForm: function (containerId, fields, isPermanent)
		{
			// Useful functionality to setup validator on a custom form.
			var formId = new Date().getTime();
			var container = $('#' + containerId);
			container.wrap('<form id="' + formId + '">');
			var rules = {};
			var messages = {};
			for (var field in fields)
			{
				if (fields[field].rules)
				{
					rules[field] = fields[field].rules;
				}
				if (fields[field].messages)
				{
					messages[field] = fields[field].messages;
				}
			}
			var validator = $('#' + formId).validate({
				rules: rules,
				messages: messages,
				submitHandler: function (form)
				{
					return false;
				}
			});
			var isValid = true;
			try
			{
				isValid = $('#' + formId).valid();
			}
			catch (err)
			{
			}
			if (!isPermanent)
			{
				container.unwrap();
				return isValid;
			}
		},

		cleanupSubFormValidation: function (containerId)
		{
			// Cleanup the mess we made.
			$('#' + containerId + ' input, #' + containerId + ' textarea').each(function (id, elem)
			{
				$(elem).val('');
			});
			$('#' + containerId + ' label.error').remove();
			$('#' + containerId + ' input.error, #' + containerId + ' input.valid').each(function (id, elem)
			{
				$(elem).removeClass('error');
				$(elem).removeClass('valid');
			});
			$('#' + containerId + ' textarea.error, #' + containerId + ' textarea.valid').each(function (id, elem)
			{
				$(elem).removeClass('error');
				$(elem).removeClass('valid');
			});
		},


		/**
		 * For meta vars that need data from post-initialization use this method.
		 */
		finaliseMeta: function ()
		{
			// Example:
			// App.DataStruct.Meta.module.dataQuery.data.Filter.project = App.projectId;
		},

		/**
		 * Called just before we know if we are authenticated or not.
		 */
		onLoad: function ()
		{
			_w.notifyDropVisible = false;
			$('.notify-dropdown').hide();
			_w.userDropVisible = false;
			$('.login-menu').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.userDropVisible)
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}
				else
				{
					$('.login-dropdown').fadeIn(300);
					_w.userDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}, 3000);
				$('.login-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.login-dropdown').fadeIn(300);
						_w.userDropVisible = true;
					}, 1);
				});
				$('.login-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.login-dropdown').fadeOut(300);
						_w.userDropVisible = false;
					}, 1000);
				});
			});
			$(document).click(function (evt)
			{
				evt.stopPropagation();
				if (_w.userDropVisible)
				{
					$('.login-dropdown').fadeOut(300);
					_w.userDropVisible = false;
				}
			});
			$('.navbar-inverse li').click(function ()
			{
				$('.navbar-inverse li').removeClass('active');
				$(this).addClass('active');
			});
		},

		/**
		 * Connect to ape http push server.
		 */
		apeConnect: function ()
		{
			return;
			if (_w.apeLive)
			{
				return;
			}
			var client = new APE.Client;
			_w.chatChannelName = App.Config.appKey + '_generalnotice';
			client.load();
			client.addEvent('load', function ()
			{
				// Connect.
				client.core.start({
					"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
				});
				setTimeout(function ()
					{
						// If not yet connected we try again.
						if (!_w.apeChat)
						{
							client.core.start({
								"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
							});
							setTimeout(function ()
								{
									if (!_w.apeChat)
									{
										$('#liveStatus').html('<span class="glyphicon glyphicon-exclamation-sign"></span>');
									}
								}
								, 15000);
						}
					}
					, 15000);
			});
			client.addEvent('apeDisconnect', function ()
			{
				// On disconnect try to re-establish connection.
				_w.apeLive = false;
				$('#liveStatus').html('');
				client.core.start({
					"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
				});
				setTimeout(function ()
					{
						if (!_w.apeChat)
						{
							client.core.start({
								"name": App.userData.id + '.' + Math.floor((Math.random() * 1000) + 1)
							});
							setTimeout(function ()
								{
									if (!_w.apeChat)
									{
										$('#liveStatus').html('<span class="glyphicon glyphicon-exclamation-sign"></span>');
										window.location = window.location.href;
									}
								}
								, 15000);
						}
					}
					, 15000);
			});
			client.addEvent('ready', function ()
			{
				// Connected and ready to chat to the server.
				_w.apeChat = true;
				_w.apeLive = true;
				$('.notification-handle').show();
				$('#liveStatus').html('<span class="glyphicon glyphicon-fire"></span>');
				client.core.join(_w.chatChannelName);
				client.core.join(App.Config.appKey + '_user_' + App.userData.id);
				/*client.addEvent('multiPipeCreate', function(pipe, options) {
				 //console.log('Connected to:', options.pipe.properties.name);
				 _w.pipe = pipe;
				 _w.pipe.request.send('webhook', {
				 'registerUser':
				 {
				 id : App.userData.id
				 }
				 });
				 });*/
				client.onRaw('data', function (raw)
				{
					_w.handleServerCommand(raw.data);
				});
			});
		},
		/**
		 * Handle server commands received through push server.
		 */
		handleServerCommand: function (cmd)
		{
			switch (cmd.type)
			{
				case 'checkAuth':
					App.API.getTask(
						'getActiveAccount', 'User', 'Profile.ActiveAccount', null,
						{}, function (response)
						{
							App.DeviceTypes = response.Data.deviceTypes;
						}, _w.onActiveAccountFailure
					);
					break;
				case 'importProgress':
					$('.import-progress[data-import="' + cmd.params.id + '"]').attr('aria-valuenow', cmd.params.progress);
					$('.import-progress[data-import="' + cmd.params.id + '"]').css('width', cmd.params.progress + '%');
					$('.import-progress[data-import="' + cmd.params.id + '"]').html(cmd.params.progress + '%');
					if ('DeviceImport' == cmd.params.id && 100 == cmd.params.progress)
					{
						window.location.hash = '/dashboard-grid';
						_w.alert('Success', 'Devicess imported from DMP.');
					}
					break;
				case 'notify':
					_w.notify(cmd.title, cmd.message);
					break;
				case 'reload':
					if (!_w.openForm)
					{
						if (cmd.message)
						{
							_w.notify(cmd.title, cmd.message);
						}
						setTimeout(function ()
						{
							location.reload();
						}, 3000);
					}
					else
					{
						if (cmd.delayMessage)
						{
							_w.notify(cmd.title, cmd.delayMessage);
						}
						_w.onFormClose = function ()
						{
							location.reload();
						};
					}
					break;
				case 'kick':
					if (!_w.openForm)
					{
						_w.notify(cmd.title, cmd.message);
						App.Authenticated = false;
						App.permissions = {};
						App.companyData = {};
						App.Sudo = {};
						App.userData = {};
						setTimeout(function ()
						{
							App.API.execTask(
								'logout', 'Profile', 'Logout',
								{}, function ()
								{
									window.location = '/';
								}, function () {}
							);
						}, 3000);
					}
					else
					{
						_w.notify(cmd.title, cmd.delayMessage);
						_w.onFormClose = function ()
						{
							App.Authenticated = false;
							App.permissions = {};
							App.companyData = {};
							App.Sudo = {};
							App.userData = {};
							App.API.execTask(
								'logout', 'Profile', 'Logout',
								{}, function ()
								{
									window.location = '/';
								}, function () {}
							);
							location.reload();
						};
					}
					break;
				case 'permission-change':
					App.API.getTask(
						'getActiveAccount', 'User', 'Profile.ActiveAccount', null,
						{}, _w.onActiveAccount, _w.onActiveAccountFailure
					);
					break;
				case 'dealGenerationUpdate':
					var container = '#progressSection' + cmd.params.Id;
					var containerId = 'progressSection' + cmd.params.Id;
					_w.dealGenUpdate[container] = cmd.params;
					if (_t.dealcyclegrid.published)
					{
						if ('None' == cmd.params.Section)
						{
							//-> Remove section and refresh grid.
							$(container).remove();
							delete _w.dguSection[container];
							delete _w.dealGenUpdate[container];
							$.proxy(_w.searchGrid, _t.dealcyclegrid.template)('grdDealCycle');
							_t.dealcyclegrid.template.getCalculationErrors();
						}
						else
						{
							//-> Progress display.
							var progress = (-1 == cmd.params.Progress)
								? 'processing ...'
								: cmd.params.Progress + '%';
							if (!_w.dguSection[container])
							{
								//-> Section does not yet exist, create it.
								_w.dguSection[container] = true;
								$('#dguContainer').append(
									'<div id="' + containerId + '"><div class="col-md-12">'
									+ '<h5>Deal Generation: ' + cmd.params.DealCycle + '</h5></div>'
									+ '<div class="col-md-12">'
									+ '<div class="col-md-3 text-bold">'
									+ 'Duration:<br/>'
									+ 'Section:<br/>'
									+ 'Task:<br/>'
									+ 'Task Progress:<br/>'
									+ '<hr/>'
									+ '</div>'
									+ '<div class="col-md-7">'
									+ '<span id="' + containerId + 'Duration">' + cmd.params.Duration + '</span><br/>'
									+ '<span id="' + containerId + 'Section">' + cmd.params.Section + '</span><br/>'
									+ '<span id="' + containerId + 'Task">'
									+ '(' + cmd.params.NumTask + ' of ' + cmd.params.NumTasks + ') '
									+ cmd.params.Task
									+ '</span><br/>'
									+ '<span id="' + containerId + 'Progress">' + progress + '</span><br/>'
									+ '<hr/>'
									+ '</div>'
									+ '</div>'
									+ '</div>'
								);
								$.proxy(_w.searchGrid, _t.dealcyclegrid.template)('grdDealCycle');
							}
							else
							{
								//-> Update section with latest progress details.
								$(container + 'Duration').html(cmd.params.Duration);
								$(container + 'Section').html(cmd.params.Section);
								$(container + 'Task').html(
									'(' + cmd.params.NumTask + ' of ' + cmd.params.NumTasks + ') ' + cmd.params.Task
								);
								$(container + 'Progress').html(progress);
							}
						}
					}
					break;
			}
		},


		/**
		 * On successful login and on first load if user has an active session
		 * this function is called.
		 */
		onActiveAccount: function (response, fresh)
		{
			/*
			 * Prepare useful session data, all nicely packed out.
			 * (and show the main menu)
			 */
			App.Authenticated = true;
			App.userData = response.userData;
			App.userType = "User";
			$('.navbar-inverse.ghost').removeClass('ghost');


			/*
			 * Some session data needed to finalise meta structs, so lets finalise.
			 */
			_w.finaliseMeta();

			/*
			 * Show and hook up logout button
			 */
			$('#lnkLogin').hide();
			$('#lnkLogout').removeClass('ghost');
			$('#lnkLogout').show();
			$('#lnkLogout').click(function ()
			{
                $.ajax(
                    {
                        type: 'POST',
                        url: '/api/users/v1/release-authentication',
                        data: JSON.stringify({token:App.Util.getCookie("token", '')}),
                        success: $.proxy(function (response)
                        {
                            if(response.status == "Success")
                            {
                                App.Util.setCookie('token','', -10);
                                App.Util.setCookie('PHPSESSID','', -10);
                                App.Authenticated = false;
                                window.location = '/';
                                App.userData = {};
                                App.userType = 'Guest';
                            }
                            else
                            {
                                _w.notify('Error', response.message);
                            }

                        }, this)
                    });

			});
			$('#mnuProfile').click(function ()
			{
				App.Controller.loadForm(
					'frmModal', 'My Profile', App.allowedSection, 'profile',
					{id: App.userData.id}, {}, null
				);
			});

			/*
			 * Show user details
			 */
			$('#infUserName').html(
				App.userData.firstName + ' ' + App.userData.familyName
			);
			$('#loggedIn').show();
			$('#loggedOut').hide();
			$('#userTxtOut').hide();
			$('#userTxtIn').show();
			$('#mnuUser').show();
			/*
			 * Init permissions and page listeners.
			 */
			if ('User' == App.userType)
			{
				App.allowedSection = 'portal';
				if (App.userData.forcePasswordChange)
				{
					window.location.hash = '/change-password';
				}
				else if (App.redirect)
				{
					_w.initPortal();
					window.location.hash = App.redirect;
					delete App.redirect;
				}
				else
				{
					_w.initPortal();
					window.location.hash = App.Config.sectionLandingPage.Portal;
				}
			}
			else if ('Administrator' == App.userType)
			{
				App.allowedSection = 'admin';
				if (App.userData.forcePasswordChange)
				{
					window.location.hash = '/change-password';
				}
				else if (App.redirect)
				{
					_w.initAdmin();
					window.location.hash = App.redirect;
					delete App.redirect;
				}
				else
				{
					_w.initAdmin();
					window.location.hash = window.location.hash = App.Config.sectionLandingPage.Admin;
				}
			}
			else
			{
				// No permissions at all
				App.allowedSection = 'brochure';
				window.location.hash = App.Config.sectionLandingPage.Brochure;
			}
			if (!App.started)
			{
				App.start();
			}
		},

		/**
		 * The user is not logged in.
		 */
		onActiveAccountFailure: function ()
		{
			/*
			 * User is not authenticated.
			 */
			$('.navbar-inverse').addClass('ghost');
			App.Authenticated = false;
			$('#loggedIn').hide();
			$('#loggedOut').show();
			$('#userTxtOut').show();
			$('#userTxtIn').hide();

			/* $('#user-details').addClass("invisible"); */

			/*
			 * Initialize brochure
			 */
			App.allowedSection = 'brochure';
			_w.initBrochure();

			if (!App.started)
			{
				App.start();
			}
		},


		initBrochure: function ()
		{
			$('a.navbar-brand vodacom_logo').attr('href', '/');
			if (_w.contextVisible)
			{
				$('#ContextMenu').toggleClass('ghost');
				$('#wrapper').toggleClass('full-main');
				_w.contextVisible = false;
			}
			$('#BrochureMenu').show();
			$('#PortalMenu').hide();
			$('#AdminMenu').hide();
			$('#MainMenu').show(300);
		},

		initAdmin: function ()
		{
			$('a.navbar-brand.vodacom_logo').attr('href', '/');
			$('.notification-handle > span.glyphicon').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.notifyDropVisible)
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}
				else
				{
					$('.notify-dropdown').fadeIn(300);
					_w.notifyDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}, 3000);
				$('.notify-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeIn(300);
						_w.notifyDropVisible = true;
					}, 1);
				});
				$('.notify-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeOut(300);
						_w.notifyDropVisible = false;
					}, 1000);
				});
			});
			$('#BrochureMenu').hide();
			$('#PortalMenu').hide();
			$('#AdminMenu').show();
			$('#MainMenu').show(300);
		},

		initPortal: function ()
		{
			$('a.navbar-brand.vodacom_logo').attr('href', '/#/dashboard-grid');
			$('.notification-handle').click(function (evt)
			{
				evt.stopPropagation();
				if (_w.notifyDropVisible)
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}
				else
				{
					$('.notify-dropdown').fadeIn(300);
					_w.notifyDropVisible = true;
				}
				_w.delay(function ()
				{
					$('.notify-dropdown').fadeOut(300);
					_w.notifyDropVisible = false;
				}, 3000);
				$('.notify-dropdown').mouseover(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeIn(300);
						_w.notifyDropVisible = true;
					}, 1);
				});
				$('.notify-dropdown').mouseout(function ()
				{
					_w.delay(function ()
					{
						$('.notify-dropdown').fadeOut(300);
						_w.notifyDropVisible = false;
					}, 1000);
				});
			});
			$('#BrochureMenu').hide();
			$('#AdminMenu').hide();
			$('#PortalMenu').show();
			$('#MainMenu').show(300);
		},

	};

})();

;;
(function ()
{

	window._App = function ()
	{

		this.initialize();

	};

	window._App.prototype =
	{

		projectId: null,
		activePage: false,
		started: false,
		allowedSection: 'brochure',

		initialize: function ()
		{
			this.Config = new _App.Config();
			this.Controller = new _App.Controller({
				$_el: $('#PageContent')
			});
			this.Router = new _App.Router();
			this.Ajax = new _App.Ajax();
			this.Util = new _App.Util();
			this.Event = new _App.Event();
			this.API = new _App.API();
			this.DataElement = new _App.DataElement();
			this.DataStruct = new _App.DataStruct();
			this.DataStore = new _App.DataStore();
			this.Theme = new _App.Theme();
			this.Template = new _App.Template();
			this.TemplateElement = new _App.TemplateElement();
			this.ElementLibrary = new _App.ElementLibrary();
			this.Container = new _App.Container();

			_App = null;
		},

		start: function ()
		{
			if (this.started)
			{
				return;
			}
			_w.init();
			this.started = true;
			this.Router.handleHashChange();
		},


	};

})();
;;
(function ()
{

	_App.Controller = function (args)
	{
		this.initialize(args);
	};

	_App.Controller.prototype =
	{

		currentPage: null,
		currentSection: {},
		onClose: {},
		formTemplate: {},
		widgetParams: {},
		formParams: {},
		gridParams: {},

		initialize: function (args)
		{
			for (var key in args)
			{
				this[key] = args[key];
			}

			this.getElems();
			this.setupScrollListener();
			$('#frmModal').on('hidden.bs.modal', $.proxy(function ()
			{
				if (this.onClose.modalFormContent
				    && this.onClose.modalFormContent[this.formTemplate])
				{
					this.onClose.modalFormContent[this.formTemplate]();
					delete this.onClose.modalFormContent[this.formTemplate];
				}
				if (this.currentSection.modalFormContent)
				{
					var prevSection = this.currentSection.modalFormContent;
					App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
					_t[prevSection].remove();
					$('#modalFormContent').removeClass(prevSection);
					this.currentSection.modalFormContent = null;
				}
				_w.openForm = false;
				if (_w.onFormClose)
				{
					setTimeout(function ()
					{
						_w.onFormClose();
					}, 1000);
				}
			}, this));
		},

		getElems: function ()
		{
			this.$_head = $('head');
			this.$_body = $('body');
			this.$_htmlBody = $('html, body');
			this.$_navAnchors = $('#Header .nav a').map(function (i, a) { return $(a); });
		},

		changePage: function (section, pageName)
		{
			section = section.replaceAll('-', '');
			pageName = pageName.replaceAll('-', '');
			App.Event.trigger('Controller.LoadingTemplate:' + pageName, {"pageName": pageName});
			var prevPage = this.currentPage;
			this.currentPage = pageName || '';
			App.activePage = false;
			if (_t[prevPage])
			{
				App.Event.trigger('Controller.RemovingPage:' + prevPage, {"pageName": prevPage});
				_t[prevPage].remove();
				this.$_body.removeClass(prevPage);
			}
			App.Template.register(
				pageName, section, pageName, 'PageContent', {},
				$.proxy(this.renderPage, this)
			);
		},

		renderPage: function (id, pageName)
		{
			this.$_body.addClass(pageName);
			_t[pageName].publish();
			App.Event.trigger(
				'Controller.Published:' + pageName,
				{"id": "page", "pageName": pageName}
			);
			//this.$_el.removeClass('loading');
			this.$_htmlBody.animate({
				'scrollTop': 0
			}, 250);
			this.$_body.addClass(pageName);
			App.activePage = pageName;
		},

		loadGrid: function (containerName, title, section, template, params, options, onClose)
		{
			container = App.Container.get(containerName);
			section = section.replaceAll('-', '');
			template = template.replaceAll('-', '');
			if (!this.gridParams[template])
			{
				this.gridParams[template] = {};
			}
			this.gridParams[template] = (undefined == params)
				? {}
				: params;
			container.setTitle(title);
			container.show(options);
			this.formTemplate = template;
			if (!this.onClose[container.contentTarget])
			{
				this.onClose[container.contentTarget] = {};
			}
			if (onClose)
			{
				this.onClose[container.contentTarget][template] = onClose;
			}
			this.changeSection(containerName, container.contentTarget, section, template);
		},

		loadForm: function (containerName, title, section, template, params, options, onClose)
		{
			$('.btn[data-role="end"]').click();
			_w.openForm = containerName;
			_w.onFormClose = false;
			container = App.Container.get(containerName);
			section = section.replaceAll('-', '');
			template = template.replaceAll('-', '');
			if (!this.formParams[template])
			{
				this.formParams[template] = {};
			}
			this.formParams[template] = (undefined == params)
				? {}
				: params;
			container.setTitle(title);
			container.show(options);
			this.formTemplate = template;
			if (!this.onClose[container.contentTarget])
			{
				this.onClose[container.contentTarget] = {};
			}
			if (onClose)
			{
				this.onClose[container.contentTarget][template] = onClose;
			}
			this.changeSection(containerName, container.contentTarget, section, template, onClose);
		},

		closeForm: function (container, message)
		{
			container = App.Container.get(container);
			if (message)
			{
				if ('Success' == message)
				{
					_w.alert('Success', 'Changes successfully saved.', 'success');
				}
				if ('Cancel' == message)
				{
					_w.alert('Success', 'Changes cancelled.', 'info');
				}
			}
			if (this.onClose[container.contentTarget]
			    && this.onClose[container.contentTarget][this.formTemplate])
			{
				this.onClose[container.contentTarget][this.formTemplate]();
				delete this.onClose[container.contentTarget][this.formTemplate];
			}
			container.hide();
			if (this.currentSection[container.contentTarget])
			{
				var prevSection = this.currentSection[container.contentTarget];
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				this.currentSection[container.contentTarget] = null;
			}
		},

		changeSection: function (containerName, target, section, sectionName, onClose, force)
		{
			section = section.replaceAll('-', '');
			sectionName = sectionName.replaceAll('-', '');
			App.Event.trigger('Controller.LoadingTemplate:' + sectionName, {"sectionName": sectionName});
			if (!this.currentSection)
			{
				this.currentSection = {};
			}
			var prevSection = this.currentSection[target]
				? this.currentSection[target]
				: null;
			if (!force && prevSection == sectionName)
			{
				return;
			}
			this.currentSection[target] = sectionName || '';

			if (_t[prevSection])
			{
				if (this.onClose[target][sectionName])
				{
					this.onClose[target][sectionName]();
					delete this.onClose[target][sectionName];
				}
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				$('#' + target).removeClass(prevSection);
			}
			App.Template.register(
				sectionName, section, sectionName, 'SectionContent', {},
				$.proxy(this.renderSection, this, target, containerName)
			);
			if (!this.onClose[target])
			{
				this.onClose[target] = {};
			}
			if (onClose)
			{
				this.onClose[target][sectionName] = onClose;
			}
		},

		renderSection: function (target, containerName, id, sectionName)
		{
			if (undefined != this.widgetParams[sectionName])
			{
				_t[sectionName].template.params = this.widgetParams[sectionName];
			}
			_t[sectionName].publish(target);
			_t[sectionName].container = containerName;
			App.Event.trigger(
				'Controller.Published:' + sectionName,
				{"id": "section", "sectionName": sectionName}
			);
		},

		closeSection: function (target, sectionName, callback)
		{
			sectionName = sectionName.replaceAll('-', '');
			if (undefined != this.widgetParams[sectionName])
			{
				delete this.widgetParams[sectionName];
			}
			var prevSection = this.currentSection[target]
				? this.currentSection[target]
				: null;

			delete this.currentSection[target];

			if (_t[prevSection])
			{
				if (this.onClose[target][sectionName])
				{
					this.onClose[target][sectionName]();
					delete this.onClose[target][sectionName];
				}
				App.Event.trigger('Controller.RemovingSection:' + prevSection, {"sectionName": prevSection});
				_t[prevSection].remove();
				$('#' + target).removeClass(prevSection);
			}
			if (undefined != callback)
			{
				callback();
			}
		},

		setupScrollListener: function ()
		{
			$(window).on('scroll', function ()
			{
				if ($(window).scrollTop() > 50)
				{
					$('#Header').addClass('compressed');
				}
				else
				{
					$('#Header').removeClass('compressed');
				}
			});
		}

	};

})();

;;
(function ()
{

	_App.Router = function ()
	{
		this.initialize();
	};

	_App.Router.prototype =
	{

		routes: {},

		requireAuth: {},

		initialize: function ()
		{
			if (!window.location.hash.length)
			{
				window.location.hash = '/';
			}
			this.setupHashChangeListener();
		},

		setupHashChangeListener: function ()
		{
			if (!( 'onhashchange' in window ))
			{
				this.pollHash();
			}
			$(window).on('hashchange', $.proxy(this.handleHashChange, this));
		},

		pollHash: function ()
		{
			var currentHash = window.location.hash;
			setInterval(function ()
			{
				if (window.location.hash != currentHash)
				{
					$(window).trigger('hashchange');
					currentHash = window.location.hash;
				}
			}, 250);
		},

		handleHashChange: function ()
		{
			$('.btn[data-role="end"]').click();
			var hashLocQuery = window.location.hash.split("?");
			var hashLoc = hashLocQuery[0].split("/");
			App.allowedSection = App.allowedSection
				? App.allowedSection
				: 'brochure';
			if (hashLoc[2] && '' != hashLoc[2])
			{
				var section = hashLoc[1];
				var page = hashLoc[2];
			}
			else if (hashLoc[1] && '' != hashLoc[1])
			{
				var section = App.allowedSection;
				var page = hashLoc[1];
			}
			else
			{
				var section = 'brochure';
				var page = 'home';
			}
			if (App.userData && App.userData.forcePasswordChange
			    && 'change-password' != page)
			{
				window.location.hash = '/change-password';
				return;
			}
			if (App.allowedSection != section
			    && 'brochure' != section
			    && 'notice' != section)
			{
				if (!App.redirect
				    && 'login' != page
				    && 'forgot-password' != page
				    && 'change-password' != page)
				{
					var query = hashLocQuery[1]
						? '?' + hashLocQuery[1]
						: '';
					App.redirect = '/' + section + '/' + page + query;
				}
				window.location.hash = '/notice/error?error=pagePermissionDenied';
				return;
			}
			App.Template.instanceCounter = 0;
			App.Controller.changePage(section, page);
			$(window).trigger('pageChange');
		}

	};

})();

;;
(function ()
{

	_App.Ajax = function ()
	{

		this.initialize();

	};

	_App.Ajax.prototype =
	{

		exportCounter: 0,

		initialize: function ()
		{

		},

		DOWNLOAD: function (args)
		{
			var target = !args.direct
				? 'target="_blank"'
				: '';
			var inputs = '';
			for (var item in args.data)
			{
				inputs += '<input type="hidden" id="' + item + '" name="' + item + '" value="' + args.data[item] + '">';
			}
			$('<form id="downloadForm' + this.exportCounter + '" method="get" ' + target + ' action="' + args.url + '">'
			  + inputs + '</form>').appendTo('body').submit();
			$('#downloadForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		EXPORTSAFE: function (args)
		{
			args.data = args.data[0];
			inputs = '';
			inputs += '<input type="hidden" name="Contract" value="' + args.data.Contract + '">';
			for (var group in args.data.Packet)
			{
				for (var param in args.data.Packet[group])
				{
					if ('object' == typeof args.data.Packet[group][param])
					{
						for (var subParam in args.data.Packet[group][param])
						{
							inputs += '<input type="hidden" name="Packet[' + group + '][' + param + '][' + subParam + ']" value="' + escape(args.data.Packet[group][param][subParam]) + '">';
						}
					}
					else
					{
						inputs += '<input type="hidden" name="Packet[' + group + '][' + param + ']" value="' + escape(args.data.Packet[group][param]) + '">';
					}
				}
			}
			if (args.data.Options)
			{
				for (var param in args.data.Options)
				{
					inputs += '<input type="hidden" name="Options[' + param + ']" value="' + escape(args.data.Options[param]) + '">';
				}
			}
			var target = !args.direct
				? 'target="_blank"'
				: '';
			$('<form id="exportForm' + this.exportCounter + '" method="post" ' + target + ' action="' + args.url + '">'
			  + inputs
			  + '</form>').appendTo('body').submit();
			$('#exportForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		EXPORT: function (args)
		{
			args.data = args.data[0];
			inputs = '';
			inputs += '<input type="hidden" name="Contract" value="' + args.data.Contract + '">';
			for (var group in args.data.Packet)
			{
				for (var param in args.data.Packet[group])
				{
					if ('object' == typeof args.data.Packet[group][param])
					{
						for (var subParam in args.data.Packet[group][param])
						{
							inputs += '<input type="hidden" name="Packet[' + group + '][' + param + '][' + subParam + ']" value="' + args.data.Packet[group][param][subParam] + '">';
						}
					}
					else
					{
						inputs += '<input type="hidden" name="Packet[' + group + '][' + param + ']" value="' + args.data.Packet[group][param] + '">';
					}
				}
			}
			if (args.data.Options)
			{
				for (var param in args.data.Options)
				{
					inputs += '<input type="hidden" name="Options[' + param + ']" value="' + args.data.Options[param] + '">';
				}
			}
			var target = !args.direct
				? 'target="_blank"'
				: '';
			$('<form id="exportForm' + this.exportCounter + '" method="post" ' + target + ' action="' + args.url + '">'
			  + inputs
			  + '</form>').appendTo('body').submit();
			$('#exportForm' + this.exportCounter).remove();
			this.exportCounter++;
		},

		JSON: function (args, callback, errorCallback)
		{
			args.type = 'POST';
			args.dataType = 'json';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			args.data = JSON.stringify(args.data);


			$.post(args.url, args.data)
				.done(function (data)
				{
					_w.sessionUpdate();
					(args.id)
						? callback(args.id, data)
						: callback(data);
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		SCRIPT: function (args, callback, errorCallback)
		{
			args.type = 'GET';
			args.dataType = 'script';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				})
				.error(function (jqXHR, textStatus, errorThrown)
				{
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		POST: function (args, callback, errorCallback)
		{
			args.type = 'POST';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					_w.sessionUpdate();
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		},

		GET: function (args, callback, errorCallback)
		{
			args.type = 'GET';
			args.url = window.location.protocol
			           + '//' + window.location.hostname
			           + ( args.url.indexOf('/') === 0
				? args.url
				: '/' + args.url);
			$.ajax(args)
				.done(function (data)
				{
					_w.sessionUpdate();
					if (callback)
					{
						(args.id)
							? callback(args.id, data)
							: callback(data);
					}
				})
				.fail(function (jqXHR, textStatus, errorThrown)
				{
					_w.sessionUpdate();
					if (errorCallback)
					{
						(args.id)
							? errorCallback(args.id, textStatus, errorThrown)
							: errorCallback(textStatus, errorThrown);
					}
				});
		}

	};

})();

;;
(function ()
{

	_App.Util = function ()
	{
		this.initialize();
	};

	_App.Util.prototype =
	{

		startupTime: 0,

		initialize: function ()
		{
			this.startupTime = this.unixTimestamp();
		},

		resetImageUploaderWidget: function (eid)
		{
			$('#' + eid).val('');
			$('#' + eid).removeClass('valid');
			$('#fileid_' + eid).val('');
			$('#btn_' + eid).attr('data-url', '');
			$('#btnDownload' + eid).hide();
			$('#btnDownload' + eid).attr('data-download', '');
		},

		formatDecimalDisplayValue: function (input)
		{
			var output = '' + input;
			output = "." == output.substring(0, 1)
				? '0' + output
				: output;
			return output;
		},

		formatMultipleStringCase: function (input)
		{
			var output = '' + input;
			return output.formatMultipleStringCase();
		},

		formatSingleStringCase: function (input)
		{
			var output = '' + input;
			return output.formatSingleStringCase();
		},

		enforceNumericInput: function (identity, signed)
		{
			$('#' + identity).keydown(function (evt)
			{
				var key = evt.keyCode || evt.which;

				/*
				 * Implement minus sign at front
				 */
				if (true === signed
				    && ('' == $('#' + identity).val()
				        || '-' != $('#' + identity).val().substring(0, 1))
				    && (109 == key || 189 == key))
				{
					$('#' + identity).val('-' + $('#' + identity).val());
					return false;
				}

				return (key >= 48 && key <= 57)
				       || (key >= 96 && key <= 105)
				       || 8 === key
				       || 9 === key
				       || 46 === key
				       || 110 === key
				       || 190 === key;
			});
		},

		buildReportsMenu: function (container, page, identifier, data, staticItems)
		{
			$(container).empty();
			for (var i in staticItems)
			{
				var subMenu = staticItems[i];
				switch (subMenu.type)
				{
					case 'head':
						$(container).append(
							App.Theme.Menu.MenuHeader
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[title]', subMenu.title)
						);
						break;
					case 'main':
						$(container).append(
							App.Theme.Menu.MenuMain
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[href]', subMenu.href)
								.replaceAll('[title]', subMenu.title)
								.replaceAll('href="#/false"', 'class="handy"')
						);
						break;
					case 'sub':
						$(container).append(
							App.Theme.Menu.MenuSub
								.replaceAll('[eid]', 'mainmenu_' + subMenu.id)
								.replaceAll('[href]', subMenu.href)
								.replaceAll('[title]', subMenu.title)
								.replaceAll('href="#/false"', 'class="handy"')
						);
						break;
				}
				/*$(container).append(
				 '<li><a href="/#/' + App.allowedSection + '/'
				 + staticItems[i].href + '">'
				 + staticItems[i].title + '</a></li>'
				 );*/
			}

			for (var i in data)
			{
				$(container).append(
					App.Theme.Menu.MenuSub
						.replaceAll('[eid]', 'mainmenu_' + data[i].id)
						.replaceAll('[href]', page + '?' + identifier + '=' + data[i].id)
						.replaceAll('[title]', data[i].reportName)
				);
				/*$(container).append(
				 '<li><a href="/#/' + App.allowedSection + '/'
				 + page + '?' + identifier + '=' + data[i].id + '">'
				 + data[i].reportName + '</a></li>'
				 );*/
			}
		},

		cleanHTML: function (input)
		{
			// 1. remove line breaks / Mso classes
			var stringStripper = /(\n|\r| class=(")?Mso[a-zA-Z]+(")?)/g;
			var output = input.replace(stringStripper, ' ');
			// 2. strip Word generated HTML comments
			var commentSripper = new RegExp('<!--(.*?)-->', 'g');
			var output = output.replace(commentSripper, '');
			var tagStripper = new RegExp('<(/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>', 'gi');
			// 3. remove tags leave content if any
			output = output.replace(tagStripper, '');
			// 4. Remove everything in between and including tags '<style(.)style(.)>'
			var badTags = ['style', 'script', 'applet', 'embed', 'noframes', 'noscript'];

			for (var i = 0; i < badTags.length; i++)
			{
				tagStripper = new RegExp('<' + badTags[i] + '.*?' + badTags[i] + '(.*?)>', 'gi');
				output = output.replace(tagStripper, '');
			}
			// 5. remove attributes ' style="..."'
			var badAttributes = ['style', 'start'];
			for (var i = 0; i < badAttributes.length; i++)
			{
				var attributeStripper = new RegExp(' ' + badAttributes[i] + '="(.*?)"', 'gi');
				output = output.replace(attributeStripper, '');
			}
			return output;
		},

		handleToolbarState: function (selector, activateCallback, deactivateCallback)
		{
			$(selector + ' button').each(function (i, elem)
			{
				App.Util.handleButtonState(elem, activateCallback, deactivateCallback);
			});
		},

		handleButtonState: function (selector, activateCallback, deactivateCallback)
		{
			$(selector).click($.proxy(function (activateCallback, deactivateCallback, evt)
			{
				if ($(evt.currentTarget).hasClass('active'))
				{
					$(evt.currentTarget).removeClass('active');
					if (deactivateCallback)
					{
						deactivateCallback($(evt.currentTarget).attr('data-deactivate'));
					}
				}
				else
				{
					if ($(evt.currentTarget).parent().find('button.active').length)
					{
						return;
					}
					$(evt.currentTarget).addClass('active');
					if (activateCallback)
					{
						activateCallback($(evt.currentTarget).attr('data-activate'));
					}
				}
			}, this, activateCallback, deactivateCallback));
		},

		unixTimestamp: function ()
		{
			return Math.round((new Date().getTime() / 1000));
		},

		getUrlParam: function (name)
		{
			hashLoc = window.location.hash.split("?");
			var ret = decodeURI(
				(RegExp(name + '=' + '(.+?)(&|$)').exec(hashLoc[1]) || [,])[1]
			);
			return ('undefined' == ret)
				? null
				: ret;
		},

		ie: (function ()
		{
			var undef,
			    v = 3,
			    div = document.createElement('div'),
			    all = div.getElementsByTagName('i');
			while (
				div.innerHTML = '<!--[if gt IE ' + (++v) + ']><i></i><![endif]-->',
					all[0]
				)
			{
				;
			}
			return v > 4
				? v
				: undef;
		}()),

		updateCheckboxStyle: function ($_checkbox)
		{
			if ($_checkbox.hasClass('no-mod'))
			{
				return;
			}
			$_checkbox.addClass('no-mod');
			var label = $_checkbox.parent('label');
			if (label.length)
			{
				$(label).addClass('checkbox');
			}
			else
			{
				$_checkbox.wrap('<label class="checkbox"/>');
			}
			$('<span class="styled-checkbox" />').insertAfter($_checkbox);
			if (!!this.ie && this.ie < 9)
			{
				$_checkbox.set_checked = function ()
				{
					if (this.checked)
					{
						form.find('input[name="' + this.name + '"] + span').removeClass('checked');
						$(this).next('span').addClass('checked').blur();
					}
				};
				$_checkbox.set_checked();
				$_checkbox.bind('change', function ()
				{
					this.set_checked();
				});
			}
			if ($_checkbox.value == 'on')
			{
				$_checkbox.value = true;
			}
		},

		updateCheckboxStyles: function (form)
		{
			var $$_checkboxes = form.find('input[type=checkbox]');
			$.each($$_checkboxes, function (i, checkbox)
			{
				var $_checkbox = $(checkbox);
				if ($_checkbox.hasClass('no-mod'))
				{
					return;
				}
				var label = $_checkbox.parent('label');
				if (label.length)
				{
					$(label).addClass('checkbox');
				}
				else
				{
					$_checkbox.wrap('<label class="checkbox"/>');
				}
				$('<span class="styled-checkbox" />').insertAfter($_checkbox);
				if (!!this.ie && this.ie < 9)
				{
					checkbox.set_checked = function ()
					{
						if (this.checked)
						{
							form.find('input[name="' + this.name + '"] + span').removeClass('checked');
							$(this).next('span').addClass('checked').blur();
						}
					};
					checkbox.set_checked();
					$_checkbox.bind('change', function ()
					{
						this.set_checked();
					});
				}
				if (checkbox.value == 'on')
				{
					checkbox.value = true;
				}
			});
		},

		calculateTimeLeft: function (value, numDays, endDate)
		{
			var dateTime = value.split(' '),
			    date = dateTime[0],
			    time = dateTime[1],
			    dateParts = date.split('-').map(function (part)
			    {
				    return parseInt(part, 10);
			    }),
			    timeParts = time.split(':').map(function (part)
			    {
				    return parseInt(part, 10);
			    });
			var currentDateTime = new Date();
			if (endDate)
			{
				var dateTime = endDate.split(' '),
				    date = dateTime[0],
				    time = dateTime[1],
				    dateParts = date.split('-').map(function (part)
				    {
					    return parseInt(part, 10);
				    }),
				    timeParts = time.split(':').map(function (part)
				    {
					    return parseInt(part, 10);
				    });
				var expireDateTime = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);
			}
			else
			{
				var dateTime = value.split(' '),
				    date = dateTime[0],
				    time = dateTime[1],
				    dateParts = date.split('-').map(function (part)
				    {
					    return parseInt(part, 10);
				    }),
				    timeParts = time.split(':').map(function (part)
				    {
					    return parseInt(part, 10);
				    });
				var expireDateTime = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], timeParts[0], timeParts[1], timeParts[2]);
				expireDateTime.setDate(expireDateTime.getDate() + numDays);
			}
			var difference = expireDateTime.getTime() - currentDateTime.getTime();
			var daysDifference, hoursDifference, minutesDifference;

			daysDifference = Math.floor(difference / 1000 / 60 / 60 / 24);
			difference -= daysDifference * 1000 * 60 * 60 * 24;
			hoursDifference = Math.floor(difference / 1000 / 60 / 60);
			difference -= hoursDifference * 1000 * 60 * 60;
			minutesDifference = Math.floor(difference / 1000 / 60);
			difference -= minutesDifference * 1000 * 60;

			if (expireDateTime.getTime() < currentDateTime.getTime())
			{
				return '0m';
			}

			return daysDifference > 0
				? daysDifference + 'd, ' + hoursDifference + 'h, ' + minutesDifference + 'm'
				: hoursDifference + 'h, ' + minutesDifference + 'm';
		},

		updateClock: function ()
		{
			var currentTime = new Date();
			var currentHours = currentTime.getHours();
			var currentMinutes = currentTime.getMinutes();
			var currentSeconds = currentTime.getSeconds();
			currentMinutes = ( currentMinutes < 10 ? "0" : "" ) + currentMinutes;
			currentSeconds = ( currentSeconds < 10 ? "0" : "" ) + currentSeconds;
			currentHours = ( currentHours == 0 ) ? 12 : currentHours;
			var currentTimeString = currentHours + ":" + currentMinutes + ":" + currentSeconds;
			$("#clock").html(currentTimeString);
		},

		setCookie: function (name, value, days)
		{
			if (days)
			{
				var date = new Date();
				date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
				var expires = "; expires=" + date.toGMTString();
			}
			else
			{
				var expires = "";
			}
			document.cookie = escape(name) + "=" + escape(value) + expires + "; path=/";
		},

		getCookie: function (name, defaultValue)
		{
			var nameEQ = escape(name) + "=";
			var ca = document.cookie.split(';');
			for (var i = 0; i < ca.length; i++)
			{
				var c = ca[i];
				while (c.charAt(0) == ' ')
				{
					c = c.substring(1, c.length);
				}
				if (c.indexOf(nameEQ) == 0)
				{
					return unescape(c.substring(nameEQ.length, c.length));
				}
			}
			return undefined == defaultValue
				? null
				: defaultValue;
		},

		htmlEncode: function (value)
		{
			return ('string' == typeof value)
				? value.htmlEncode()
				: value;
		},

		htmlDecode: function (value)
		{
			return ('string' == typeof value)
				? value.htmlDecode()
				: value;
		}

	};

	/*
	 * Make sure we have the browser functionality available from previous versions.
	 */
	if (!jQuery.browser)
	{
		jQuery.browser = {};
		(function ()
		{
			jQuery.browser.msie = false;
			jQuery.browser.version = 0;
			if (navigator.userAgent.match(/MSIE ([0-9]+)\./))
			{
				jQuery.browser.msie = true;
				jQuery.browser.version = RegExp.$1;
			}
		})();
	}

	//-------------------------------------------------------- FUNCTION EXTENSIONS
	Function.prototype.scope = function (scope)
	{
		var callee = this,
		    args = Array.prototype.slice.call(arguments,1);
		return function ()
		{
			callee.apply(
				scope,
				args.concat(Array.prototype.slice.call(arguments,0))
			);
		};
	};

	//-------------------------------------------------------- STRING EXTENSIONS
	String.prototype.replaceAll = function (str1, str2, ignore)
	{
		return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), (ignore ? "gi" : "g")), (typeof(str2) == "string") ? str2.replace(/\$/g, "$$$$") : str2);
	};


	String.prototype.formatMultipleStringCase = function ()
	{
		var output = '' + this;
		if ('s' != output.substring(output.length - 1, output.length))
		{
			if ('y' == output.substring(output.length - 1, output.length))
			{
				output = output.substring(0, output.length - 1) + 'ies';
			}
			else
			{
				output += 's';
			}
		}
		return output;
	};

	String.prototype.formatSingleStringCase = function ()
	{
		var output = '' + this;
		if ('s' == output.substring(output.length - 1, output.length))
		{
			if ('ies' == output.substring(output.length - 3, output.length))
			{
				output = output.substring(0, output.length - 3) + 'y';
			}
			else
			{
				output = output.substring(0, output.length - 1);
			}
		}
		return output;
	};

	String.prototype.htmlEncode = function ()
	{
		return this.replaceAll('&', '&amp;')
			.replaceAll('"', '&quot;')
			.replaceAll("'", '&#39;')
			.replaceAll('<', '&lt;')
			.replaceAll('>', '&gt;');
	};

	String.prototype.htmlDecode = function ()
	{
		return this.replaceAll('&amp;', '&')
			.replaceAll('&quot;', '"')
			.replaceAll('&#39;', "'")
			.replaceAll('&lt;', '<')
			.replaceAll('&gt;', '>');
	};

	String.prototype.ucFirst = function ()
	{
		return this.charAt(0).toUpperCase() + this.slice(1);
	};

	String.prototype.trim = function ()
	{
		return this.replace(/^\s+|\s+$/g, "");
	};

	String.prototype.ltrim = function ()
	{
		return this.replace(/^\s+/, "");
	}

	String.prototype.rtrim = function ()
	{
		return this.replace(/\s+$/, "");
	}

	String.prototype.removeDoubleSpaces = function ()
	{
		return this.replace('  ', ' ').replace('  ', ' ').replace('  ', ' ').replace('  ', ' ').replace('  ', ' ');
	}

	String.prototype.dashToCamel = function ()
	{
		return this.replace(/(\-[a-z])/g, function ($1) {return $1.toUpperCase().replace('-', '');});
	};

	String.prototype.underscoreToCamel = function ()
	{
		return this.replace(/(\_[a-z])/g, function ($1) {return $1.toUpperCase().replace('_', '');});
	};

	String.prototype.camelToDash = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return "-" + $1.toLowerCase();});
	};

	String.prototype.underscoreToDash = function ()
	{
		return this.replace(/(\_[a-z])/g, function ($1) {return "-" + $1.toLowerCase().replace('_', '');});
	};

	String.prototype.camelToUnderscore = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return "_" + $1.toLowerCase();});
	};
	String.prototype.camelToSpace = function ()
	{
		return this.replace(/([A-Z])/g, function ($1) {return " " + $1.toLowerCase();});
	};

	String.prototype.dashToUnderscore = function ()
	{
		return this.replace(/(\-[a-z])/g, function ($1) {return "_" + $1.toLowerCase().replace('-', '');});
	};

	//-------------------------------------------------------- VALIDATOR MODIFICATIONS
	if (jQuery.validator)
	{
		jQuery.validator.addMethod("notNull", function (value, element, params)
			{
				return this.optional(element) || value != null;
			}, "Please select a value."
		);

		jQuery.validator.addMethod("mobile", function (value, element, params)
			{
				return this.optional(element) || '' != value;
			}, "Must be a valid mobile number."
		);

		jQuery.validator.addMethod("companyReg", function (value, element, params)
			{
				return this.optional(element) || value.match(/^\d{4}\/\d{6}\/\d{2}$/) != null;
			}, "Incorrect format."
		);

		jQuery.validator.addMethod("complexPassword", function (value, element, params)
			{
				var hasUpperCase = /[A-Z]/.test(value);
				var hasLowerCase = /[a-z]/.test(value);
				var hasNumbers = /\d/.test(value);
				var hasNonAlphas = /\W/.test(value);
				var badPass = (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphas < 4);
				return this.optional(element) || !badPass;
			}, "Password must contain at least<br/>one capital letter,<br/>one lower case letter,<br/>one numeric value and one symbol."
		);

		jQuery.validator.addMethod('minDate', function (v, el, minDate)
			{
				if (this.optional(el))
				{
					return true;
				}
				if (isNaN(minDate.getTime()))
				{
					return true;
				}
				else
				{
					var curDate = $(el).datepicker('getDate');
					return minDate <= curDate;
				}
			}, 'Date must be after start date'
		);


		jQuery.validator.addMethod("simplePassword", function (value, element, params)
			{
				var hasUpperCase = /[A-Z]/.test(value);
				var hasLowerCase = /[a-z]/.test(value);
				var hasNumbers = /\d/.test(value);
				var hasNonAlphas = /\W/.test(value);
				var badPass = (hasUpperCase + hasLowerCase + hasNumbers + hasNonAlphas < 1);
				return this.optional(element) || !badPass;
			}, "Password must contain at least<br/>one capital letter,<br/>one lower case letter,<br/>one numeric value and one symbol."
		);


		$.validator.setDefaults({
			ignore: [],
			errorPlacement: function (error, element)
			{
				if (element.hasClass('selectpicker'))
				{
					var elem = $('button[data-id=' + element.attr("name") + ']');
					elem.addClass('error');
					error.insertAfter(elem);
				}
				else if (element.hasClass('file-input'))
				{
					var elem = $('#' + element.attr('progress-id'));
					element.addClass('error');
					error.insertAfter(elem);
				}
				else if (element.parent().hasClass('input-group'))
				{
					element.addClass('error');
					error.insertAfter(element.parent());
				}
				else
				{
					error.insertAfter(element);
				}
			},
			unhighlight: function (element, errorClass, validClass)
			{
				if ($(element).hasClass('selectpicker'))
				{
					$('button[data-id=' + $(element).attr("name") + ']').removeClass(errorClass).addClass(validClass);
				}
				else
				{
					$(element).removeClass(errorClass).addClass(validClass);
				}
				$(element.form).find("label[for=" + element.id + "]." + errorClass)
					.remove();
			}
		});
	}

})();


$.fn.extend({
	getPath: function ()
	{
		var path, node = this;
		while (node.length)
		{
			var realNode = node[0],
			    id = realNode.id,
			    name = realNode.localName;

			if (id)
			{
				return '#' + id + (path ? '>' + path : '');
			}

			if (!name)
			{
				break;
			}

			name = name.toLowerCase();
			var parent = node.parent();
			var sameTagSiblings = parent.children(name);
			if (sameTagSiblings.length > 1)
			{
				allSiblings = parent.children();
				var index = allSiblings.index(realNode) + 1;
				if (index > 1)
				{
					name += ':nth-child(' + index + ')';
				}
			}
			path = name + (path ? '>' + path : '');
			node = parent;
		}
		return path;
	}
});
$.fn.setCursorPosition = function (pos)
{
	if ($(this).get(0).setSelectionRange)
	{
		$(this).get(0).setSelectionRange(pos, pos);
	}
	else if ($(this).get(0).createTextRange)
	{
		var range = $(this).get(0).createTextRange();
		range.collapse(true);
		range.moveEnd('character', pos);
		range.moveStart('character', pos);
		range.select();
	}
};

;
(function ()
{


})();

;;
(function ()
{

	_App.Event = function ()
	{
		this.initialize();
	};

	_App.Event.prototype =
	{

		listenerStore: {},

		initialize: function ()
		{
			this.listenerStore = {};
		},

		/**
		 * Register an Event Listener.
		 * @param id
		 * @param event
		 * @param callback
		 * @param type
		 */
		listen: function (id, event, callback, type)
		{
			if (!this.listenerStore[event])
			{
				this.listenerStore[event] = {};
			}
			this.listenerStore[event][id] = {
				"callback": callback,
				"type": (type ? type : "UseOnce")
			};
		},

		/**
		 * Remove a registered Event Listener.
		 * @param id
		 * @param event
		 */
		removeListener: function (id, event)
		{
			if (this.listenerStore[event] && this.listenerStore[event][id])
			{
				delete this.listenerStore[event][id];
			}
		},

		/**
		 * Trigger an event.
		 * @param event
		 * @param data
		 */
		trigger: function (event, data)
		{
			if (this.listenerStore[event])
			{
				for (var id in this.listenerStore[event])
				{
					this.listenerStore[event][id]["callback"](event, data);
					if ("UseOnce" == this.listenerStore[event][id]["type"])
					{
						delete this.listenerStore[event][id];
					}
				}
			}
		}

	};

})();
;;
(function ()
{

	_App.DataElement = function ()
	{

		this.initialize();

	};

	_App.DataElement.prototype =
	{

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		singleFilter: function (filter, value, fields)
		{
			if ('' == value)
			{
				return filter;
			}
			if (isNaN(value))
			{
				value = value.toLowerCase();
			}
			value = '%' + value + '%';
			var nested = {};
			for (var field in fields)
			{
				var param = App.Config.dataManglerCs
					? 'LOWER(' + fields[field] + ')'
					: fields[field];
				nested[param] = value;
			}
			filter.filters['singleSearch'] = nested;
			filter.count++;
			return filter;
		},

		populateSingleFilter: function (filters, filterId)
		{
			for (var field in filters)
			{
				var value = filters[field].substring(1, filters[field].length - 1)
				if ('' == $('#' + filterId).val())
				{
					$('#' + filterId).val(value);
				}
				return;
			}
		},

		filterIfnotEmpty: function (filter, element, field, op, append, defaultValue)
		{
			append = (append)
				? append
				: '';
			if ('' != $('#' + element).val() && null != $('#' + element).val())
			{
				op = op ? op + ' ' : '';
				var val = $('#' + element).val();
				val = ('' == val || !isNaN(val) || '' != op)
					? val
					: '%' + val + '%';
				if (filter.filters[field])
				{
					var nested = {};
					nested[field] = op + val + append;
					filter.filters[field + '-to'] = nested;
				}
				else
				{
					filter.filters[field] = op + val + append;
				}
				filter.count++;
			}
			return filter;
		},

		populateFilters: function (filters, map)
		{
			for (var field in map)
			{
				if (filters[field])
				{
					filters[field] = isNaN(filters[field])
						? filters[field].substring(1, filters[field].length - 1)
						: filters[field];
					$('#' + map[field]).val(filters[field]);
				}
			}
		},

		/*Example :
		 {
		 // General
		 id 				: '',
		 label 			: '',
		 icon 			: '',
		 disabled 		: false,
		 permission 		: true,
		 inputType 		: '',
		 maxlength 		: 100,
		 placeholder 	: '',
		 // Button
		 href 			: '',
		 btnPreset 		: 'Default',
		 btnType 		: 'button',
		 btnStyle 		: 'btn-default',
		 // Grid
		 headerStyle 	: '',
		 orderAsc 		:
		 {
		 id : '',
		 bind : $.proxy(
		 _w.namespace.orderSomeGrid,
		 this,
		 'table.fieldname',
		 'ASC'
		 )
		 },
		 orderDesc 	:
		 {
		 id : '',
		 bind : $.proxy(
		 _w.namespace.orderSomeGrid,
		 this,
		 'table.fieldname',
		 'DESC'
		 )
		 },
		 placeholder 	: '',
		 inputType 		: '',
		 actions 		: false,
		 bindClear 		: $.proxy(
		 _w.namespace.clearSomeGrid,
		 this
		 ),
		 bindSearch 		: $.proxy(
		 _w.namespace.searchSomeGrid,
		 this
		 ),
		 context 					: '',
		 contextLabelSpan 			: '',
		 contextLabelStyle 			: '',
		 contextInputSpan 			: '',
		 contextInputWrapperStyle 	: '',
		 contextInputStyle 			: '',
		 contextAttrib 				: '',
		 columnInputSpan 			: '',
		 columnInputWrapperStyle 	: '',
		 columnInputStyle 			: '',
		 columnAttrib 				: '',
		 rowStyle 					: '',
		 rowAttrib 					: '',
		 cellStyle 					: '',
		 cellAttrib 					: '',
		 cellPrepend 				: '',
		 pagerItemStyle 				: '',
		 pagerWrapperStyle 			: '',
		 // Form
		 labelSpan 				: '',
		 labelStyle 				: '',
		 inputSpan 				: '',
		 inputWrapperStyle 		: '',
		 inputStyle 				: '',
		 inputAttrib 			: '',
		 inputPrepend 			: '',
		 imageStyle 				: '',
		 iconSpan 				: '',
		 bind 					: '',
		 rules 					: {}
		 },*/
		GridTitleButtons: {
			handler: 'ConstructorComponentCollection',
			constructor: 'Button',
			items: {}
		},
		GridContextFilter: {
			handler: 'ConstructorComponentCollection',
			constructor: 'GridContextFilter',
			items: {}
		},
		GridColumns: {
			handler: 'GridConstructorComponentCollection',
			headerId: 'gridColumnHeaders',
			filterId: 'gridColumnFilters',
			items: {}
		},
		GridRowRepeater: {
			handler: 'ConstructorGridRowCollection',
			constructor: 'GridDataRow',
			items: {}
		},
		GridPageSize: {
			handler: 'GridPageSize',
			allowLarge: false
		},
		GridPager: {
			handler: 'GridPager'
		},
		GridRecords: {
			handler: 'GridRecords'
		},
		Button: {
			handler: 'Button',
			href: '',
			btnPreset: 'Default',
			btnType: 'button',
			btnStyle: 'btn-default',
		},
		Text: {
			handler: 'Text'
		},
		InlineNotification: {
			handler: 'InlineNotification'
		},
		LabeledText: {
			handler: 'LabeledText',
			labelStyle: '',
			textStyle: '',
		},
		Password: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'password',
			rules: {minlength: 5, maxlength: 150}
		},
		Checkbox: {
			handler: 'FieldComponent',
			type: 'checkbox',
			dataType: 'checkbox',
			checked: false,
			rules: {}
		},
		String: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {minlength: 2, maxlength: 150}
		},
		Tags: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			dataType: 'tags',
			rules: {maxlength: 250}
		},
		Number: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {number: true}
		},
		Digit: {
			handler: 'FieldComponent',
			type: 'input',
			inputType: 'text',
			rules: {digits: true}
		},
		Date: {
			handler: 'FieldComponent',
			type: 'date',
			rules: {dateISO: true}
		},
		Mobile: {
			handler: 'FieldComponent',
			type: 'mobile',
			mask: '+99 99 999 9999',
			rules: {mobile: true}
		},
		Amount: {
			handler: 'FieldComponent',
			type: 'amount',
			rules: {number: true}
		},
		Percentage: {
			handler: 'FieldComponent',
			type: 'percentage',
			rules: {number: true}
		},
		TextArea: {
			handler: 'FieldComponent',
			type: 'textarea',
			rows: 5,
			rules: {}
		},
		HtmlText: {
			handler: 'FieldComponent',
			type: 'htmltext',
			rules: {}
		},
		Image: {
			handler: 'FieldComponent',
			type: 'image',
			rules: {}
		},
		Video: {
			handler: 'FieldComponent',
			type: 'video',
			rules: {}
		},
		Audio: {
			handler: 'FieldComponent',
			type: 'audio',
			rules: {}
		},
		Attachment: {
			handler: 'FieldComponent',
			type: 'attachment',
			rules: {}
		},
		Document: {
			handler: 'FieldComponent',
			type: 'document',
			rules: {}
		},
		Collection: {
			handler: 'FieldComponent',
			type: 'collection',
			container: {
				container: 'GeneralCollectionContainer',
				containerTags: ['eid', 'label', 'labelStyle', 'containerStyle', 'items'],
				display: 'GeneralCollectionItem',
				displayTags: ['eid', 'label']
			},
			rules: {}
		},
		DependantDataSource: {
			handler: 'FieldComponent',
			type: 'select',
			dataSource: '',
			rules: {}
		},
		DataList: {
			handler: 'FieldComponent',
			type: 'select',
			title: 'Select',
			dataSource: '',
			dataList: [],
			rules: {}
		},
		Reference: {
			handler: 'FieldComponent',
			type: 'select',
			title: 'Select',
			dataSource: '',
			dataQuery: {
				isStatic: false,
				workspace: '',
				task: '',
				jobId: null,
				data: {},
				options: {},
				callback: null
			},
			rules: {digits: true}
		}

	};

})();

;;
(function ()
{

	_App.DataStruct = function ()
	{

		this.initialize();

	};

	_App.DataStruct.prototype =
	{

		dateFormat: 'yyyy-mm-dd',
		currencyUnit: 'R',
		mobileUnit: '<span class="glyphicon glyphicon-phone"></span>',
		currencyPrepend: 'R ',
		mobilePrepend: '+27 ',

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		Company: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'company',
				field: 'id',
				label: 'Company Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'company',
				field: 'name',
				label: 'Company Name',
				rules: {required: true}
			})
		},

		DataTransform: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'dataTransform',
				field: 'id',
				label: 'DataTransform Id',
				rules: {required: false}
			}),
			owner: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'owner',
				label: 'Owner',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityNames: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'dataTransform',
				field: 'entityNames',
				label: 'Data Entity',
				dataSource: 'DataTransform.Entity.List',
				dataQuery: {
					isStatic: false,
					workspace: 'DataTransform',
					task: 'DataTransform.EntitySelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true, digits: false},
				messages: {required: 'This field is required'}
			}),
			eventActions: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'dataTransform',
				field: 'eventActions',
				label: 'Data Action',
				multiple: true,
				dataSource: 'DataTransform.DataAction.List',
				dataList: [
					{value: 'Create', label: 'Create'},
					{value: 'Update', label: 'Update'},
					{value: 'Route', label: 'Route'},
					{value: 'Archive', label: 'Archive'},
					{value: 'UnArchive', label: 'UnArchive'},
					{value: 'Delete', label: 'Delete'},
					{value: 'UnDelete', label: 'UnDelete'},
				],
				rules: {maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			eventName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'eventName',
				label: 'Event Name',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'dataTransform',
				field: 'inputFields',
				label: 'Input Fields',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			transformations: $.extend(true, {}, _App.DataElement.prototype.Collection, {
				namespace: 'dataTransform',
				field: 'transformations',
				label: 'Transformations',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		Import: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'import',
				field: 'id',
				label: 'Import Id',
				rules: {required: false}
			}),
			label: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'import',
				disabled: true,
				field: 'label',
				label: 'Label',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 150, required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'import',
				field: 'name',
				label: 'Importer',
				dataSource: 'importHandlers',
				dataQuery: {
					isStatic: false,
					workspace: 'Import',
					task: 'Import.ListHandlers',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true, digits: false},
				messages: {required: "This field is required"}
			}),
			importDocument: $.extend(true, {}, _App.DataElement.prototype.Document, {
				namespace: 'import',
				field: 'importDocument',
				label: 'Import File',
				fileTypes: ['csv', 'txt'],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			fileType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'fileType',
				label: 'File Type',
				dataSource: 'import.fileTypes',
				dataList: [
					{value: 'CSV', label: 'CSV'}/*,
					 { value : 'Excel', label : 'Excel' }*/
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			delimiter: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'delimiter',
				label: 'Delimiter',
				dataSource: 'import.delimiters',
				dataList: [
					{value: '1', label: ','},
					{value: '2', label: ';'},
					{value: '3', label: '|'},
					{value: "4", label: 'TAB'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			enclosure: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'enclosure',
				label: 'Enclosure',
				dataSource: 'import.enclosures',
				dataList: [
					{value: '1', label: '"'},
					{value: '2', label: "'"},
					{value: '3', label: '`'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			escape: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'escape',
				label: 'Escape',
				dataSource: 'import.escapes',
				dataList: [
					{value: '1', label: "\\"}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			haveHeaders: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'import',
				field: 'haveHeaders',
				label: 'First line contains headers',
				dataSource: 'import.haveHeaders',
				dataList: [
					{value: 0, label: 'No'},
					{value: 1, label: 'Yes'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		ImportException: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'importException',
				field: 'id',
				label: 'Import Id',
				rules: {required: false}
			}),
			'import': $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'importException',
				field: 'import',
				label: 'Import',
				dataType: 'select',
				dataSource: 'importException.import.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Import',
					task: 'Import.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			row: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'importException',
				field: 'row',
				label: 'Row number',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			data: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'importException',
				field: 'data',
				label: 'Row data',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			'error': $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'importException',
				field: 'error',
				label: 'Error',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		ContractLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'contractLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			workFlow: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'workFlow',
				label: 'Workflow',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			contractName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'contractName',
				label: 'Contract name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'contractLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'contractLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'contractLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			memUsage: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'contractLog',
				field: 'memUsage',
				label: 'Memory usage ',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		ExecuteLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'executeLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			workFlow: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'workFlow',
				label: 'Workflow',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			contractName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'contractName',
				label: 'Contract name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'executeLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'executeLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			memUsage: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'executeLog',
				field: 'memUsage',
				label: 'Memory usage ',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			result: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'executeLog',
				field: 'result',
				label: 'Result',
				dataType: 'text',
				rules: {maxlength: 30, required: true},
				messages: {required: 'This field is required'}
			}),
			requestPacket: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'executeLog',
				field: 'requestPacket',
				label: 'Request packet',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		AccessLog: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'accessLog',
				field: 'id',
				label: 'Audit Id',
				rules: {required: false}
			}),
			url: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'accessLog',
				field: 'url',
				label: 'URL',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'accessLog',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'accessLog.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {required: 'This field is required'}
			}),
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'accessLog',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		Report: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'report',
				field: 'id',
				label: 'ReportBuilder Id',
				rules: {required: false}
			}),
			reportName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'report',
				field: 'reportName',
				label: 'Report name',
				dataType: 'text',
				rules: {maxlength: 200, required: true},
				messages: {required: 'This field is required'}
			}),
			baseEntityMeta: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'report',
				field: 'baseEntityMeta',
				label: 'Base report table',
				dataType: 'select',
				dataSource: 'report.baseEntityMeta.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'ReportBuilder',
					task: 'Meta.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			reportMode: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'report',
				field: 'reportMode',
				label: 'reportMode',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			reportDql: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'reportDql',
				label: 'DQL',
				dataType: 'textarea',
				rules: {required: false},
				messages: {required: 'This field is required'}
			}),
			reportJoins: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'reportJoins',
				label: 'Joins',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			staticSearchFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'staticSearchFields',
				label: 'Static search fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			dynamicSearchFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'dynamicSearchFields',
				label: 'Dynamic search fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			orderBy: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'report',
				field: 'orderBy',
				label: 'Order by',
				dataType: 'textarea',
				rules: {required: false},
				messages: {required: 'This field is required'}
			})
		},

		UnBlackList: {
			ipAddress: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'user',
				field: 'ipAddress',
				label: 'IP address',
				dataType: 'select',
				dataSource: 'loginFailures',
				dataQuery: false,
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			confirm: $.extend(true, {}, _App.DataElement.prototype.Checkbox, {
				namespace: 'user',
				field: 'confirmUnBlacklist',
				label: 'Yes, I\'m sure',
				dataType: 'checkbox',
				rules: {required: false},
				messages: {}
			}),
		},
		PermissionGroup: {
			select: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'permissionGroup',
				field: 'name',
				label: 'Select group to edit',
				dataType: 'select',
				dataSource: 'permissiongroup.select',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissionLevel: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'permissionGroup',
				field: 'permissionLevel',
				label: 'Permission level',
				dataType: 'select',
				dataSource: 'permissiongroup.permissionLevel',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.GetPermissionLevels',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		Profile: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'profile',
				field: 'id',
				label: 'Profile Id',
				rules: {required: false}
			}),
			permissionGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissionGroup',
				label: 'Permissions *',
				dataType: 'select',
				dataSource: 'profile.permissionGroup.select',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissionLevel: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissionLevel',
				label: 'Permission level',
				dataType: 'select',
				dataSource: 'profile.permissionLevel',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'PermissionGroup.GetPermissionLevels',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			permissions: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'permissions',
				label: 'Permissions',
				dataType: 'select',
				dataSource: 'permissions',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Permissions.FullSelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			department: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'profile',
				field: 'department',
				label: 'Department',
				dataType: 'select',
				dataSource: 'departments',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Department.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			username: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'username',
				label: 'Username',
				dataType: 'text',
				rules: {
					minlength: 3, maxlength: 100, required: true, create: {
						remote: {
							url: "/workspace/check-unique-username",
							type: "post"
						}
					}
				},
				messages: {required: "This field is required"}
			}),
			firstName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'firstName',
				label: 'Name',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 100, required: true},
				messages: {required: "This field is required"}
			}),
			familyName: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				field: 'familyName',
				label: 'Surname',
				dataType: 'text',
				rules: {minlength: 3, maxlength: 100, required: true},
				messages: {required: "This field is required"}
			}),
			email: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'profile',
				inputType: 'email',
				field: 'email',
				label: 'Email',
				rules: {
					maxlength: 255, email: true, required: true, create: {
						remote: {
							url: "/workspace/check-unique-email",
							type: "post"
						}
					}
				}
			}),
			mobile: $.extend(true, {}, _App.DataElement.prototype.Mobile, {
				namespace: 'profile',
				field: 'mobile',
				label: 'Mobile number',
				dataType: 'text',
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			jobState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'profile',
				field: 'jobState',
				label: 'Status',
				dataSource: 'userstatuses',
				dataList: [
					{value: 'Active', label: 'Active'},
					{value: 'Suspended', label: 'Suspended'},
					{value: 'Archived', label: 'Archived'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			})
		},

		Department: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'department',
				field: 'id',
				label: 'User Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'department',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			})
		},

		BusinessRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'businessRule',
				field: 'id',
				label: 'BusinessRule Id',
				rules: {required: false}
			}),
			owner: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'owner',
				label: 'Owner',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 50, required: true},
				messages: {required: 'This field is required'}
			}),
			dealType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'businessRule',
				field: 'dealType',
				label: 'Deal type',
				dataType: 'select2',
				dataSource: 'businessRule.dealtypes',
				dataList: [
					{value: 'Pre-paid', label: 'Pre-paid'},
					{value: 'Post paid', label: 'Post paid'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'businessRule',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			metaData: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'businessRule',
				field: 'metaData',
				label: 'Meta',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		Calculation: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'calculation',
				field: 'id',
				label: 'Calculation Id',
				rules: {required: false}
			}),
			priority: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'calculation',
				field: 'priority',
				label: 'Order',
				rules: {required: true}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			dealType: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'calculation',
				field: 'dealType',
				label: 'Deal type',
				dataType: 'select2',
				dataSource: 'calculation.dealtypes',
				dataList: [
					{value: 'Pre-paid', label: 'Pre-paid'},
					{value: 'Post paid', label: 'Post paid'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			dealCategory: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'calculation',
				field: 'dealCategory',
				label: 'Deal category',
				dataType: 'select2',
				dataSource: 'dealcategories',
				dataList: [
					{value: 'Device', label: 'Device'},
					{value: 'Data', label: 'Data'}
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'calculation',
				field: 'inputFields',
				label: 'Input Fields',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			transformations: $.extend(true, {}, _App.DataElement.prototype.Collection, {
				namespace: 'calculation',
				field: 'transformations',
				label: 'Transformations',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationHost: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationHost',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'module',
				label: 'Module',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityBase: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'entityBase',
				label: 'Entity Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entity: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'entity',
				label: 'Full Entity Name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			initStatus: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationHost',
				field: 'initStatus',
				label: 'DOA init status',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationGroup: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationGroup',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroup',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationGroup.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationGroup',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationGroupUser: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationGroupUser',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroupUser',
				field: 'delegationGroup',
				label: 'Delegation group',
				dataType: 'select',
				dataSource: 'delegationGroupUser.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationGroupUser',
				field: 'profile',
				label: 'User',
				dataType: 'select',
				dataSource: 'delegationGroupUser.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationRule',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationRule',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationRule.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationRule',
				field: 'delegationGroup',
				label: 'Delegation group',
				dataType: 'select',
				dataSource: 'delegationGroup.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationRule',
				field: 'message',
				label: 'Assignment message',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			status: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationRule',
				field: 'status',
				label: 'Status',
				dataType: 'text',
				rules: {maxlength: 20},
				messages: {required: 'This field is required'}
			})
		},

		DelegationMessage: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationMessage',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationMessage',
				field: 'delegationHost',
				label: 'Delegation host',
				dataType: 'select',
				dataSource: 'delegationMessage.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationMessage',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'message',
				label: 'Message',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			entityNames: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'entityNames',
				label: 'Entity names',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			inputFields: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationMessage',
				field: 'inputFields',
				label: 'Input fields',
				dataType: 'textarea',
				rules: {required: true},
				messages: {required: 'This field is required'}
			})
		},

		DelegationItem: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'id',
				label: 'Delegation Id',
				rules: {required: false}
			}),
			delegationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationHost',
				label: 'Delegation host',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationGroup: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationGroup',
				label: 'Delegation group',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationGroup.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationGroup.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			delegationRule: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'delegationItem',
				field: 'delegationRule',
				label: 'Delegation rule',
				disabled: true,
				dataType: 'select',
				dataSource: 'delegationItem.delegationRule.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Delegation',
					task: 'DelegationRule.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			itemId: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'itemId',
				label: 'Item ID',
				disabled: true,
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'name',
				label: 'Name',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'description',
				label: 'Description',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'delegationItem',
				field: 'escalationLevel',
				label: 'Escalation level',
				disabled: true,
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			escalationDeadline: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'delegationItem',
				field: 'escalationDeadline',
				label: 'Escalation deadline',
				disabled: true,
				rules: {},
				messages: {required: 'This field is required'}
			}),
			declineReason: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'delegationItem',
				field: 'declineReason',
				label: 'Decline reason',
				dataType: 'text',
				rules: {maxlength: 250},
				messages: {required: 'This field is required'}
			}),
			previousState: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'delegationItem',
				field: 'previousState',
				label: 'Previous status',
				disabled: true,
				dataType: 'text',
				rules: {maxlength: 50},
				messages: {required: 'This field is required'}
			}),
			stateChanged: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'delegationItem',
				field: 'stateChanged',
				label: 'Status changed',
				disabled: true,
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			jobState: {
				dataList: [
					{value: 'Pending', label: 'Pending'},
					{value: 'Approved', label: 'Approved'},
					{value: 'Declined', label: 'Declined'},
					{value: 'Cancelled', label: 'Cancelled'}
				]
			}
		},

		EscalationItem: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			escalationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationItem',
				field: 'escalationHost',
				label: 'Escalation host',
				dataType: 'select',
				dataSource: 'escalationItem.escalationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			escalationRule: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationItem',
				field: 'escalationRule',
				label: 'Escalation rule',
				dataType: 'select',
				dataSource: 'escalationItem.escalationRule.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationRule.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			itemId: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'itemId',
				label: 'Item ID',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationItem',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationItem',
				field: 'description',
				label: 'Description',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationItem',
				field: 'escalationLevel',
				label: 'Escalation level',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			escalationDeadline: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'escalationItem',
				field: 'escalationDeadline',
				label: 'Escalation deadline',
				rules: {},
				messages: {required: 'This field is required'}
			})
		},

		EscalationHost: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationHost',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'module',
				label: 'Module',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entityBase: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'entityBase',
				label: 'Entity Name',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			entity: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'entity',
				label: 'Full Entity Name',
				dataType: 'text',
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentField: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'assignmentField',
				label: 'Assignment Field',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			}),
			displayStateField: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationHost',
				field: 'displayStateField',
				label: 'Display-state Field',
				dataType: 'text',
				rules: {maxlength: 100, required: true},
				messages: {required: 'This field is required'}
			})
		},

		EscalationRule: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'id',
				label: 'Escalation Id',
				rules: {required: false}
			}),
			escalationHost: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'escalationRule',
				field: 'escalationHost',
				label: 'Escalation host',
				dataType: 'select',
				dataSource: 'escalationRule.escalationHost.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'Escalation',
					task: 'EscalationHost.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'name',
				label: 'Name',
				dataType: 'text',
				rules: {maxlength: 150, required: true},
				messages: {required: 'This field is required'}
			}),
			targetState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'targetState',
				label: 'Target status',
				dataType: 'select',
				dataSource: 'EscalationRule.HostStatus.List',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			escalationLevel: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'escalationLevel',
				label: 'Escalation level',
				dataType: 'text',
				rules: {},
				messages: {required: 'This field is required'}
			}),
			timeUnit: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'timeUnit',
				label: 'Time measure',
				dataType: 'select',
				dataSource: 'EscalationRule.TimeUnit.List',
				dataList: [
					{value: 'minutes', label: 'Minutes'},
					{value: 'hours', label: 'Hours'},
					{value: 'days', label: 'Days'},
				],
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			numUnits: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'escalationRule',
				field: 'numUnits',
				label: 'Time units',
				dataType: 'text',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentId: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'assignmentId',
				label: 'Assign to',
				dataType: 'select',
				dataSource: 'EscalationRule.HostAssignment.List',
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			assignmentLabel: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'assignmentLabel',
				label: 'Assign to',
				dataType: 'text',
				disabled: true,
				rules: {maxlength: 250, required: true},
				messages: {required: 'This field is required'}
			}),
			displayStateValue: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'escalationRule',
				field: 'displayStateValue',
				label: 'New status',
				dataType: 'select',
				dataSource: 'EscalationRule.HostStatus.List',
				rules: {maxlength: 50, required: true},
				messages: {required: 'This field is required'}
			}),
			emailTo: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'escalationRule',
				field: 'emailTo',
				label: 'Email to',
				dataType: 'text',
				rows: 3,
				rules: {maxlength: 1000, required: false},
				messages: {required: 'This field is required'}
			}),
			message: $.extend(true, {}, _App.DataElement.prototype.TextArea, {
				namespace: 'escalationRule',
				field: 'message',
				label: 'Escalation message',
				dataType: 'text',
				rows: 6,
				rules: {maxlength: 1000, required: false},
				messages: {required: 'This field is required'}
			}),
			status: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'escalationRule',
				field: 'status',
				label: 'Status',
				dataType: 'text',
				rules: {maxlength: 20},
				messages: {required: 'This field is required'}
			})
		},

		Meta: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'meta',
				field: 'id',
				label: 'Company Id',
				rules: {required: false}
			}),
			project: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'meta',
				field: 'project',
				label: 'Project',
				dataSource: 'projects',
				dataQuery: {
					isStatic: true,
					workspace: 'Construct',
					task: 'Project.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true}
			}),
			module: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'meta',
				field: 'module',
				label: 'Module',
				dataSource: 'modules',
				dataQuery: {
					isStatic: true,
					workspace: 'Construct',
					task: 'Module.SelectList',
					jobId: null,
					data: {
						Filter: {
							project: _App.prototype.projectId
						}
					},
					options: {},
					callback: null
				},
				rules: {required: true}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100}
			}),
			type: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'type',
				label: 'Type',
				rules: {required: true, maxlength: 100}
			}),
			subType: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'subType',
				label: 'Sub Type',
				rules: {required: true, maxlength: 100}
			}),
			description: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'meta',
				field: 'description',
				label: 'Description',
				rules: {required: false, maxlength: 100}
			}),
			data: $.extend(true, {}, _App.DataElement.prototype.Textarea, {
				namespace: 'meta',
				field: 'data',
				label: 'Data',
				rules: {required: true, maxlength: 65000}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'meta',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'meta',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		DocumentCategory: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'documentCategory',
				field: 'id',
				label: 'Document Category Id',
				rules: {required: false}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'documentCategory',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentCategory',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentCategory',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		DocumentRepo: {
			id: $.extend(true, {}, _App.DataElement.prototype.Number, {
				namespace: 'documentRepo',
				field: 'id',
				label: 'Document Category Id',
				rules: {required: false}
			}),
			profile: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'documentRepo',
				field: 'profile',
				label: 'Profile',
				dataType: 'select',
				dataSource: 'documentRepo.profile.selectlist',
				dataQuery: {
					isStatic: false,
					workspace: 'User',
					task: 'Profile.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {},
				messages: {}
			}),
			documentCategory: $.extend(true, {}, _App.DataElement.prototype.Reference, {
				namespace: 'documentRepo',
				field: 'documentCategory',
				label: 'Category',
				dataSource: 'documentRepo.categories',
				dataQuery: {
					isStatic: true,
					workspace: 'DocumentRepo',
					task: 'DocumentCategory.SelectList',
					jobId: null,
					data: {},
					options: {},
					callback: null
				},
				rules: {required: true},
				messages: {required: 'This field is required'}
			}),
			document: $.extend(true, {}, _App.DataElement.prototype.Document, {
				namespace: 'documentRepo',
				field: 'document',
				label: 'Document',
				fileTypes: ['txt', 'docx', 'doc', 'xls', 'jpg', 'jpeg', 'png', 'bmp', 'tiff'],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			name: $.extend(true, {}, _App.DataElement.prototype.String, {
				namespace: 'documentRepo',
				field: 'name',
				label: 'Name',
				rules: {required: true, maxlength: 100},
				messages: {required: 'This field is required'}
			}),
			tags: $.extend(true, {}, _App.DataElement.prototype.Tags, {
				namespace: 'documentRepo',
				field: 'tags',
				label: 'Tags',
				rules: {required: false, maxlength: 250}
			}),
			jobState: $.extend(true, {}, _App.DataElement.prototype.DataList, {
				namespace: 'documentRepo',
				field: 'jobState',
				label: 'Status',
				dataSource: 'documentRepo.statusList',
				dataList: [
					{value: 'Active', label: 'Active'},
					{value: 'Archived', label: 'Archived'}
				],
				rules: {required: true},
				messages: {required: "This field is required"}
			}),
			created: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentRepo',
				field: 'created',
				label: 'Created',
				rules: {required: false}
			}),
			updated: $.extend(true, {}, _App.DataElement.prototype.Date, {
				namespace: 'documentRepo',
				field: 'updated',
				label: 'Updated',
				rules: {required: false}
			})
		},

		/* ConStruct::Append */

	};

})();
;;
(function ()
{

	_App.DataStore = function ()
	{
		this.initialize();
	};

	_App.DataStore.prototype =
	{

		metaStore: {},
		dataStore: {},
		itemStore: {},
		listenerStore: {},
		autoRemoveData: {},
		autoAddData: {},
		reverse: {'years': true},

		initialize: function ()
		{
			_r.DataStore = {};
			this.listenerStore = {};
		},


		clearAutoRemove: function (dataId)
		{
			if (undefined != this.autoRemoveData[dataId])
			{
				delete this.autoRemoveData[dataId];
			}
		},

		autoRemoveItem: function (dataId, id)
		{
			if (undefined == this.autoRemoveData[dataId])
			{
				this.autoRemoveData[dataId] = {};
			}
			this.autoRemoveData[dataId][id] = true;
			if (undefined != this.dataStore[dataId])
			{
				var updated = false;
				for (var i in this.dataStore[dataId])
				{
					if (this.autoRemoveData[dataId][this.dataStore[dataId][i].value])
					{
						updated = true;
						delete this.dataStore[dataId][i];
					}
				}
				if (updated)
				{
					if (this.listenerStore[dataId])
					{
						for (var id in this.listenerStore[dataId])
						{
							this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
						}
					}
				}
			}
		},

		autoAddItem: function (dataId, id, label)
		{
			if (undefined != this.dataStore[dataId])
			{
				var updated = true;
				for (var i in this.dataStore[dataId])
				{
					if (this.dataStore[dataId][i].value == id)
					{
						updated = false;
					}
				}

				if (updated)
				{
					this.dataStore[dataId].push({'value': id, 'label': label});
					if (this.listenerStore[dataId])
					{
						for (var id in this.listenerStore[dataId])
						{
							this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
						}
					}
				}
			}
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		setItem: function (param, value)
		{
			this.itemStore[param] = value;
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		incrementItem: function (param, step)
		{
			step = (undefined == step)
				? 1
				: step;
			this.itemStore[param] += step;
		},

		/**
		 * Set param for storage.
		 * @param param
		 * @param value
		 */
		itemCeil: function (param, value)
		{
			if (undefined == this.itemStore[param] || isNaN(this.itemStore[param]))
			{
				this.itemStore[param] = value;
			}
			else if (value > this.itemStore[param])
			{
				this.itemStore[param] = value;
			}
		},

		/**
		 * Retrieve param from storage
		 * @param param
		 * @param defaultValue
		 * @returns
		 */
		getItem: function (param, defaultValue)
		{
			return null != this.itemStore[param] && undefined != this.itemStore[param]
				? this.itemStore[param]
				: defaultValue;
		},

		/**
		 * Remove param from storage
		 * @param param
		 */
		removeItem: function (param)
		{
			if (undefined != this.itemStore[param])
			{
				delete this.itemStore[param];
			}
		},

		/**
		 * Register an Event Listener.
		 * @param id
		 * @param dataId
		 * @param callback
		 * @param type
		 */
		listen: function (id, dataId, callback, type)
		{
			if (!this.listenerStore[dataId])
			{
				this.listenerStore[dataId] = {};
			}
			this.listenerStore[dataId][id] = {
				"callback": callback,
				"type": (type ? type : "UseOnce")
			};
			if (this.dataStore[dataId])
			{
				this.listenerStore[dataId][id]["callback"](dataId, this.dataStore[dataId]);
				if ("UseOnce" == this.listenerStore[dataId][id]['type'])
				{
					delete this.listenerStore[dataId][id];
				}
			}
		},

		/**
		 * Remove a registered Event Listener.
		 * @param id
		 * @param dataId
		 */
		removeListener: function (id, dataId)
		{
			if (this.listenerStore[dataId] && this.listenerStore[dataId][id])
			{
				delete this.listenerStore[dataId][id];
			}
		},

		/**
		 * Set dataset.
		 * @param dataId
		 * @param data
		 */
		setData: function (dataId, data, noSwap)
		{
			if (typeof data === "function")
			{
				data = data();
			}
			if (!noSwap && this.reverse[dataId])
			{
				data.reverse();
			}
			if (this.autoRemoveData[dataId])
			{
				var newData = [];
				for (var i in data)
				{
					if (!this.autoRemoveData[dataId][data[i].value])
					{
						newData.push(data[i]);
					}
				}
				data = newData;
			}

			this.dataStore[dataId] = data;
			if (this.listenerStore[dataId])
			{
				for (var id in this.listenerStore[dataId])
				{
					this.listenerStore[dataId][id]["callback"](dataId, data);
					if ("UseOnce" == this.listenerStore[dataId][id]["type"])
					{
						delete this.listenerStore[dataId][id];
					}
				}
			}
		},

		/**
		 * Retrieve dataset.
		 * @param dataId
		 */
		getData: function (dataId, exclude)
		{
			if (undefined != this.dataStore[dataId] && undefined != exclude)
			{
				var filtered = [];
				for (var i in this.dataStore[dataId])
				{
					var match = false;
					for (var field in exclude)
					{
						if (this.dataStore[dataId][i][field] == exclude[field])
						{
							var match = true;
						}
					}
					if (!match)
					{
						filtered.push(this.dataStore[dataId][i]);
					}
				}
				return filtered;
			}
			return undefined != this.dataStore[dataId]
				? this.dataStore[dataId]
				: [];
		},

		/**
		 * Retrieve label for value from select list.
		 * @param dataId
		 * @param value
		 * @param defaultValue
		 */
		getLabelFromValue: function (dataId, value, defaultValue)
		{
			if (undefined != this.dataStore[dataId])
			{
				for (var i in this.dataStore[dataId])
				{
					if (value == this.dataStore[dataId][i].value)
					{
						return this.dataStore[dataId][i].label;
					}
				}
			}
			return undefined == defaultValue
				? null
				: defaultValue;
		},

		/**
		 * Extract data from api response and set to dataStore.
		 * @param dataId
		 * @param apiResponse
		 */
		setDataFromApiResponse: function (dataId, callback, apiResponse)
		{
			delete _r[dataId];
			this.setData(dataId,
				(apiResponse.Data.DataSet)
					? apiResponse.Data.DataSet
					: apiResponse.Data
			);
			if (undefined != callback)
			{
				callback();
			}
		},

		/**
		 * Load a select list dataset via api.
		 * @param dataId
		 * @param isStatic
		 * @param workspace
		 * @param task
		 * @param jobId
		 * @param data
		 * @param options
		 */
		loadSelectListData: function (dataId, isStatic, workspace, task, jobId, data, options, callback)
		{
			if (_r[dataId])
			{
				return;
			}
			_r[dataId] = true;
			if (isStatic && App.DataStore.dataStore[dataId])
			{
				App.DataStore.setData(dataId, App.DataStore.dataStore[dataId], true);
				return;
			}

			if ('function' == typeof data)
			{
				data = data();
			}

			App.DataStore.metaStore[dataId] = {};
			App.DataStore.metaStore[dataId].data = data
				? data
				: {};
			App.DataStore.metaStore[dataId].options = options
				? options
				: {};
			var apiTask = App.API.taskContract('DataStore.' + dataId);

			if (!apiTask || !apiTask.Hash || apiTask.Response.Task != task)
			{
				App.API.getTask(
					'DataStore.' + dataId, workspace, task, jobId,
					{},
					$.proxy(App.DataStore._loadData, this, dataId, isStatic, callback),
					_w.taskContractError
				);
			}
			else
			{
				App.DataStore._loadData(dataId, isStatic, callback);
			}
		},

		_loadData: function (dataId, isStatic, callback)
		{
			App.API.execTask(
				'DataStore.' + dataId,
				App.DataStore.metaStore[dataId].data,
				App.DataStore.metaStore[dataId].options,
				$.proxy(App.DataStore.setDataFromApiResponse, this, dataId, callback),
				_w.taskExecError
			);
		}

	};

})();

;;
(function ()
{

	_App.Theme = function ()
	{

		this.initialize();

	};

	_App.Theme.prototype =
	{

		initialize: function ()
		{
			// Nothing needed here just yet.
		},

		Icon: {
			'Glyphicon': '<span [eid] class="glyphicon glyphicon-[name] [style]"></span>'
		},

		Menu: {
			'SectionOpen': '<div class="sub-menu no-capture [span]">',
			'SectionClose': '</div>',
			'ListOpen': '<ul>',
			'ListClose': '</ul>',
			'MenuHeader': '<li id="[eid]" class="sub-menu-header no-capture">[title]</li>',
			'MenuMain': '<li id="[eid]" class="no-capture"><a class="no-capture" href="#/[href]">[title]</a></li>',
			'MenuSub': '<li id="[eid]"><a class="menu-indent no-capture" href="#/[href]">[title]</a></li>',
			'DropDown': '<li class="dropdown no-capture">'
			            + '<a href="#" class="dropdown-toggle" data-toggle="dropdown">[title] <b class="caret"></b></a>'
			            + '<div class="dropdown-menu no-capture [dropDownStyle]">'
			            + '[items]'
			            + '</div>'
			            + '</li>',
			'ContextOptionsHeading': '<a class="list-group-item heading">Options</a>',
			'ContextMenuItem': '<a id="[eid]" class="list-group-item [active]" href="#/[href]"> [title] </a>',
			'ContextMenuItemNoHref': '<a id="[eid]" class="list-group-item handy [active]"> [title] </a>'
		},

		NotifyList: {
			'DefaultContent': '<ul id="notificationsList"><li class="notice-header">Notifications</li></ul>',
			'Category': '<ul data-category="[category]"></ul>',
			'Item': '<li id="[eid]" class="notice-item" data-category="[category]">'
			        + '[title]'
			        + '</li>'
		},

		Button: {
			'GridExport': '&nbsp;<button type="[type]" [eid] [href] class="btn [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Default':     '&nbsp;<button type="[type]" [eid] [href] class="btn [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Big':         '&nbsp;<button type="[type]" [eid] [href] class="btn btn-lg [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Small':       '&nbsp;<button type="[type]" [eid] [href] class="btn btn-sm [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'Tiny':        '&nbsp;<button type="[type]" [eid] [href] class="btn btn-xs [style]" [disabled]>'
			               + '	[icon] [label]'
			               + '</button>',
			'GroupButton': '<button type="button" [eid] class="btn btn-default [style]" [disabled]>'
			               + '	[icon] [label] '
			               + '</button>'
		},

		Grid: {
			'defaults': {
				searchButtonStyle: 'btn-primary btn-sm btn-submit-search',
				resetButtonStyle: 'btn-sm btn-clear-search',
				contextDivSpan: 'col-sm-4',
				contextLabelSpan: 'col-sm-12',
				contextLabelStyle: '',
				contextInputSpan: 'col-sm-12',
				contextInputWrapperStyle: '',
				contextInputStyle: 'input-sm',
				columnInputSpan: 'col-sm-12',
				columnInputWrapperStyle: 'filter-input',
				columnInputStyle: '',
			},
			'SingleSearchWrapper': '<td colspan="[itemCount]">'
			                       + '<form id="[formId]" class="form-inline singleSearchFilter" role="form">'
			                       + '<div class="form-group col-sm-4">[filter]</div>'
			                       + '</form>'
			                       + '</td>',
			'ColumnHeader':        '<th class="[headerStyle]">'
			                       + '[order]<span class="text" data-item="[item]">[label]</span>'
			                       + '</th>',
			'ColumnFilterWrapper': '<td>'
			                       + '[filter]'
			                       + '</td>',
			'DataRow':             '<tr [rowId] class="[rowStyle]" [rowAttrib]>'
			                       + '[cells]'
			                       + '</tr>',
			'DataCell':            '<td class="[cellStyle]" [cellAttrib]>'
			                       + '[prepend][value][append]'
			                       //+ '<a href="#" class="[cellStyle] editable editable-click" data-type="text" data-placement="right" data-title="[cellStyle]"> [prepend][value][append]</a>'
			                       + '</td>',
			'IconCheckLocked': '<span class="glyphicon glyphicon-lock green"></span>',
			'IconCheckTrue': '<span class="glyphicon glyphicon-ok green"></span>',
			'IconCheckFalse': '<span class="glyphicon glyphicon-remove red"></span>',
			'IconTransfer': '<span class="glyphicon glyphicon-transfer yellow"></span>',
			'CheckValueEditableTrue': '<span data-id="[rowId]" data-field="[dataField]" data-value="1" class="glyphicon glyphicon-ok green handy editable-check"></span>',
			'CheckValueEditableFalse': '<span data-id="[rowId]" data-field="[dataField]" data-value="0" class="glyphicon glyphicon-remove red handy editable-check"></span>',
			'Pager':               '<div class="col-sm-12 [wrapperStyle]">'
			                       + '<ul class="pagination pagination-sm pull-right handy [eid]">'
			                       + '<li><a data-page="1" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-left"></span><span class="glyphicon glyphicon-chevron-left"></span> </a></li>'
			                       + '<li><a data-page="[stepDown]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-left"></span> </a></li>'
			                       + '[items]'
			                       + '<li><a data-page="[stepUp]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-right"></span> </a></li>'
			                       + '<li><a data-page="[maxPage]" class="[eid] [itemStyle]"> <span class="glyphicon glyphicon-chevron-right"></span><span class="glyphicon glyphicon-chevron-right"></span> </a></li>'
			                       + '</ul></div>',
			'PagerItem': '<li><a data-page="[pageNumber]" class="[eid] [itemStyle]"><b>[pageNumber]</b></a></li>',
			'PagerActiveItem': '<li class="active"><span data-page="[pageNumber]" class="[eid] [itemStyle]"><b>[pageNumber]</b></span></li>',
			'PageSizeSelector':    '<div class="btn-group hidden-xs [eid]">'
			                       + '<button type="button" class="btn btn-sm btn-default">Display [recordsPerPage] Rows</button>'
			                       + '<button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown">'
			                       + '<span class="caret"></span>'
			                       + '<span class="sr-only">Toggle Dropdown</span>'
			                       + '</button>'
			                       + '<ul id="[eid]Options" class="dropdown-menu" role="menu">'
			                       + '<li data-size="10"><a class="handy">Display 10 Rows</a></li>'
			                       + '<li data-size="25"><a class="handy">Display 25 Rows</a></li>'
			                       + '<li data-size="50"><a class="handy">Display 50 Rows</a></li>'
			                       + '<li data-size="100"><a class="handy">Display 100 Rows</a></li>'
			                       + '<li data-size="500" class="ghost"><a class="handy">Display 500 Rows</a></li>'
			                       + '</ul>'
			                       + '</div>',
			'RecordUpdateAction':  'Are you sure you want to save your changes? '
			                       + '<a id="[eid]_yes" class="handy">YES</a> | '
			                       + '<a id="[eid]_no" class="handy">NO</a>',
			'ActionDropdown':      '<span class="confirm" data-id="[rowId]"></span><div class="btn-group">'
			                       + '<button id="aDrpBtn[rowId]" type="button" class="btn btn-xs btn-default dropdown-toggle" data-toggle="dropdown">'
			                       + '<span id="aDrpBtnIcn[rowId]" class="glyphicon glyphicon-cog"></span>'
			                       + '&nbsp;&nbsp;&nbsp;<span id="aDrpBtnCrt[rowId]" class="caret"></span>'
			                       + '</button>'
			                       + '<ul id="aDrpUl[rowId]" class="dropdown-menu dropdown-sm" role="menu" data-id="[rowId]">'
			                       + '[items]'
			                       + '</ul>'
			                       + '</div>',
			'MultiActionDropdown': '<div class="btn-group">'
			                       + '<button type="button" class="btn btn-sm btn-sm [btnStyle] btn-title-action dropdown-toggle" data-toggle="dropdown">'
			                       + '<span>[buttonLabel]</span>'
			                       + '&nbsp;&nbsp;&nbsp;<span class="caret"></span>'
			                       + '</button>'
			                       + '<ul class="dropdown-menu" role="menu"">'
			                       + '[items]'
			                       + '</ul>'
			                       + '</div>',
			'ActionDropdownItem': '<li><a class="handy" data-action="[action]">[label]</a></li>',
			'ConfirmationContent': '<button type="button" id="actionConfirmation" class="btn btn-sm btn-success">'
			                       + '<span class="glyphicon glyphicon-ok"></span>&nbsp;&nbsp;'
			                       + 'Yes </button>&nbsp;'
			                       + '<button type="button" id="actionDecline" class="btn btn-sm btn-danger">'
			                       + '<span class="glyphicon glyphicon-remove"></span>&nbsp;&nbsp;'
			                       + 'No </button>'
		},

		Display: {

			'InlineNotification': '<div class="col-md-12 grey-bg">'
			                      + '<div class="col-md-1 glyphicon-margin-top-8"><span class="glyphicon glyphicon-info-sign"></span></div>'
			                      + '<div class="col-md-10">[message]</div>'
			                      + '</div>',
			'Wizard':             '<div id="[eid]" class="wizard">'
			                      + '<ul class="steps">'
			                      + '[steps]'
			                      + '</ul>'
			                      + '</div>'
			                      + '<div class="step-content">'
			                      + '[contentItems]'
			                      + '</div>',
			'WizardStep':         '<li data-target="#[contentId]" class="[active]"><span class="badge">[stepNumber]</span>'
			                      + '<span class="content">'
			                      + '<span class="step-title">Step [stepNumber]</span><br/>'
			                      + '<span class="step-description">[title]</span>'
			                      + '</span>'
			                      + '<span class="chevron"></span></li>',
			'WizardContent': '<div class="step-pane [active]" id="[eid]">[content]</div>',
			'BoxListItem':        '<div class="box-list-item">'
			                      + '<span data-id="[dataId]" class="box-list-item-remove glyphicon glyphicon-remove handy pull-right"></span>'
			                      + '<div class="box-list-item-title">[title]</div>'
			                      + '<div class="box-list-item-content">[content]</div>'
			                      + '</div>'
		},

		Field: {
			'defaults': {
				labelSpan: 'col-sm-5',
				labelStyle: '',
				inputSpan: 'col-sm-7',
				inputWrapperStyle: '',
				inputStyle: '',
			},
			'Collection': {
				'GeneralContainer': '<label for="collectionContainer_[eid]" class="[labelStyle]">[label]</label>'
				                    + '<div id="collectionContainer_[eid]" class="[containerStyle]">'
				                    + '[items]'
				                    + '</div>',
				'GeneralItem':      '<span id="collectionTag_[eid]">'
				                    + '[value]'
				                    + '</span>'
			},
			'Editable': '<a class="handy editable-display" id="[eid]" data-type="[dataType]" data-pk="[pid]" data-title="[dataTile]">'
			                           + '[value]'
			                           + '</a>',
			'CustomEditable':          '<a class="handy editable-display [style]" id="[eid]" data-pk="[pid]" data-sk="[sid]" data-type="[dataType]">'
			                           + '[value]'
			                           + '</a>'
			                           + '<input type="text" id="[eid]_input" class="editable-input ghost [style]" data-pk="[pid]" data-sk="[sid]">',
			'Input':                   '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>',
			'InputNoLabel':            '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>',
			'InputWithPrepend':        '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<span class="input-group-addon">[prepend]</span>'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'InputWithAppend':         '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '<span class="input-group-addon">[append]</span>'
			                           + '</div>'
			                           + '</div>',
			'InputWithPrependNoLabel': '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div class="input-group">'
			                           + '<span class="input-group-addon">[prepend]</span>'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]"'
			                           + ' class="form-control [inputStyle]" placeholder="[placeholder]" [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'Checkbox':                '<label for="[eid]" class="checkbox-inline [labelStyle]">'
			                           + '<input type="checkbox" id="[eid]" name="[eid]" class="[inputStyle]" value="[value]"'
			                           + ' [attrib] [checked] [disabled]> [label]'
			                           + '</label>',
			'FormCheckbox':            '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle] check-align-left">'
			                           + '<input type="checkbox" id="[eid]" name="[eid]" class="[inputStyle]" value="[value]"'
			                           + ' [attrib] [checked] [disabled]>'
			                           + '</div>',
			'Select':                  '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="sp selectpicker show-menu-arrow [inputStyle]"'
			                           + ' data-size="[dataSize]" [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2':                 '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2Div':              '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'SelectNoLabel':           '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="sp selectpicker show-menu-arrow [inputStyle]"'
			                           + ' data-size="[dataSize]" [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2NoLabel':          '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<select id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '[options]'
			                           + '</select>'
			                           + '</div>',
			'Select2NoLabelDiv':       '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<div id="[eid]" name="[eid]" class="selector2 show-menu-arrow [inputStyle]"'
			                           + ' [attrib] [disabled]>'
			                           + '</div>'
			                           + '</div>',
			'SelectOption': '<option value="[value]" [selected]>[label]</option>',
			'TextArea':                '<label for="[eid]" class="[labelSpan] control-label [labelStyle]">[label]</label>'
			                           + '<div class="[inputSpan] [inputWrapperStyle]">'
			                           + '<textarea id="[eid]" name="[eid]" class="form-control [inputStyle]" rows="[rows]" [attrib] [disabled]>[value]</textarea>'
			                           + '</div>',
			'HtmlTextArea':            '<div id="[eid]" name="[eid]" class="[inputStyle]" [attrib] [disabled]>'
			                           + '[value]</div>',
			'Image':                   '<label for="btn_[eid]" class="[labelSpan] control-label [labelStyle] no-capture">[label]</label>'
			                           + '<div id="container_[eid]" class="[inputSpan] [inputWrapperStyle] no-capture">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/image-upload">'
			                           + '<input type="hidden" id="fileid_[eid]" value="[value]">'
			                           + '<div class="input-group no-capture">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]" progress-id="progress_[eid]"'
			                           + ' class="form-control file-input [inputStyle] no-capture" placeholder="[placeholder]" [attrib] disabled>'
			                           + '<span class="input-group-btn no-capture">'
			                           + '<button type="button" id="[uid]" class="btn btn-sm btn-primary no-capture" [disabled] title="Browse for file"><span class="glyphicon glyphicon-search"></span></button>'
			                           + '<button type="button" id="[did]" class="btn btn-sm btn-primary no-capture ghost" title="Download" disabled><span class="glyphicon glyphicon-download"></span></button>'
			                           + '</span>'
			                           + '</div>'
			                           + '<div id="progress_[eid]" class="progress progress-thin progress-striped active progress-container ghost no-capture">'
			                           + '<div class="progress-bar progress-bar-success no-capture"></div>'
			                           + '</div>'
			                           + '</div>',
			'Video':                   '<input type="text" id="[eid]" value="[value]" class="col-sm-12" placeholder="YouTube Video ID">'
			                           + '<img id="img_[eid]" src="/img/app/misc/[defaultImage]" class="img-responsive img-thumbnail [videoStyle]">'
			                           + '<div id="vidcon_[eid]" class="video-container" style="display:none;">'
			                           + '<iframe id="vid_[eid]"></iframe>'
			                           + '</div>',
			'Audio':                   '<input id="btn_[eid]" class="hide" type="file" name="files[]" data-url="/workspace/audio-upload">'
			                           + '<input type="hidden" id="[eid]" value="[value]">'
			                           + '<img id="img_[eid]" src="/img/app/misc/[defaultImage]" class="img-responsive img-thumbnail [audioStyle]">'
			                           + '<div id="jquery_jplayer_[eid]" class="jp-jplayer"></div>'
			                           + '<div id="audcon_[eid]" class="jp-audio-container" style="display:none;">'
			                           + '<div class="jp-audio">'
			                           + '<div class="jp-type-single">'
			                           + '<div id="jp_interface_[eid]" class="jp-interface">'
			                           + '<ul class="jp-controls">'
			                           + '<li><a class="jp-play handy" tabindex="1">play</a></li>'
			                           + '<li><a class="jp-pause handy" tabindex="1">pause</a></li>'
			                           + '<li><a class="jp-mute handy" tabindex="1">mute</a></li>'
			                           + '<li><a " class="jp-unmute handy" tabindex="1">unmute</a></li>'
			                           + '</ul>'
			                           + '<div class="jp-progress-container">'
			                           + '<div class="jp-progress">'
			                           + '<div class="jp-seek-bar">'
			                           + '<div class="jp-play-bar"></div>'
			                           + '</div></div></div>'
			                           + '<div class="jp-volume-bar-container">'
			                           + '<div class="jp-volume-bar">'
			                           + '<div class="jp-volume-bar-value"></div>'
			                           + '</div></div></div></div></div></div>',
			'Attachment':              '<div class="[iconSpan]">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/attachment-upload">'
			                           + '<input type="hidden" id="[eid]" value="[value]">'
			                           + '<img id="doc_[eid]" src="/img/vendor/misc/upload.png" class="img-thumbnail handy [imageStyle] no-capture">'
			                           + '</div><div class="[labelSpan] no-capture">'
			                           + '<label for="btn_[eid]" class="no-capture">[label]</label>'
			                           + '</div>',
			'Document':                '<label for="btn_[eid]" class="[labelSpan] control-label [labelStyle] no-capture">[label]</label>'
			                           + '<div id="container_[eid]" class="[inputSpan] [inputWrapperStyle] no-capture">'
			                           + '<input id="btn_[eid]" class="hide no-capture" type="file" name="files[]" data-url="/workspace/document-upload">'
			                           + '<input type="hidden" id="fileid_[eid]" value="[value]">'
			                           + '<div class="input-group no-capture">'
			                           + '<input type="[type]" id="[eid]" name="[eid]" value="[value]" progress-id="progress_[eid]"'
			                           + ' class="form-control file-input [inputStyle] no-capture" placeholder="[placeholder]" [attrib] disabled>'
			                           + '<span class="input-group-btn no-capture">'
			                           + '<button type="button" id="[uid]" class="btn btn-sm btn-primary no-capture" [disabled] title="Browse for file"><span class="glyphicon glyphicon-search"></span></button>'
			                           + '<button type="button" id="[did]" class="btn btn-sm btn-primary no-capture ghost" title="Download" disabled><span class="glyphicon glyphicon-download"></span></button>'
			                           + '</span>'
			                           + '</div>'
			                           + '<div id="progress_[eid]" class="progress progress-thin progress-striped active progress-container ghost no-capture">'
			                           + '<div class="progress-bar progress-bar-success"></div>'
			                           + '</div>'
			                           + '</div>',
			'Collector':               '<div class="accordion" id="[eid]">'
			                           + '</div>'
		}

	};

})();

;;
(function ()
{

	_App.Config = function ()
	{

		this.initialize();

	};

	_App.Config.prototype =
	{

		dataManglerCs: false,

		appKey: 'MUKURU',

		sectionLandingPage: {
			Brochure: '/',
			Portal: '/purchase',
			Admin: '/orders'
		},

		isDevEnvironment: (window.location.hostname == 'exchange.local'
		                   || window.location.hostname == 'exchange.local'),

		initialize: function () {}

	};

})();
;;
(function ()
{

	_App.ElementLibrary = function ()
	{
		this.initialize();
	};

	_App.ElementLibrary.prototype =
	{

		initialize: function ()
		{
			// Nothing to do.
		},

		ImageLoader: function (uri, size)
		{
			var id1 = Math.floor((Math.random() * 99999) + 1);
			var id2 = Math.floor((Math.random() * 9999) + 1)
			var imgId = 'img_' + id1.toString() + id2.toString();
			var html = '<div id="' + imgId + '" class="image-loader ' + size + ' image-load-container"></div>';

			var js = $.proxy(function (imgId, uri)
			{
				$('#' + imgId).addClass('is-loading');
				var img = new Image();
				$('#' + imgId).html(img);

				img.onload = $.proxy(function (imgId, img, elem)
				{
					$('#' + imgId).removeClass('is-loading');
					$('#' + imgId).addClass('is-loaded');
				}, this, imgId, img);

				img.onerror = $.proxy(function (imgId, img, elem)
				{
					$('#' + imgId).addClass('is-broken');

				}, this, imgId, img);

				img.src = uri;
			}, this, imgId, uri);
			return {'html': html, init: js};

		},

		Button: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '';
				}
				var preset = undefined != meta.btnPreset
					? meta.btnPreset
					: 'Default';
				var btnType = undefined != meta.btnType
					? meta.btnType
					: 'button';
				var disabledclass = (undefined != meta.permission && false == meta.permission)
				                    || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				var eid = meta.id
					? ' id="' + meta.id + '"'
					: '';
				var href = undefined != meta.href
					? ' href="' + meta.href + '"'
					: '';
				var style = undefined != meta.btnStyle
					? meta.btnStyle
					: 'btn-default';
				var icon = undefined != meta.icon
					? App.Theme.Icon.Glyphicon
					           .replaceAll('[eid]', '')
					           .replaceAll('[name]', meta.icon)
					           .replaceAll('[style]', '')
					: '';
				return App.Theme.Button[preset]
					.replaceAll('[type]', btnType)
					.replaceAll('[eid]', eid)
					.replaceAll('[href]', href)
					.replaceAll('[style]', style)
					.replaceAll('[disabled]', disabledclass)
					.replaceAll('[icon]', icon)
					.replaceAll('[label]', meta.label);
			},
			bind: function (meta)
			{
				if (null == meta)
				{
					return;
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}

				if (meta.actionContext)
				{
					$("#" + meta.id).unbind('click');
					$("#" + meta.id).click($.proxy(function (meta)
					{
						if (meta.onClick)
						{
							meta.onClick();
						}
						this.actionContext = meta.actionContext;
						if (true != meta.noSubmit)
						{
							$('#' + meta.actionForm).submit();
						}
					}, meta.proxy, meta));
				}
				else if (meta.onClick)
				{
					$("#" + meta.id).unbind('click');
					if (meta.proxy)
					{
						$("#" + meta.id).click($.proxy(meta.onClick, meta.proxy));
					}
					else
					{
						$("#" + meta.id).click(meta.onClick);
					}
				}
			}
		},

		InlineNotification: {
			html: function (meta, value)
			{
				if (null == meta)
				{
					return '';
				}

				return App.Theme.Display.InlineNotification
					.replaceAll('[message]', value);
			},
			bind: function (meta)
			{
				if (null == meta)
				{
					return;
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}
			}
		},

		SimpleDataTable: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var tableStyles = meta.tableStyles
					? meta.tableStyles
					: 'table-striped table-bordered table-condensed table-responsive';
				var html = '<table class="table ' + tableStyles + '">';
				var i = 0;
				for (var item in meta)
				{
					i++;
					if (1 == i)
					{
						// Headers
						html += '<thead><tr>';
						for (var cell in meta[item])
						{
							html += '<td><b>' + meta[item][cell] + '</b></td>';
						}
						html += '</tr><thead><tbody>';
					}
					else
					{
						// Row data
						html += '<tr>';
						for (var cell in meta[item])
						{
							html += '<td>' + meta[item][cell] + '</td>';
						}
						html += '</tr>';
					}
				}
				if (1 < meta.length)
				{
					html += '</tbody>';
				}
				html += '</table>';
				return html;
			},
			bind: function (meta)
			{
				return;
			}
		},

		DataTable: {
			build: function (containerId, meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var eid = meta.id
					? meta.id
					: '';
				var html = '<table id="' + eid + '" class="table table-striped table-bordered table-condensed">';
				if (meta.headers)
				{
					for (var item in meta.headers)
					{
						// Headers
						html += '<thead><tr>';
						for (var cell in meta.headers[item])
						{
							html += '<td><b>' + meta.headers[item][cell] + '</b></td>';
						}
						html += '</tr><thead><tbody>';
					}
				}
				for (var item in meta.data)
				{
					// Row data
					var rowId = meta.data[item].id;
					delete meta.data[item].id;
					html += '<tr data-id="' + rowId + '">';
					for (var cell in meta.data[item])
					{
						html += '<td>' + meta.data[item][cell] + '</td>';
					}
					html += '</tr>';
				}
				if (1 < meta.length)
				{
					html += '</tbody>';
				}
				html += '</table>';
				$('#' + containerId).html(html);
				return;
			},
			addRow: function (tableId, row, onClick)
			{
				var rowId = row.id;
				delete row.id;
				html = '<tr data-id="' + rowId + '">';
				for (var cell in row)
				{
					html += '<td>' + row[cell] + '</td>';
				}
				html += '</tr>';
				$('#' + tableId + ' tbody').append(html);
				if (onClick)
				{
					$('#' + tableId + ' [data-id="' + rowId + ']').click(onClick);
				}
			},
			addCollapsableRow: function (tableId, row, secData, colspan, tid, onClick)
			{
				var rowId = row.id;
				delete row.id;
				html = '<tr data-id="' + rowId + '" class="handy">';
				for (var cell in row.data)
				{
					html += '<td>' + row.data[cell] + '</td>';
				}
				html += '</tr>';

				html += '<tr data-id="' + rowId + '_col" data-mode="hidden" class="ghost"><td colspan="' + colspan + '" class="ddu-item-container"><form class="form form-horizontal"><div class="ddu-item-container-div" id="' + rowId + '_secContainer"></div></form><div>&nbsp;</div></td></tr>';

				$('#' + tableId + ' tbody').append(html);

				for (i in secData)
				{
					var html = '';

					switch (secData[i].type)
					{
						case 'formItem':
							html = secData[i].html;
							$('#' + rowId + '_secContainer').append(html);
							App.ElementLibrary.Field.bind(tid, secData[i].meta);
							break;
						default:
							html = secData[i].html;
							$('#' + rowId + '_secContainer').append(html);
							break;
					}
				}

				$('#' + tableId + ' [data-id="' + rowId + '"]').click($.proxy(function ()
				{
					var tg = $('#' + tableId + ' [data-id="' + rowId + '_col"]');
					if ('hidden' == $(tg).attr('data-mode'))
					{
						$(tg).show(150);
						$(tg).attr('data-mode', 'shown');
					}
					else
					{
						$(tg).hide(150);
						$(tg).attr('data-mode', 'hidden');
					}
				}, this, rowId));

			},
			updateRow: function (tableId, row)
			{
				var rowId = row.id;
				delete row.id;
				var html = '';
				for (var cell in row)
				{
					html += '<td>' + row[cell] + '</td>';
				}
				html += '</tr>';
				$('#' + tableId + ' tbody tr[data-id="' + rowId + '"]').html(html);
			},
			removeRow: function (tableId, rowId)
			{
				$('#' + tableId + ' tbody tr[data-id="' + rowId + '"]').remove();
			}
		},

		GridContextFilter: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '<div class="">&nbsp;</div>';
				}
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? ' disabled'
					: '';

				if (meta.actions)
				{
					var preset = undefined != meta.btnPreset
						? meta.btnPreset
						: 'Default';
					var btnType = undefined != meta.btnType
						? meta.btnType
						: 'button';
					var eid = meta.id
						? ' id="' + meta.id + '"'
						: '';
					var href = undefined != meta.href
						? ' href="' + meta.href + '"'
						: '';
					var style = undefined != meta.btnStyle
						? meta.btnStyle
						: 'btn-default';
					var searchIcon = undefined != meta.icon
						? App.Theme.Icon.Glyphicon
						                 .replaceAll('[eid]', '')
						                 .replaceAll('[name]', 'search')
						                 .replaceAll('[style]', '')
						: '';
					var clearIcon = undefined != meta.icon
						? App.Theme.Icon.Glyphicon
						                .replaceAll('[eid]', '')
						                .replaceAll('[name]', 'remove-circle')
						                .replaceAll('[style]', '')
						: '';
					var html = '</div><div class="row"><div class="col-xs-12"><div class="pull-right pad-5">';
					html += App.Theme.Button[preset]
						.replaceAll('[type]', btnType)
						.replaceAll('[eid]', ' id="' + meta.clearId + '"')
						.replaceAll('[href]', href)
						.replaceAll('[style]', style + ' ' + App.Theme.Grid.defaults.resetButtonStyle)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[icon]', clearIcon)
						.replaceAll('[label]', 'Clear search');
					html += App.Theme.Button[preset]
						.replaceAll('[type]', btnType)
						.replaceAll('[eid]', ' id="' + meta.searchId + '"')
						.replaceAll('[href]', href)
						.replaceAll('[style]', style + ' ' + App.Theme.Grid.defaults.searchButtonStyle)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[icon]', searchIcon)
						.replaceAll('[label]', 'Search');
					html += '</div></div>';
					return html;
				}
				else
				{
					var eid = meta.id
						? meta.id
						: Math.floor((Math.random() * 100000) + 1);
					var labelSpan = undefined != meta.contextLabelSpan
						? meta.contextLabelSpan
						: App.Theme.Grid.defaults.contextLabelSpan;
					var labelStyle = undefined != meta.contextLabelStyle
						? meta.contextLabelStyle
						: App.Theme.Grid.defaults.contextLabelStyle;
					var inputSpan = undefined != meta.contextInputSpan
						? meta.contextInputSpan
						: App.Theme.Grid.defaults.contextInputSpan;
					var inputWrapperStyle = undefined != meta.contextInputWrapperStyle
						? meta.contextInputWrapperStyle
						: App.Theme.Grid.defaults.contextInputWrapperStyle;
					var inputStyle = undefined != meta.contextInputStyle
						? meta.contextInputStyle
						: App.Theme.Grid.defaults.contextInputStyle;
					var placeholder = undefined != meta.placeholder
						? meta.placeholder
						: '';
					var attrib = undefined != meta.contextAttrib
						? ' ' + meta.contextAttrib
						: '';
					var value = meta.value
						? meta.value
						: '';
					var inputType = meta.inputType
						? meta.inputType
						: 'text';
					var max = meta.maxlength
						? ' maxlength="' + meta.maxlength + '"'
						: '';
					labelStyle += ' context-filter-label';
					inputWrapperStyle += ' filter-input';
					if (meta.context)
					{
						inputStyle += ' ' + meta.context;
					}
					if (meta.readonly)
					{
						attrib += ' readonly';
					}
					if (meta.maxlength)
					{
						attrib += ' maxlength="' + meta.maxlength + '"';
					}
					var html = '<div class="' + App.Theme.Grid.defaults.contextDivSpan + '">';
					if ('date' == inputType)
					{
						attrib += ' data-date-format="' + App.DataStruct.dateFormat + '"';
						inputStyle = inputStyle + ' datepicker';
						html += App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', value)
							.replaceAll('[append]', '<span class="text-sm"><span class="glyphicon glyphicon-calendar"></span></span>')
							.replaceAll('[disabled]', disabled);
					}
					else if (meta.dataSource)
					{
						if (meta.dataList)
						{
							App.DataStore.setData(meta.dataSource, meta.dataList);
						}
						else if (meta.dataQuery)
						{
							if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
							{

								App.DataStore.loadSelectListData(
									meta.dataSource,
									meta.dataQuery.isStatic,
									meta.dataQuery.workspace,
									meta.dataQuery.task,
									meta.dataQuery.jobId,
									meta.dataQuery.data,
									meta.dataQuery.options,
									meta.dataQuery.callback
								);
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.selected)
						{
							meta.selected = '';
						}
						attrib += (meta.label)
							? ' title="' + meta.label + '"'
							: '';
						var selectMe = '';
						var options = '';
						for (var i = 0; i < meta.options.length; i++)
						{
							selectMe = (meta.options[i].value == meta.selected) ? ' selected' : '';
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', selectMe));
						}
						html += App.Theme.Field.Select
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[disabled]', disabled)
							.replaceAll('[options]', options);
					}
					else
					{
						html += App.Theme.Field.Input
							.replaceAll('[type]', inputType)
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', value)
							.replaceAll('[disabled]', disabled);
					}
					html += '</div>';
					return html;
				}
			},
			bind: function (meta)
			{
				if (meta && meta.actions)
				{
					$("#" + meta.clearId).click(meta.bindClear);
					$("#" + meta.searchId).click(meta.bindSearch);
				}
				else
				{
					if (null != meta && meta['bind'])
					{
						meta['bind'](meta);
					}
					if (meta.inputType && 'date' == meta.inputType)
					{
						var opt = meta.dtopt ? meta.dtopt : {};
						opt.autoclose = true;
						$('#' + meta.id).datepicker(opt);
					}
					if (null != meta && meta.dataSource)
					{
						App.DataStore.listen(
							meta.id, meta.dataSource,
							$.proxy(App.ElementLibrary.BuildSelectOptions, this, null, meta),
							'Recurring'
						);
					}
				}
			}
		},

		GridSingleSearch: {
			html: function (items, filterId)
			{
				var itemCount = 0;
				var formId = filterId + 'SsForm';
				_w.singleSearchMap[filterId] = [];
				for (var item in items)
				{
					itemCount++;
					if (items[item].field)
					{
						_w.singleSearchMap[filterId].push(items[item].field);
					}
				}
				var meta = {};
				var inputSpan = undefined != meta.columnInputSpan
					? meta.columnInputSpan
					: App.Theme.Grid.defaults.columnInputSpan;
				var inputWrapperStyle = undefined != meta.columnInputWrapperStyle
					? meta.columnInputWrapperStyle
					: App.Theme.Grid.defaults.columnInputWrapperStyle;
				var inputStyle = undefined != meta.columnInputStyle
					? meta.columnInputStyle
					: App.Theme.Grid.defaults.columnInputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: 'Search';
				var attrib = undefined != meta.columnAttrib
					? ' ' + meta.columnAttrib
					: '';
				var value = meta.value
					? meta.value
					: '';
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				inputStyle += 'input-sm';
				var filter = App.Theme.Field.InputNoLabel
					.replaceAll('[type]', 'text')
					.replaceAll('[eid]', filterId)
					.replaceAll('[inputSpan]', inputSpan)
					.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
					.replaceAll('[inputStyle]', inputStyle)
					.replaceAll('[placeholder]', placeholder)
					.replaceAll('[attrib]', attrib)
					.replaceAll('[value]', value)
					.replaceAll('[disabled]', disabled);
				var html = App.Theme.Grid.SingleSearchWrapper
					.replaceAll('[itemCount]', itemCount)
					.replaceAll('[formId]', formId)
					.replaceAll('[filter]', filter);
				return html;
			},
			bind: function (filterId)
			{
				/*if (null != meta && meta.on)
				 {
				 meta['bind'](meta);
				 }*/
			}
		},
		gridCounter: 0,

		GridColumnHeader: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '<th>&nbsp;</th>';
				}
				if (undefined != meta.permission && false == meta.permission)
				{
					return '';
				}
				var headerStyle = meta.headerStyle
					? meta.headerStyle
					: '';
				var orderDesc = meta.orderDesc
					? App.Theme.Icon.Glyphicon
					                .replaceAll('[eid]', ' id="' + meta.orderDesc.id + '"')
					                .replaceAll('[name]', 'circle-arrow-up')
					                .replaceAll('[style]', ' order-desc')
					: '';
				var orderAsc = meta.orderAsc
					? App.Theme.Icon.Glyphicon
					               .replaceAll('[eid]', ' id="' + meta.orderAsc.id + '"')
					               .replaceAll('[name]', 'circle-arrow-down')
					               .replaceAll('[style]', ' order-asc')
					: '';
				var label = meta.label;
				/*if ('Actions' == meta.id)
				 {
				 var eid = 'gridTitleAction' + App.ElementLibrary.gridCounter;
				 label = '<span id="' + eid + '" class="grid-column-controller"></span>';
				 }
				 else
				 {
				 headerStyle += ' data-column';
				 }*/
				var html = App.Theme.Grid.ColumnHeader
					.replaceAll('[headerStyle]', headerStyle + ' ' + meta.id)
					.replaceAll('[item]', meta.id)
					.replaceAll('[label]', label)
					.replaceAll('[order]', orderDesc + orderAsc);
				return html;
			},
			bind: function (meta)
			{
				if (meta && meta.orderAsc)
				{
					$("#" + meta.orderAsc.id).click(meta.orderAsc.bind);
				}
				if (meta && meta.orderDesc)
				{
					$("#" + meta.orderDesc.id).click(meta.orderDesc.bind);
				}
			}
		},

		GridColumnFilter: {
			html: function (meta)
			{
				if (null == meta || !meta.filterId)
				{
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', '&nbsp;');
					return html;
				}

				var eid = meta.filterId;
				var inputSpan = undefined != meta.columnInputSpan
					? meta.columnInputSpan
					: App.Theme.Grid.defaults.columnInputSpan;
				var inputWrapperStyle = undefined != meta.columnInputWrapperStyle
					? meta.columnInputWrapperStyle
					: App.Theme.Grid.defaults.columnInputWrapperStyle;
				var inputStyle = undefined != meta.columnInputStyle
					? meta.columnInputStyle
					: App.Theme.Grid.defaults.columnInputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: '';
				var attrib = undefined != meta.columnAttrib
					? ' ' + meta.columnAttrib
					: '';
				var value = meta.value
					? meta.value
					: '';
				var disabled = (undefined != meta.permission && false == meta.permission)
				               || (undefined != meta.disabled && true == meta.disabled)
					? 'disabled'
					: '';
				inputStyle += 'input-sm';
				if (meta.context)
				{
					inputStyle += ' ' + meta.context;
				}

				if (meta.dataSource)
				{
					if (meta.dataList)
					{
						App.DataStore.setData(meta.dataSource, meta.dataList);
					}
					else if (meta.dataQuery)
					{
						if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
						{

							App.DataStore.loadSelectListData(
								meta.dataSource,
								meta.dataQuery.isStatic,
								meta.dataQuery.workspace,
								meta.dataQuery.task,
								meta.dataQuery.jobId,
								meta.dataQuery.data,
								meta.dataQuery.options,
								meta.dataQuery.callback
							);
						}


					}
					if (!meta.options)
					{
						meta.options = [];
					}
					if (!meta.selected)
					{
						meta.selected = '';
					}
					attrib += (meta.label)
						? ' title="' + meta.label + '"'
						: '';
					var selectMe = '';
					var options = '';
					for (var i = 0; i < meta.options.length; i++)
					{
						selectMe = (meta.options[i].value == meta.selected) ? ' selected' : '';
						options += (App.Theme.Field.SelectOption
							.replaceAll('[value]', meta.options[i].value)
							.replaceAll('[label]', meta.options[i].label)
							.replaceAll('[selected]', selectMe));
					}
					var filter = App.Theme.Field.SelectNoLabel
						.replaceAll('[eid]', eid)
						.replaceAll('[inputSpan]', inputSpan)
						.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
						.replaceAll('[inputStyle]', inputStyle)
						.replaceAll('[placeholder]', placeholder)
						.replaceAll('[attrib]', attrib)
						.replaceAll('[disabled]', disabled)
						.replaceAll('[options]', options);
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', filter);
					return html;
				}
				else
				{
					var inputType = meta.inputType
						? meta.inputType
						: 'text';
					var max = meta.maxlength
						? ' maxlength="' + meta.maxlength + '"'
						: '';
					if (meta.maxlength)
					{
						attrib += ' maxlength="' + meta.maxlength + '"';
					}
					var filter = App.Theme.Field.InputNoLabel
						.replaceAll('[type]', inputType)
						.replaceAll('[eid]', eid)
						.replaceAll('[inputSpan]', inputSpan)
						.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
						.replaceAll('[inputStyle]', inputStyle)
						.replaceAll('[placeholder]', placeholder)
						.replaceAll('[attrib]', attrib)
						.replaceAll('[value]', value)
						.replaceAll('[disabled]', disabled);
					var html = App.Theme.Grid.ColumnFilterWrapper
						.replaceAll('[filter]', filter);
					return html;
				}
			},
			bind: function (meta)
			{
				if (null != meta && meta.on)
				{
					meta['bind'](meta);
				}
				if (null != meta && meta.dataSource)
				{
					App.DataStore.listen(
						meta.filterId, meta.dataSource,
						$.proxy(App.ElementLibrary.BuildSelectOptions, this, null, meta),
						'Recurring'
					);
				}
			}
		},

		GridDataRow: {
			html: function (meta, isGroupingRow, groupValue)
			{
				if (null == meta)
				{
					return '<tr><td></td></tr>';
				}
				id = meta.items.id;
				if (isNaN(id))
				{
					var ident = [];
					for (var field in id)
					{
						ident.push(field + '=' + id[field]);
					}
					var identifier = ident.join('&');
				}
				else
				{
					var identifier = 'id=' + id;
				}
				var cells = '';
				var editableRow = meta.editable && meta.editable.canEditRow(id, meta.items)
				                  && (undefined == meta.editable.permissions
				                      || true == meta.editable.permissions);
				if (isGroupingRow)
				{
					var rowIdPrepend = meta.rowIdPrepend
						? meta.rowIdPrepend
						: '';
					var rowId = meta.rowId
						? 'id="group_row' + rowIdPrepend + meta.rowId + '"'
						: '';
					var columnCount = 0;
					for (var item in meta.items)
					{
						columnCount++;
					}

					var cellStyle = '';
					var cellAttrib = ' colspan="' + columnCount + '"';
					var cellPrepend = '';
					var cellAppend = '';
					cells += App.Theme.Grid.DataCell
						.replaceAll('[cellStyle]', cellStyle + ' grid-group-cell')
						.replaceAll('[cellAttrib]', cellAttrib)
						.replaceAll('[prepend]', cellPrepend)
						.replaceAll('[value]', groupValue)
						.replaceAll('[append]', cellAppend);
				}
				else
				{
					var rowIdPrepend = meta.rowIdPrepend
						? meta.rowIdPrepend
						: '';
					var rowId = meta.rowId
						? 'id="row' + rowIdPrepend + meta.rowId + '"'
						: '';
					for (var item in meta.items)
					{
						if ('id' == item)
						{
							continue;
						}
						if (meta.items[item]
						    && undefined != meta.items[item].permission
						    && false == meta.items[item].permission)
						{
							continue;
						}
						var cellStyle = meta.cellStyle && meta.cellStyle[item]
							? meta.cellStyle[item]
							: '';
						var cellAttrib = meta.cellAttrib && meta.cellAttrib[item]
							? meta.cellAttrib[item]
							: '';
						var cellPrepend = meta.cellPrepend && meta.cellPrepend[item]
							? '<span class="grid-column-prepend">' + meta.cellPrepend[item] + '</span>'
							: '';
						var cellAppend = meta.cellAppend && meta.cellAppend[item]
							? '<span class="grid-column-append">' + meta.cellAppend[item] + '</span>'
							: '';
						var value = meta.items && meta.items[item]
							? meta.items[item]
							: '&nbsp;';
						if (undefined != meta.columnPermission
						    && undefined != meta.columnPermission[item]
						    && false == meta.columnPermission[item])
						{
							continue;
						}
						if (editableRow && meta.editable.items[item])
						{
							var dataType = meta.editable.items[item].dataType
								? meta.editable.items[item].dataType
								: 'text';
							var dataTile = meta.editable.items[item].dataTile
								? meta.editable.items[item].dataTile
								: 'Edit Value';
							if ('checkbox' == dataType)
							{
								var libElement = true === value
									? 'CheckValueEditableTrue'
									: 'CheckValueEditableFalse';
								value = App.Theme.Grid[libElement]
									.replaceAll('[rowId]', meta.rowId)
									.replaceAll('[dataField]', item);
							}
							else
							{
								value = App.Theme.Field.Editable
									.replaceAll('[eid]', item + '_' + meta.rowId)
									.replaceAll('[dataType]', dataType)
									.replaceAll('[pid]', meta.rowId)
									.replaceAll('[dataTile]', dataTile)
									.replaceAll('[value]', value);
							}
							if (('select' == dataType || 'select2' == dataType || 'checklist' == dataType)
							    && meta.editable.items[item].dataList)
							{
								var source = meta.editable.items[item].dataSource;
								if (!_w.runningSelects)
								{
									_w.runningSelects = {};
								}
								if (!_w.runningSelects[source])
								{
									_w.runningSelects[source] = true;
									setTimeout($.proxy(function (source)
									{
										delete _w.runningSelects[source];
									}, this, source), 1000);
									App.DataStore.setData(
										meta.editable.items[item].dataSource,
										meta.editable.items[item].dataList
									);
								}
							}
							if (('select' == dataType || 'select2' == dataType || 'checklist' == dataType)
							    && meta.editable.items[item].dataQuery)
							{
								var source = meta.editable.items[item].dataSource;
								if (!_w.runningSelects)
								{
									_w.runningSelects = {};
								}
								if (!_w.runningSelects[source])
								{
									_w.runningSelects[source] = true;
									setTimeout($.proxy(function (source)
									{
										delete _w.runningSelects[source];
									}, this, source), 1000);
									var query = meta.editable.items[item].dataQuery;
									App.DataStore.loadSelectListData(
										source,
										query.isStatic,
										query.workspace,
										query.task,
										null,
										{},
										{},
										null
									);
								}
							}
						}
						cells += App.Theme.Grid.DataCell
							.replaceAll('[cellStyle]', cellStyle + ' ' + item)
							.replaceAll('[cellAttrib]', cellAttrib)
							.replaceAll('[prepend]', cellPrepend)
							.replaceAll('[value]', value)
							.replaceAll('[append]', cellAppend);
					}
				}
				var rowStyle = meta.rowStyle
					? meta.rowStyle
					: '';
				var rowAttrib = meta.rowAttrib
					? meta.rowAttrib
					: '';

				if (!isGroupingRow && groupValue)
				{
					rowAttrib += ' data-group-value="' + groupValue + '"';
				}
				if (isGroupingRow)
				{
					rowStyle += ' grid-group-row';
				}
				if (meta.url)
				{
					rowAttrib += ' onClick="window.location=\'#/' + meta.url + '?' + identifier + '\';"';
					rowStyle += ' handy';
				}
				var html = App.Theme.Grid.DataRow
					.replaceAll('[rowId]', rowId)
					.replaceAll('[rowStyle]', rowStyle)
					.replaceAll('[cells]', cells)
					.replaceAll('[rowAttrib]', rowAttrib);
				return html;
			},
			bind: function (meta, isGroupingRow, groupValue)
			{
				var rowIdPrepend = meta.rowIdPrepend
					? meta.rowIdPrepend
					: '';
				if (null != meta && meta['bind'])
				{
					meta['bind'](meta);
				}

				if (null != meta && meta.rowClick && !isGroupingRow)
				{
					$('#row' + rowIdPrepend + meta.rowId).unbind('click');
					$('#row' + rowIdPrepend + meta.rowId).click($.proxy(meta.rowClick, this, meta.items));
				}

				if (null != meta && isGroupingRow)
				{
					$('#group_row' + rowIdPrepend + meta.rowId).attr('data-visible', 1);
					$('#group_row' + rowIdPrepend + meta.rowId).unbind('click');
					$('#group_row' + rowIdPrepend + meta.rowId).click($.proxy(function (groupRowId, groupValue)
					{
						if (1 != $(groupRowId).attr('data-visible'))
						{
							$('[data-group-value=' + groupValue + ']').show();
							$(groupRowId).attr('data-visible', 1);
						}
						else
						{
							$('[data-group-value=' + groupValue + ']').hide();
							$(groupRowId).attr('data-visible', 0);
						}
					}, this, '#group_row' + rowIdPrepend + meta.rowId, groupValue));
				}

				if (meta.editable)
				{
					for (var item in meta.editable.items)
					{
						if (meta.editable.items[item].dataSource)
						{
							// Select List
							App.DataStore.listen(
								item + '_' + meta.rowId,
								meta.editable.items[item].dataSource,
								$.proxy(function (meta, item, dataId, data)
								{
									var dataList = [];
									for (var si in data)
									{
										dataList.push({value: data[si].value, text: data[si].label});
									}
									var value = $('#' + item + '_' + meta.rowId).html();
									if (meta.editable.items[item].multiple)
									{
										var currValue = [];
										var values = undefined != value
											? value.split(', ')
											: [];
										for (var i in values)
										{
											for (var si in data)
											{
												if (values[i] == data[si].label)
												{
													currValue.push(data[si].value);
												}
											}
										}
									}
									else
									{
										var currValue = '';
										for (var i in values)
										{
											for (var si in data)
											{
												if (values[i] == data[si].label)
												{
													currValue = data[si].value;
												}
											}
										}
									}
									var select2 = meta.editable.items[item].select2
										? meta.editable.items[item].select2
										: {};
									$('#' + item + '_' + meta.rowId).editable({
										onblur: 'ignore',
										showbuttons: false,
										source: dataList,
										value: currValue,
										select2: select2,
										success: $.proxy(function (meta, field, response, value)
										{
											$.proxy(_w.updateGridRowField, meta.editable.context)(
												meta.editable, meta.rowId, meta.editable.items[field].field, value
											);
										}, this, meta, item),
										validate: $.proxy(_w.validateInlineEdit, this, item + '_' + meta.rowId, meta.editable.items[item])
									});
								}, this, meta, item)
							);
						}
						else
						{
							if ('checkbox' == meta.editable.items[item].dataType)
							{
								$('#row' + meta.rowIdPrepend + meta.rowId + ' .editable-check').unbind('click');
								$('#row' + meta.rowIdPrepend + meta.rowId + ' .editable-check').click($.proxy(function (meta,
								                                                                                        evt)
								{
									var field = $(evt.currentTarget).attr('data-field');
									var value = 1 == $(evt.currentTarget).attr('data-value')
										? false
										: true;
									if (value)
									{
										$(evt.currentTarget).removeClass('glyphicon-remove').removeClass('red');
										$(evt.currentTarget).addClass('glyphicon-ok').addClass('green');
										$(evt.currentTarget).attr('data-value', '1');
									}
									else
									{
										$(evt.currentTarget).removeClass('glyphicon-ok').removeClass('green');
										$(evt.currentTarget).addClass('glyphicon-remove').addClass('red');
										$(evt.currentTarget).attr('data-value', '0');
									}
									$.proxy(_w.updateGridRowField, meta.editable.context)(
										meta.editable, meta.rowId, meta.editable.items[field].field, value
									);
								}, this, meta));
							}
							else
							{
								// Text element
								$('#' + item + '_' + meta.rowId).editable({
									//mode: 'inline',
									showbuttons: false,
									success: $.proxy(function (meta, field, response, value)
									{
										$.proxy(_w.updateGridRowField, meta.editable.context)(
											meta.editable, meta.rowId, meta.editable.items[field].field, value
										);
									}, this, meta, item),
									validate: $.proxy(_w.validateInlineEdit, this, item + '_' + meta.rowId, meta.editable.items[item])
								});

								$('#' + item + '_' + meta.rowId).on('hidden', $.proxy(function (meta, e, reason)
								{
									$('#' + item + '_' + meta.rowId).parent().find('span.grid-column-prepend, span.grid-column-append').show();
								}, this, meta));
								$('#' + item + '_' + meta.rowId).on('shown', $.proxy(function (meta, e, editable)
								{
									$('#' + item + '_' + meta.rowId).parent().find('span.grid-column-prepend, span.grid-column-append').hide();

								}, this, meta));


								var mask = meta.editable.items[item].mask;

								if (mask)
								{
									$('#' + item + '_' + meta.rowId).on('shown', $.proxy(function (mask, e, editable)
									{
										editable.input.$input.attr('id', item + '_' + meta.rowId + '_xedt');
										editable.input.$input.attr('name', item + '_' + meta.rowId + '_xedt');
										editable.input.$input.mask(mask);
									}, this, mask));
								}
							}
						}
					}
				}
			}
		},

		GridPager: {
			html: function (meta)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var startPage = parseInt(meta.CurrentPage, 10) - 4;
				var endPage = parseInt(meta.CurrentPage, 10) + 4;

				if (startPage < 1)
				{
					startPage = 1;
					endPage = 9 - startPage;
				}
				if (endPage > meta.TotalPages)
				{
					endPage = meta.TotalPages;
					startPage = endPage - 9;
				}
				if (startPage < 1)
				{
					startPage = 1;
				}
				if (8 >= parseInt(meta.CurrentPage))
				{
					var stepDown = 1;
				}
				else
				{
					var stepDown = parseInt(meta.CurrentPage) - 8;
				}
				if ((parseInt(meta.TotalPages) - 8) <= parseInt(meta.CurrentPage))
				{
					var stepUp = meta.TotalPages;
				}
				else
				{
					var stepUp = parseInt(meta.CurrentPage) + 8;
				}

				var eid = meta.id;
				var itemStyle = undefined != meta.pagerItemStyle
					? meta.pagerItemStyle
					: '';
				var wrapperStyle = undefined != meta.pagerWrapperStyle
					? meta.pagerWrapperStyle
					: '';
				var items = '';
				for (var i = startPage; i <= endPage; i++)
				{
					if (i == meta.CurrentPage)
					{
						items += App.Theme.Grid.PagerActiveItem
							.replaceAll('[pageNumber]', i)
							.replaceAll('[eid]', eid)
							.replaceAll('[itemStyle]', itemStyle);
					}
					else
					{
						items += App.Theme.Grid.PagerItem
							.replaceAll('[pageNumber]', i)
							.replaceAll('[eid]', eid)
							.replaceAll('[itemStyle]', itemStyle);
					}
				}
				var html = App.Theme.Grid.Pager
					.replaceAll('[wrapperStyle]', wrapperStyle)
					.replaceAll('[eid]', eid)
					.replaceAll('[itemStyle]', itemStyle)
					.replaceAll('[items]', items)
					.replaceAll('[stepDown]', stepDown)
					.replaceAll('[stepUp]', stepUp)
					.replaceAll('[maxPage]', meta.TotalPages);
				return html;
			},
			bind: function (meta)
			{
				if (meta && meta.bind)
				{
					$('.' + meta.id).click($.proxy(function (meta, evt)
					{
						$('.' + meta.id).parent().parent().find('li.active').removeClass('active');
						$(evt.currentTarget).parent().addClass('active');
						meta['bind']($(evt.currentTarget).attr('data-page'));
					}, this, meta));
				}
				$(".pagination." + meta.id).rPage();
			}
		},

		GridPageSize: {
			html: function (meta)
			{
				if (null == meta || undefined == meta.RecordsPerPage)
				{
					return '&nbsp;';
				}
				var recs = meta.RecordsPerPage;

				var html = App.Theme.Grid.PageSizeSelector
					.replaceAll('[recordsPerPage]', recs)
					.replaceAll('[eid]', meta.id);
				return html;
			},
			bind: function (meta)
			{
				if (meta.allowLarge)
				{
					$('#' + meta.id + 'Options li[data-size="500"]').removeClass('ghost');
				}
				if (meta && meta.bind)
				{
					$('#' + meta.id + 'Options li').click(function ()
					{
						meta['bind']($(this).attr('data-size'));
					});
				}
			}
		},

		GridRecords: {
			html: function (meta)
			{
				if (null == meta || undefined == meta.TotalRecords)
				{
					return '&nbsp;';
				}

				var recordStart = 0;
				var recordEnd = 0;

				if (0 != meta.TotalRecords)
				{
					recordStart = parseInt(meta.RecordsPerPage, 10) * parseInt(meta.CurrentPage, 10) - 9;
					recordEnd = parseInt(meta.RecordsPerPage, 10) * parseInt(meta.CurrentPage, 10);

					if (parseInt(meta.TotalRecords, 10) < parseInt(meta.RecordsPerPage, 10))
					{
						recordEnd = parseInt(meta.TotalRecords, 10);
					}
				}

				var html = App.Theme.Grid.PageRecords
					.replaceAll('[resultsStart]', recordStart)
					.replaceAll('[resultsEnd]', recordEnd)
					.replaceAll('[totalResults]', meta.TotalRecords);

				return html;
			}
		},


		BuildSelectOptions: function (tid, meta, dataId, options)
		{
			if ('Published' != App.Template.state)
			{
				return;
			}
			var elemId = meta.filterId
				? meta.filterId
				: meta.id;
			App.DataStore.setItem('BuildSelect:' + elemId, true);
			var selected = $('#' + elemId).val();
			if (!selected)
			{
				if (meta.value)
				{
					if (meta.multiple)
					{
						selected = [];
						var selectMulti = {};
						for (var ii = 0; ii < meta.value.length; ii++)
						{
							selected.push(meta.value[ii].toString());
							selectMulti['x' + meta.value[ii]] = true;
						}
					}
					else
					{
						selected = meta.value;
					}
				}
				else
				{
					selected = '';
				}
			}
			else if (meta.multiple)
			{
				selected = [];
				var selectMulti = {};
				for (var ii = 0; ii < meta.value.length; ii++)
				{

					if (undefined == meta.value[ii]['id'])
					{
						selected.push(meta.value[ii].toString());
						selectMulti['x' + meta.value[ii]] = true;
					}
					else
					{
						selected.push(meta.value[ii]['id'].toString());
						selectMulti['x' + meta.value[ii]['id']] = true;
					}
				}
			}
			var opts = '';
			if (meta.selectEmpty)
			{
				opts += (App.Theme.Field.SelectOption
					.replaceAll('[value]', '')
					.replaceAll('[label]', meta.selectEmpty)
					.replaceAll('[selected]', ''));
			}
			var doSelect = '';

			/*
			 * Set label & value alias for bind from grids
			 */
			var labelAlias = undefined != meta.labelField ? meta.labelField : 'label';
			var valueAlias = undefined != meta.valueField ? meta.valueField : 'value';
			for (var i = 0; i < options.length; i++)
			{
				if (meta.multiple)
				{
					var val = options[i].value;
					doSelect = (selectMulti['x' + val])
						? 'selected'
						: '';
				}
				else
				{
					if (undefined != options[i])
					{
						doSelect = (options[i].value == selected)
							? 'selected'
							: '';
					}
					else
					{
						doSelect = '';
					}
				}

				if (undefined != options[i])
				{
					opts += (App.Theme.Field.SelectOption
						.replaceAll('[value]', options[i][valueAlias])
						.replaceAll('[label]', options[i][labelAlias])
						.replaceAll('[selected]', doSelect));
				}

			}
			$('#' + elemId).html(opts);
			/*$('#' + elemId).selectpicker('refresh');
			 if (!meta.multiple)
			 {
			 $('#' + elemId).selectpicker('val', selected);
			 }*/
			$('#' + elemId).select2('updateResults', true);
			$('#' + elemId).select2('val', selected);

			/*
			 * Fire onChange internal event
			 */
			setTimeout($.proxy(function (elemId)
			{
				$('#' + elemId).change();
				setTimeout($.proxy(function (elemId)
				{
					App.DataStore.removeItem('BuildSelect:' + elemId);
				}, this, elemId), 100);
			}, this, elemId), 100);

		},

		BuildCheckGroupHtml: function (meta, options)
		{
			if ('Published' != App.Template.state)
			{
				return '';
			}
			var items = {};
			if (undefined != meta.data)
			{
				for (var i = 0; i < meta.data.length; i++)
				{
					items['i' + meta.data[i]] = true;
				}
			}
			var sectionMax = options.length;
			var sectionClass = 'col-md-12';
			var sectionSpans = ['', 'col-md-12', 'col-md-6', 'col-md-4', 'col-md-3'];
			if (meta.split)
			{
				if (4 < meta.split)
				{
					delete meta.split;
				}
				else
				{
					sectionMax = Math.ceil(options.length / meta.split);
					sectionClass = sectionSpans[meta.split];
				}
			}

			var html = '<div class="' + sectionClass + '">';

			var disabled = (undefined != meta.permission && false == meta.permission)
			               || (undefined != meta.disabled && true == meta.disabled)
				? 'disabled'
				: '';
			var labelStyle = undefined != meta.labelStyle
				? meta.labelStyle
				: App.Theme.Field.defaults.labelStyle;
			var inputSpan = undefined != meta.inputSpan
				? meta.inputSpan
				: App.Theme.Field.defaults.inputSpan;
			var inputWrapperStyle = undefined != meta.inputWrapperStyle
				? meta.inputWrapperStyle
				: App.Theme.Field.defaults.inputWrapperStyle;
			var inputStyle = undefined != meta.inputStyle
				? meta.inputStyle
				: App.Theme.Field.defaults.inputStyle;
			inputStyle += ' ' + meta.itemName;
			var r = 0;
			for (var i = 0; i < options.length; i++)
			{
				if (r == sectionMax)
				{
					html += '</div>';
					html += '<div class="' + sectionClass + '">';
					r = 0;
				}
				var itemId = options[i].value;
				var label = options[i].label;
				var checked = items['i' + itemId]
					? 'checked'
					: '';
				var chkItem = App.Theme.Field.Checkbox
					.replaceAll('[eid]', meta.itemName + itemId + 'Check')
					.replaceAll('[labelStyle]', labelStyle)
					.replaceAll('[label]', label)
					.replaceAll('[inputStyle]', inputStyle)
					.replaceAll('[value]', '')
					.replaceAll('[checked]', checked)
					.replaceAll('[attrib]', 'data-id="' + itemId + '"')
					.replaceAll('[disabled]', disabled);
				html += chkItem;
				r++;
			}
			html += '</div>';
			if ((meta.split && 4 == meta.split))
			{
				html += '</div>';
			}
			return html;
		},

		BuildCheckGroup: function (tid, meta, dataId, options)
		{
			if ('Published' != App.Template.state)
			{
				return;
			}
			var elem = $('#' + meta.id);
			if (!elem)
			{
				return;
			}
			$('#' + meta.id).empty();
			var html = App.ElementLibrary.BuildCheckGroupHtml(meta, options);

			$('#' + tid + '_' + meta.id).html(html);
			for (var i = 0; i < options.length; i++)
			{
				App.Util.updateCheckboxStyle($('#' + meta.itemName + options[i].value + 'Check'));
			}
		},

		Field: {
			html: function (meta, value)
			{
				if (null == meta)
				{
					return '&nbsp;';
				}
				var eid = meta.id
					? meta.id
					: Math.floor((Math.random() * 100000) + 1);
				var labelSpan = undefined != meta.labelSpan
					? meta.labelSpan
					: App.Theme.Field.defaults.labelSpan;
				var labelStyle = undefined != meta.labelStyle
					? meta.labelStyle
					: App.Theme.Field.defaults.labelStyle;
				var inputSpan = undefined != meta.inputSpan
					? meta.inputSpan
					: App.Theme.Field.defaults.inputSpan;
				var inputWrapperStyle = undefined != meta.inputWrapperStyle
					? meta.inputWrapperStyle
					: App.Theme.Field.defaults.inputWrapperStyle;
				var inputStyle = undefined != meta.inputStyle
					? meta.inputStyle
					: App.Theme.Field.defaults.inputStyle;
				var placeholder = undefined != meta.placeholder
					? meta.placeholder
					: '';
				var attrib = undefined != meta.inputAttrib
					? ' ' + meta.inputAttrib
					: '';
				var disabled = '';
				if (undefined != meta.disabled)
				{
					if ('function' == typeof(meta.disabled))
					{
						if ('checkbox' == meta.type)
						{
							disabled = meta.disabled(meta.checked ? true : false)
								? ' disabled'
								: '';
						}
						else
						{
							disabled = meta.disabled(meta.value ? true : false)
								? ' disabled'
								: '';
						}
					}
					else
					{
						disabled = meta.disabled
							? ' disabled'
							: '';
					}
				}
				switch (meta.type)
				{
					case 'input':
						var themeElem = meta.noLabel
							? 'InputNoLabel'
							: 'Input';
						if (meta.themeElement)
						{
							themeElem = meta.themeElement;
						}
						var inputType = meta.inputType
							? meta.inputType
							: 'text';
						if ('password' == inputType)
						{
							inputStyle += ' strength';
						}
						var max = meta.maxlength
							? ' maxlength="' + meta.maxlength + '"'
							: '';
						if (meta.maxlength)
						{
							attrib = attrib + ' maxlength="' + meta.maxlength + '"';
						}
						if (meta.dataType && 'tags' == meta.dataType)
						{
							attrib += ' data-role="tagsinput"';
						}
						var html = App.Theme.Field[themeElem]
							.replaceAll('[type]', inputType)
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[prepend]', meta.prepend ? meta.prepend : '')
							.replaceAll('[append]', meta.append ? meta.append : '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'date':
						attrib = attrib + ' data-date-format="' + App.DataStruct.dateFormat + '"';
						inputStyle = inputStyle + ' datepicker';
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[append]', '<span class="glyphicon glyphicon-calendar"></span>')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'mobile':
						var prepend = undefined != meta.inputAppend
							? meta.inputAppend
							: App.DataStruct.mobileUnit;
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'text')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[append]', prepend)
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'amount':
						var prepend = undefined != meta.inputPrepend
							? meta.inputPrepend
							: App.DataStruct.currencyUnit;
						var html = App.Theme.Field.InputWithPrepend
							.replaceAll('[type]', 'number')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled)
							.replaceAll('[prepend]', prepend);
						return html;
						break;
					case 'percentage':
						var append = undefined != meta.inputAppend
							? meta.inputAppend
							: '%';
						var html = App.Theme.Field.InputWithAppend
							.replaceAll('[type]', 'number')
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled)
							.replaceAll('[append]', append);
						return html;
						break;
					case 'checkbox':
						var value = meta.value
							? meta.value
							: meta.id;
						var checked = meta.checked
							? 'checked'
							: '';
						var checkElement = meta.inline
							? 'Checkbox'
							: 'FormCheckbox';
						var html = App.Theme.Field[checkElement]
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[value]', value)
							.replaceAll('[checked]', checked)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'checkGroup':
						var options = App.DataStore.dataStore[meta.dataSource]
							? App.DataStore.dataStore[meta.dataSource]
							: {};
						var html = App.ElementLibrary.BuildCheckGroupHtml(meta, options);
						return html;
						break;
					case 'select':
						if (meta.dataSource)
						{
							if (meta.dataList)
							{
								App.DataStore.setData(meta.dataSource, meta.dataList);
							}
							else if (meta.dataQuery)
							{
								if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
								{

									App.DataStore.loadSelectListData(
										meta.dataSource,
										meta.dataQuery.isStatic,
										meta.dataQuery.workspace,
										meta.dataQuery.task,
										meta.dataQuery.jobId,
										meta.dataQuery.data,
										meta.dataQuery.options,
										meta.dataQuery.callback
									);
								}
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.value)
						{
							meta.value = !meta.multiple
								? ''
								: [];
						}
						if (meta.multiple)
						{
							attrib += ' multiple';
						}
						attrib += meta.title
							? ' data-placeholder="' + meta.title + '"'
							: ((meta.label && !meta.selectEmpty)
							? ' data-placeholder="' + meta.label + '"'
							: '');
						var options = '';
						if (meta.selectEmpty)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', '')
								.replaceAll('[label]', meta.selectEmpty)
								.replaceAll('[selected]', ''));
						}
						for (var i = 0; i < meta.options.length; i++)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', ''));
						}
						if (meta.label)
						{
							var themeElem = undefined != meta.options.query
								? 'Select2Div'
								: 'Select2';
							var html = App.Theme.Field[themeElem]
								.replaceAll('[eid]', eid)
								.replaceAll('[labelSpan]', labelSpan)
								.replaceAll('[labelStyle]', labelStyle)
								.replaceAll('[label]', meta.label)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						else
						{
							var themeElem = undefined != meta.options.query
								? 'Select2NoLabelDiv'
								: 'Select2NoLabel';
							var html = App.Theme.Field[themeElem]
								.replaceAll('[eid]', eid)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						return html;
						break;
					case 'selectX':
						if (meta.dataSource)
						{
							if (meta.dataList)
							{
								App.DataStore.setData(meta.dataSource, meta.dataList);
							}
							else if (meta.dataQuery)
							{
								if (!App.DataStore.noSelectQuery || undefined == App.DataStore.noSelectQuery)
								{

									App.DataStore.loadSelectListData(
										meta.dataSource,
										meta.dataQuery.isStatic,
										meta.dataQuery.workspace,
										meta.dataQuery.task,
										meta.dataQuery.jobId,
										meta.dataQuery.data,
										meta.dataQuery.options,
										meta.dataQuery.callback
									);
								}
							}
						}
						if (!meta.options)
						{
							meta.options = [];
						}
						if (!meta.value)
						{
							meta.value = !meta.multiple
								? ''
								: [];
						}
						if (meta.multiple)
						{
							attrib += ' multiple';
						}
						attrib += meta.title
							? ' title="' + meta.title + '"'
							: ((meta.label && !meta.selectEmpty)
							? ' title="' + meta.label + '"'
							: '');
						var options = '';
						if (meta.selectEmpty)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', '')
								.replaceAll('[label]', meta.selectEmpty)
								.replaceAll('[selected]', ''));
						}
						for (var i = 0; i < meta.options.length; i++)
						{
							options += (App.Theme.Field.SelectOption
								.replaceAll('[value]', meta.options[i].value)
								.replaceAll('[label]', meta.options[i].label)
								.replaceAll('[selected]', ''));
						}
						if (meta.label)
						{
							var html = App.Theme.Field.Select
								.replaceAll('[eid]', eid)
								.replaceAll('[labelSpan]', labelSpan)
								.replaceAll('[labelStyle]', labelStyle)
								.replaceAll('[label]', meta.label)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						else
						{
							var html = App.Theme.Field.SelectNoLabel
								.replaceAll('[eid]', eid)
								.replaceAll('[inputSpan]', inputSpan)
								.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
								.replaceAll('[inputStyle]', inputStyle)
								.replaceAll('[placeholder]', placeholder)
								.replaceAll('[attrib]', attrib)
								.replaceAll('[disabled]', disabled)
								.replaceAll('[options]', options);
						}
						return html;
						break;
					case 'textarea':
						var rows = meta.rows
							? meta.rows
							: 3;
						var html = App.Theme.Field.TextArea
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[rows]', rows)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'htmltext':
						var html = App.Theme.Field.HtmlTextArea
							.replaceAll('[eid]', eid)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[label]', meta.label)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'image':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + eid;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + eid;
						var html = App.Theme.Field.Image
							.replaceAll('[eid]', eid)
							.replaceAll('[did]', did)
							.replaceAll('[uid]', uid)
							.replaceAll('[type]', 'text')
							.replaceAll('[label]', meta.label)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'video':
						var videoStyle = meta.videoStyle
							? meta.videoStyle
							: '';
						var html = App.Theme.Field.Video
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[videoStyle]', videoStyle);
						return html;
						break;
					case 'audio':
						var audioStyle = meta.audioStyle
							? meta.audioStyle
							: '';
						var html = App.Theme.Field.Audio
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[audioStyle]', audioStyle);
						return html;
						break;
					case 'attachment':
						var imageStyle = undefined != meta.imageStyle
							? meta.imageStyle
							: '';
						var iconSpan = undefined != meta.iconSpan
							? meta.iconSpan
							: 'col-md-3';
						var labelSpan = undefined != meta.labelSpan
							? meta.labelSpan
							: 'col-md-7';
						var html = App.Theme.Field.Attachment
							.replaceAll('[eid]', eid)
							.replaceAll('[value]', '')
							.replaceAll('[label]', meta.label)
							.replaceAll('[iconSpan]', meta.iconSpan)
							.replaceAll('[labelSpan]', meta.labelSpan)
							.replaceAll('[defaultImage]', meta.baseImage)
							.replaceAll('[imageStyle]', imageStyle);
						return html;
						break;
					case 'document':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + eid;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + eid;
						var html = App.Theme.Field.Document
							.replaceAll('[eid]', eid)
							.replaceAll('[did]', did)
							.replaceAll('[uid]', uid)
							.replaceAll('[type]', 'text')
							.replaceAll('[label]', meta.label)
							.replaceAll('[labelSpan]', labelSpan)
							.replaceAll('[labelStyle]', labelStyle)
							.replaceAll('[inputSpan]', inputSpan)
							.replaceAll('[inputStyle]', inputStyle)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle)
							.replaceAll('[placeholder]', placeholder)
							.replaceAll('[attrib]', attrib)
							.replaceAll('[value]', '')
							.replaceAll('[disabled]', disabled);
						return html;
						break;
					case 'collector':
						var html = App.Theme.Field.Collector
							.replaceAll('[eid]', eid)
							.replaceAll('[inputWrapperStyle]', inputWrapperStyle);
						return html;
						break;
				}
				return '';
			},
			setValue: function (tid, meta, value)
			{
				if ('' == value)
				{
					return;
				}
				switch (meta.type)
				{
					case 'select':
						$('#' + meta.id).select2('val', value);
						//$('#' + meta.id).selectpicker('val', value);
						break;
					case 'checkbox':
						$('#' + meta.id).prop('checked', value);
						break;
					case 'checkGroup':
					case 'image':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + meta.id;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + meta.id;
						var docId = value.id
							? value.id
							: value;
						$('#' + meta.id).addClass('valid');
						$('#progress_' + meta.id + ' .progress-bar').css(
							'width',
							'0%'
						);
						$('#' + did).attr('data-download', '/image?id=' + docId);
						$('#' + did).prop('disabled', false);
						$('#' + did).show();
						$('#' + meta.id).val(value.filename ? value.filename : 'Uploaded File');
						$('#fileid_' + meta.id).val(docId);
						$('#img_' + meta.id).attr('src', '/thumbnail?id=' + docId);
						$('#img_' + meta.id).attr('data-large', '/image?id=' + docId);
						break;
					case 'video':
						$('#vid_' + meta.id).attr('src', 'http://www.youtube.com/embed/' + value);
						$('#vidcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
						$('#' + meta.id).val(value);
						if ($('#vid_' + meta.id).hasClass('error'))
						{
							$('#vid_' + meta.id).removeClass('error');
							$('#vid_' + meta.id).addClass('valid');
						}
						break;
					case 'audio':
						var parts = value.filename.split('.');
						$('#jquery_jplayer_' + meta.id).jPlayer({
							ready: $.proxy(function (meta, value)
							{
								var parts = value.filename.split('.');
								var mediaOptions = {};
								mediaOptions[parts[1]] = '/audio/' + value.filename;
								$('#jquery_jplayer_' + meta.id)
									.jPlayer("setMedia", mediaOptions)
									.jPlayer("stop");
							}, this, meta, value),
							ended: function (event)
							{
								$(this).jPlayer("play");
							},
							cssSelectorAncestor: '#jp_interface_' + meta.id,
							swfPath: "js",
							supplied: parts[1]
						});
						$('#audcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
						$('#' + meta.id).val(value.id);
						break;
					case 'attachment':
					case 'document':
						var did = undefined != meta.downloadButtonId
							? meta.downloadButtonId
							: 'btnDownload' + meta.id;
						var uid = undefined != meta.uploadButtonId
							? meta.downloadButtonId
							: 'btnUpload' + meta.id;
						var docId = value.id
							? value.id
							: value;
						$('#' + meta.id).addClass('valid');
						$('#progress_' + meta.id + ' .progress-bar').css(
							'width',
							'0%'
						);
						$('#' + did).attr('data-download', '/document?id=' + docId);
						$('#' + did).prop('disabled', false);
						$('#' + did).show();
						$('#' + meta.id).val(value.filename ? value.filename : 'Uploaded File');
						$('#fileid_' + meta.id).val(docId);
						break;
					case 'mobile':
						if (value && '0' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						if (value && '+' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						$('#' + meta.id).val(value);
						break;
					case 'collector':
						break;
					case 'htmltext':
						$('#' + meta.id + ' .note-editable').html(value);
						break;
					default:
						if (meta.rules && meta.rules.number && !meta.rules.digits)
						{
							value = '' + value;
							value = "." == value.substring(0, 1) ? '0' + value : value;
						}

						$('#' + meta.id).val(value);
						break;
				}
			},
			harvest: function (tid, meta)
			{
				if (null == meta)
				{
					return null;
				}
				switch (meta.type)
				{
					case 'collector':
						return null;
						break;
					case 'select':
						return $('#' + meta.id).select2('val');
						//return $('#' + meta.id).val();
						break;
					case 'checkGroup':
						var items = [];
						$.each($.find('.' + meta.itemName), function (i, input)
						{
							if ($(input).prop('checked'))
							{
								items.push({
									'id': $(input).attr('data-id')
								});
							}
						});
						return items;
						break;
					case 'amount':
						var val = $('#' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					case 'percentage':
						var val = $('#' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					case 'checkbox':
						return $('#' + meta.id).prop('checked');
						break;
					case 'mobile':
						value = $('#' + meta.id).val();
						if (value && '0' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						if (value && '+' == value.substring(0, 1))
						{
							value = value.substring(1);
						}
						return '+' + value;
						break;
					case 'htmltext':
						return $('#' + meta.id + ' .note-editable').html();
						break;
					case 'date':
						var value = $('#' + meta.id).val();
						return '' != value
							? value
							: null;
						break;
					case 'image':
					case 'document':
					case 'attachment':
						var val = $('#fileid_' + meta.id).val();
						return !isNaN(val)
							? parseFloat(val)
							: null;
						break;
					default:
						if (meta.rules && meta.rules.number && !meta.rules.digits)
						{
							var val = $('#' + meta.id).val();
							return !isNaN(val)
								? parseFloat(val)
								: null;
						}
						if (meta.rules && meta.rules.digits)
						{
							var val = $('#' + meta.id).val();
							return !isNaN(val)
								? parseInt(val)
								: null;
						}
						return $('#' + meta.id).val();
						break;
				}
			},
			bind: function (tid, meta)
			{
				if (meta.mask)
				{
					$('#' + meta.id).mask(meta.mask);
					$('#' + meta.id).focus(function ()
					{
						$('#' + meta.id).setCursorPosition(0);
					});
				}
				if ('input' == meta.type && meta.inputType && 'password' == meta.inputType)
				{
					if (undefined == meta.strength || false != meta.strength)
					{
						var defaults = {
							showMeter: true,
							toggleMask: true
						};
						var options = meta.strength
							? $.extend(true, {}, defaults, meta.strength)
							: defaults;
						$('#' + meta.id).strength(options);
					}
				}
				if ('input' == meta.type && meta.dataType && 'tags' == meta.dataType)
				{
					var defaults = {
						allowDuplicates: false
					};
					var options = meta.tagOptions
						? $.extend(true, {}, defaults, meta.tagOptions)
						: defaults;
					$('#' + meta.id).tagsinput(options);
				}
				if ('select' == meta.type)
				{
					var defaults = {
						allowClear: true,
						closeOnSelect: false,
						width: "parent",
						placeholder: meta.title
							? meta.title
							: ((meta.label && !meta.selectEmpty)
							? meta.label
							: 'Select')
					};
					var options = meta.options
						? $.extend(true, {}, defaults, meta.options)
						: defaults;
					try
					{
						$('#' + meta.id).select2(options);
					}
					catch (e)
					{
					}
				}
				if ('htmltext' == meta.type)
				{
					var options = $.extend(true, {}, {
						toolbar: [
							['style', ['style']],
							['style', ['bold', 'italic', 'underline', 'clear']],
							['font', ['strike']],
							['fontsize', ['fontsize']],
							['color', ['color']],
							['para', ['ul', 'ol', 'paragraph']],
							['height', ['height']],
							['insert', ['link']],
							['table', ['table']]
							//['help', ['help']]
						]
					}, meta.options ? meta.options : {});
					$('#' + meta.id).summernote(options);
				}
				if ('document' == meta.type || 'attachment' == meta.type)
				{

					var did = undefined != meta.downloadButtonId
						? meta.downloadButtonId
						: 'btnDownload' + meta.id;
					var uid = undefined != meta.uploadButtonId
						? meta.downloadButtonId
						: 'btnUpload' + meta.id;
					$('#' + uid).click(function ()
					{
						$('#btn_' + meta.id).click();
					});
					$('#' + did).click(function ()
					{
						if (undefined != $(this).attr('data-download'))
						{
							var parts = $(this).attr('data-download').split('?');
							var parms = parts[1] && '' != parts[1]
								? parts[1].split('&')
								: {};
							var data = {};
							for (var i in parms)
							{
								var param = parms[i].split('=');
								data[param[0]] = param[1];
							}
							App.Ajax.DOWNLOAD({
								url: parts[0],
								data: data
							});
						}
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						dropZone: $('#' + meta.id),
						add: function (e, data)
						{
							_w.jqXHR[meta.id] = data.submit();
						},
						send: $.proxy(function (meta, e, data)
						{
							if (!meta.fileTypes)
							{
								return true;
							}
							for (var i in data.files)
							{
								var allGood = false;
								var file = data.files[i].name;
								for (var x in meta.fileTypes)
								{
									if (meta.fileTypes[x] == file.substr(file.lastIndexOf('.') + 1))
									{
										allGood = true;
										$('#' + meta.id).val(file);
									}
								}
								if (!allGood)
								{
									return false;
								}
							}
							return true;
						}, this, meta),
						start: $.proxy(function (meta)
						{
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#' + meta.id).removeClass('error');
							$('#progress_' + meta.id).show();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
						}, this, meta),
						progress: $.proxy(function (meta, e, data)
						{
							var progress = parseInt(data.loaded / data.total * 100, 10);
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								progress + '%'
							);
						}, this, meta),
						fail: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#container_' + meta.id)
								.find("label[for=" + meta.id + "].error")
								.remove();
							$('#' + meta.id).addClass('error');

							$('#progress_' + meta.id).hide();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
							$('#fileid_' + meta.id).val('');
							$('#' + meta.id).val('');
							$('#' + did).prop('disabled', true);
							$('#' + did).hide();
							alert('Could not upload document.');
						},
						done: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#progress_' + meta.id).hide();
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											if (file.error)
											{
												$('#' + meta.id).removeClass('valid');
												$('#' + meta.id).removeClass('required');
												$('#container_' + meta.id)
													.find("label[for=" + meta.id + "].error")
													.remove();
												$('#' + meta.id).addClass('error');

												$('#progress_' + meta.id + ' .progress-bar').css(
													'width',
													'0%'
												);
												$('#fileid_' + meta.id).val('');
												$('#' + meta.id).val('');
												$('#' + did).prop('disabled', true);
												$('#' + did).hide();
												return;
											}
											$('#' + meta.id).removeClass('error');
											$('#' + meta.id).removeClass('required');
											$('#container_' + meta.id)
												.find("label[for=" + meta.id + "].error")
												.remove();
											$('#' + meta.id).addClass('valid');
											$('#progress_' + meta.id + ' .progress-bar').css(
												'width',
												'0%'
											);
											$('#fileid_' + meta.id).val(file.id);
											$('#' + meta.id).val(file.name);
											$('#' + did).attr('data-download', '/document?id=' + file.id);
											$('#' + did).prop('disabled', false);
											$('#' + did).show();

											if (meta.afterSuccess)
											{
												meta.afterSuccess(file.id, file.name);
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								if (file.error)
								{
									$('#' + meta.id).removeClass('valid');
									$('#' + meta.id).removeClass('required');
									$('#container_' + meta.id)
										.find("label[for=" + meta.id + "].error")
										.remove();
									$('#' + meta.id).addClass('error');

									$('#progress_' + meta.id + ' .progress-bar').css(
										'width',
										'0%'
									);
									$('#fileid_' + meta.id).val('');
									$('#' + meta.id).val('');
									$('#' + did).prop('disabled', true);
									$('#' + did).hide();
									return;
								}
								$('#' + meta.id).removeClass('error');
								$('#' + meta.id).removeClass('required');
								$('#container_' + meta.id)
									.find("label[for=" + meta.id + "].error")
									.remove();
								$('#' + meta.id).addClass('valid');
								$('#progress_' + meta.id + ' .progress-bar').css(
									'width',
									'0%'
								);
								$('#fileid_' + meta.id).val(file.id);
								$('#' + meta.id).val(file.name);
								$('#' + did).attr('data-download', '/document?id=' + file.id);
								$('#' + did).prop('disabled', false);
								$('#' + did).show();

								if (meta.afterSuccess)
								{
									meta.afterSuccess(file.id, file.name);
								}
							});
						}
					});
				}
				if ('video' == meta.type)
				{
					$('#' + meta.id).change($.proxy(function (meta)
					{
						$('#vid_' + meta.id).attr('src', 'http://www.youtube.com/embed/' + $('#' + meta.id).val());
						$('#vidcon_' + meta.id).show();
						$('#img_' + meta.id).hide();
					}, this, meta));
				}
				if ('image' == meta.type)
				{
					var did = undefined != meta.downloadButtonId
						? meta.downloadButtonId
						: 'btnDownload' + meta.id;
					var uid = undefined != meta.uploadButtonId
						? meta.downloadButtonId
						: 'btnUpload' + meta.id;
					$('#' + uid).click(function ()
					{
						$('#btn_' + meta.id).click();
					});
					$('#' + did).click(function ()
					{
						if (undefined != $(this).attr('data-download'))
						{
							var parts = $(this).attr('data-download').split('?');
							var parms = parts[1] && '' != parts[1]
								? parts[1].split('&')
								: {};
							var data = {};
							for (var i in parms)
							{
								var param = parms[i].split('=');
								data[param[0]] = param[1];
							}
							App.Ajax.DOWNLOAD({
								url: parts[0],
								data: data
							});
						}
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						dropZone: $('#' + meta.id),
						formData: meta.imageRules ? meta.imageRules : {},
						add: function (e, data)
						{
							_w.jqXHR[meta.id] = data.submit();
						},
						send: $.proxy(function (meta, e, data)
						{
							if (!meta.fileTypes)
							{
								return true;
							}
							for (var i in data.files)
							{
								var allGood = false;
								var file = data.files[i].name;
								for (var x in meta.fileTypes)
								{
									if (meta.fileTypes[x] == file.substr(file.lastIndexOf('.') + 1))
									{
										allGood = true;
										$('#' + meta.id).val(file);
									}
								}
								if (!allGood)
								{
									return false;
								}
							}
							return true;
						}, this, meta),
						start: $.proxy(function (meta)
						{
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#' + meta.id).removeClass('error');
							$('#progress_' + meta.id).show();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
						}, this, meta),
						progress: $.proxy(function (meta, e, data)
						{
							var progress = parseInt(data.loaded / data.total * 100, 10);
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								progress + '%'
							);
						}, this, meta),
						fail: function (e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#' + meta.id).removeClass('valid');
							$('#' + meta.id).removeClass('required');
							$('#container_' + meta.id)
								.find("label[for=" + meta.id + "].error")
								.remove();
							$('#' + meta.id).addClass('error');

							$('#progress_' + meta.id).hide();
							$('#progress_' + meta.id + ' .progress-bar').css(
								'width',
								'0%'
							);
							$('#fileid_' + meta.id).val('');
							$('#' + meta.id).val('');
							$('#' + did).prop('disabled', true);
							$('#' + did).hide();
							alert('Could not upload document.');
						},
						done: $.proxy(function (meta, e, data)
						{
							delete _w.jqXHR[meta.id];
							$('#progress_' + meta.id).hide();
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											$('label.error[for="' + meta.id + '"]').remove();
											if (file.error)
											{
												$('#' + meta.id).removeClass('valid');
												$('#' + meta.id).removeClass('required');
												$('#container_' + meta.id)
													.find("label[for=" + meta.id + "].error")
													.remove();

												$('#' + meta.id).addClass('error');
												$('#' + meta.id).parent().parent().append('<label for="' + meta.id + '" class="error">' + file.error + '</label>');

												$('#progress_' + meta.id + ' .progress-bar').css(
													'width',
													'0%'
												);
												$('#fileid_' + meta.id).val('');
												$('#' + meta.id).val('');
												$('#' + did).prop('disabled', true);
												$('#' + did).hide();
												return;
											}
											$('#' + meta.id).removeClass('error');
											$('#' + meta.id).removeClass('required');
											$('#container_' + meta.id)
												.find("label[for=" + meta.id + "].error")
												.remove();
											$('#' + meta.id).addClass('valid');
											$('#progress_' + meta.id + ' .progress-bar').css(
												'width',
												'0%'
											);
											$('#fileid_' + meta.id).val(file.id);
											$('#img_' + meta.id).attr('src', '/thumbnail?id=' + file.id);
											$('#' + meta.id).val(file.name);
											$('#' + did).attr('data-download', '/image?id=' + file.id);
											$('#' + did).prop('disabled', false);
											$('#' + did).show();
											if (meta.afterSuccess)
											{
												meta.afterSuccess(file.id, file.name);
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								$('label.error[for="' + meta.id + '"]').remove();
								if (file.error)
								{
									$('#' + meta.id).removeClass('valid');
									$('#' + meta.id).removeClass('required');
									$('#container_' + meta.id)
										.find("label[for=" + meta.id + "].error")
										.remove();

									$('#' + meta.id).addClass('error');
									$('#' + meta.id).parent().parent().append('<label for="' + meta.id + '" class="error">' + file.error + '</label>');

									$('#progress_' + meta.id + ' .progress-bar').css(
										'width',
										'0%'
									);
									$('#fileid_' + meta.id).val('');
									$('#' + meta.id).val('');
									$('#' + did).prop('disabled', true);
									$('#' + did).hide();
									return;
								}
								$('#' + meta.id).removeClass('error');
								$('#' + meta.id).removeClass('required');
								$('#container_' + meta.id)
									.find("label[for=" + meta.id + "].error")
									.remove();
								$('#' + meta.id).addClass('valid');
								$('#progress_' + meta.id + ' .progress-bar').css(
									'width',
									'0%'
								);
								$('#fileid_' + meta.id).val(file.id);
								$('#img_' + meta.id).attr('src', '/thumbnail?id=' + file.id);
								$('#' + meta.id).val(file.name);
								$('#' + did).attr('data-download', '/image?id=' + file.id);
								$('#' + did).prop('disabled', false);
								$('#' + did).show();
								if (meta.afterSuccess)
								{
									meta.afterSuccess(file.id, file.name);
								}
							});
						}, this, meta)
					});
				}
				if ('audio' == meta.type)
				{
					$('#img_' + meta.id).click(function ()
					{

						$('#btn_' + meta.id).click();
					});
					$('#btn_' + meta.id).fileupload({
						dataType: 'json',
						fail: function (e, data)
						{
							alert('Could not upload audio file.');
						},
						done: function (e, data)
						{
							if (undefined == data.result)
							{
								var req = {};
								req.name = data.files[0].name;
								App.Ajax.JSON({
										"name": 'FileUpload.GetResponse',
										"url": 'workspace/get-upload-result',
										"data": req
									},
									$.proxy(function (meta, response)
									{
										$.each(response.Data, function (i, file)
										{
											if (file.error)
											{
												alert(file.error);
												return;
											}
											var haveVal = ('' == $('#' + meta.id).val())
												? false
												: true;
											$('#' + meta.id).val(file.id);
											if (haveVal)
											{
												var parts = file.name.split('.');
												var mediaOptions = {};
												mediaOptions[parts[1]] = 'http://art.local/audio/' + file.name;
												$('#jquery_jplayer_' + meta.id)
													.jPlayer("setMedia", mediaOptions)
													.jPlayer("stop");
											}
											else
											{
												var parts = file.name.split('.');
												$('#jquery_jplayer_' + meta.id).jPlayer({
													ready: $.proxy(function (meta, file)
													{
														var parts = file.name.split('.');
														var mediaOptions = {};
														mediaOptions[parts[1]] = 'http://art.local/audio/' + value.name;
														$('#jquery_jplayer_' + meta.id)
															.jPlayer("setMedia", mediaOptions)
															.jPlayer("stop");
													}, this, meta, file),
													ended: function (event)
													{
														$(this).jPlayer("play");
													},
													cssSelectorAncestor: '#jp_interface_' + meta.id,
													swfPath: "js",
													supplied: parts[1]
												});
												$('#audcon_' + meta.id).show();
												$('#img_' + meta.id).hide();
											}
										});
									}, this, meta),
									function (response)
									{
										//console.log('File upload data retrieval error');
										//console.log(response);
									}
								);
								return;
							}
							$.each(data.result, function (i, file)
							{
								if (file.error)
								{
									alert(file.error);
									return;
								}
								var haveVal = ('' == $('#' + meta.id).val())
									? false
									: true;
								$('#' + meta.id).val(file.id);
								if (haveVal)
								{
									var parts = file.name.split('.');
									var mediaOptions = {};
									mediaOptions[parts[1]] = 'http://art.local/audio/' + file.name;
									$('#jquery_jplayer_' + meta.id)
										.jPlayer("setMedia", mediaOptions)
										.jPlayer("stop");
								}
								else
								{
									var parts = file.name.split('.');
									$('#jquery_jplayer_' + meta.id).jPlayer({
										ready: $.proxy(function (meta, file)
										{
											var parts = file.name.split('.');
											var mediaOptions = {};
											mediaOptions[parts[1]] = 'http://art.local/audio/' + value.name;
											$('#jquery_jplayer_' + meta.id)
												.jPlayer("setMedia", mediaOptions)
												.jPlayer("stop");
										}, this, meta, file),
										ended: function (event)
										{
											$(this).jPlayer("play");
										},
										cssSelectorAncestor: '#jp_interface_' + meta.id,
										swfPath: "js",
										supplied: parts[1]
									});
									$('#audcon_' + meta.id).show();
									$('#img_' + meta.id).hide();
								}
							});
						}
					});
				}
				if (meta.dataSource)
				{
					switch (meta.type)
					{
						case 'select':
							App.DataStore.listen(
								meta.id, meta.dataSource,
								$.proxy(App.ElementLibrary.BuildSelectOptions, this, tid, meta),
								'Recurring'
							);
							break;
						case 'checkGroup':
							App.DataStore.listen(
								meta.id, meta.dataSource,
								$.proxy(App.ElementLibrary.BuildCheckGroup, this, tid, meta),
								'Recurring'
							);
							break;
					}
				}
				if ('date' == meta.type)
				{
					var opt = meta.dtopt ? meta.dtopt : {};
					opt.autoclose = true;
					$('#' + meta.id)
						.datepicker(opt)
						.on('changeDate', $.proxy(function (meta, ev)
						{
							try
							{
								if ($('#' + meta.id).valid())
								{
									$('#' + meta.id).removeClass('invalid').addClass('success');
								}
							}
							catch (err)
							{
								// failure expected if not inside validation form.
							}
						}, this, meta));
				}
				if ('select' == meta.type)
				{
					$('#' + meta.id).change(function ()
					{
						if (!App.DataStore.getItem('BuildSelect:' + meta.id, false))
						{
							try
							{
								$(this).valid();
							}
							catch (err)
							{
								// no worries
							}
						}
					});
				}
				if (meta.rules && (meta.rules.number || meta.rules.digits))
				{
					var signed = meta.signed;
					App.Util.enforceNumericInput(meta.id, signed);
				}
				if (meta.rules && meta.rules.maxlength)
				{
					$('#' + meta.id).attr('maxlength', meta.rules.maxlength);
				}
				if (meta.onChange)
				{
					$('#' + meta.id).unbind('change');
					if ('select' == meta.type)
					{
						$('#' + meta.id).change(function (e)
						{
							if (!App.DataStore.getItem('BuildSelect:' + meta.id, false))
							{
								try
								{
									$(this).valid();
								}
								catch (err)
								{
									// no worries
								}
							}
						});
					}
					$('#' + meta.id).change(meta.onChange);
				}
				if (meta.onFocus)
				{
					$('#' + meta.id).on('focus', meta.onFocus);
				}
				if (meta.onBlur)
				{
					$('#' + meta.id).on('blur', meta.onBlur);
				}
				if (meta.bind)
				{
					meta['bind'](meta);
				}
				if ('checkbox' == meta.type || 'amountCheck' == meta.type)
				{
					App.Util.updateCheckboxStyle($('#' + meta.id));
				}
			}
		}


	};
})();

;;
(function ()
{
	_App.Template = function ()
	{
		this.initialize();
	};

	_App.Template.prototype =
	{

		state: null,
		tempStore: {},
		templateStore: {},
		instanceCounter: 0,

		initialize: function ()
		{
			// Nothing to do.
		},

		emptyTemplate: {
			jobId: null,
			itemId: null,
			newItem: null,
			itemId: null,
			itemData: null,
			haveData: false,
			grids: {},
			groups: {},
			forms: {},
			rules: {},
			messages: {},
			meta: {},
			elements: {},
			defaultForm: 'NoFormSpecified'
		},

		/**
		 * Retrieve a template from the server.
		 * @param type
		 * @param name
		 * @param lifespan
		 */
		retrieve: function (type, name, lifespan, callback)
		{
			if (!this.templateStore[name])
			{
				this.templateStore[name] = {};
				this.tempStore[name] = {};
				this.tempStore[name]["callback"] = callback;
				var rnd = new Date().getTime();
				App.Ajax.GET({
						id: name,
						url: 'templates/' + type + '/' + name + '.html?t=' + rnd
					},
					$.proxy(this._retrievedHtml, this),
					$.proxy(this._retrievalError, this));
				App.Ajax.SCRIPT({
						id: name,
						url: 'templates/' + type + '/' + name + '.js?t=' + rnd
					},
					$.proxy(this._retrievedJs, this),
					$.proxy(this._jsRetrievalError, this));
			}
			else
			{
				callback(name);
			}
		},

		_retrievalError: function (name)
		{
			this.templateStore[name]["redirect"] = '/notice/error?error=noSuchPage';
			window.location.hash = this.templateStore[name]["redirect"];
		},

		_jsRetrievalError: function (name, textStatus, errorThrown)
		{
			if ('error' == textStatus)
			{
				return;
			}
			_w.notify('Error retrieving template.', textStatus);
			//console.log(errorThrown);
		},

		_retrievedJs: function (name, data)
		{
			this.tempStore[name]['class'] = "template_" + name;
			if (this.tempStore[name]['html'])
			{
				this._retrievedHtmlAndJs(name);
			}
		},

		_retrievedHtml: function (name, data)
		{
			this.tempStore[name]['html'] = data;
			if (this.tempStore[name]['class'])
			{
				this._retrievedHtmlAndJs(name);
			}
		},

		_retrievedHtmlAndJs: function (name)
		{
			// Instantiate
			if (!window[this.tempStore[name]['class']])
			{
				//console.log('The requested template is named incorrectly and cannot be instantiated.');
				return;
			}
			this.templateStore[name] = new window[this.tempStore[name]['class']](
				this.tempStore[name]['html']
			);
			// Setup some basic fields that we can bargain on having around.
			if (undefined == this.templateStore[name].defaultForm)
			{
				this.templateStore[name].defaultForm = 'General';
			}
			this.templateStore[name].nsMap = {};
			if (!this.templateStore[name].rules)
			{
				this.templateStore[name].rules = {};
			}
			if (!this.templateStore[name].messages)
			{
				this.templateStore[name].messages = {};
			}
			// Process meta to a more refined and ready to use state.
			this.templateStore[name].gridFieldMap = {};
			this.templateStore[name].gridFieldPermissions = {};
			if (!this.templateStore[name]['meta'].General)
			{
				this.templateStore[name]['meta'].General = {};
			}
			if (this.templateStore[name].defaultForm)
			{
				for (var formName in this.templateStore[name].forms)
				{
					var form = this.templateStore[name].forms[formName];
					if (!this.templateStore[name]['meta'][form.namespace])
					{
						this.templateStore[name]['meta'][form.namespace] = {};
					}
					if (form.fields)
					{
						if (form.dataspace)
						{
							for (var elem in form.fields)
							{
								if (!form.fields[elem].namespace)
								{
									form.fields[elem].namespace = form.dataspace;
								}
								if (!form.fields[elem].field)
								{
									form.fields[elem].field = elem;
								}
							}
						}
						this.templateStore[name]['meta'][form.namespace] = $.extend(
							true, {},
							this.templateStore[name]['meta'][form.namespace],
							form.fields
						);
					}
					for (var action in form.actions)
					{
						if (form.actions[action].button)
						{
							form.actions[action].button.actionForm = formName;
							form.actions[action].button.actionContext = action;
							this.templateStore[name]['meta'].General[
								form.actions[action].button.id
								] = form.actions[action].button;
						}
					}
				}
			}
			if (this.templateStore[name].defaultGrid)
			{
				for (var gridName in this.templateStore[name].grids)
				{
					var grid = this.templateStore[name].grids[gridName];
					if (!this.templateStore[name]['meta'][grid.namespace])
					{
						this.templateStore[name]['meta'][grid.namespace] = {};
					}
					if (grid.titleId && grid.titleText)
					{
						this.templateStore[name]['meta'].General[grid.titleId] = {
							handler: 'Text',
							id: grid.titleId,
							value: grid.titleText,
							grid: gridName
						};
					}
					if (grid.titleButtons)
					{
						this.templateStore[name]['meta'].General[grid.titleButtons.id] = $.extend(
							true, {},
							App.DataElement.GridTitleButtons,
							grid.titleButtons
						);
					}
					if (grid.contextFilter)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.contextFilter.id] = $.extend(
							true, {},
							App.DataElement.GridContextFilter,
							{}
						);
					}
					if (grid.dataFields)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.dataFields.id] = $.extend(
							true, {},
							App.DataElement.GridColumns,
							grid.dataFields.targets
								? grid.dataFields.targets
								: {}
						);
						if (grid.dataFields.repeaterId)
						{
							this.templateStore[name]['meta'][grid.namespace][grid.dataFields.repeaterId] = $.extend(
								true, {},
								App.DataElement.GridRowRepeater,
								{}
							);
						}
					}
					if (grid.pagerId)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pagerId] = $.extend(
							true, {},
							App.DataElement.GridPager,
							{}
						);
					}
					if (grid.pageSizerId)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pageSizerId] = $.extend(
							true, {},
							App.DataElement.GridPageSize,
							{
								allowLarge: grid.sizerAllowLarge
							}
						);
					}
					if (grid.pageRecords)
					{
						this.templateStore[name]['meta'][grid.namespace][grid.pageRecords] = $.extend(
							true, {},
							App.DataElement.GridRecords,
							{}
						);
					}
				}
			}

			if (this.templateStore[name].defaultGroup)
			{
				for (var groupName in this.templateStore[name].groups)
				{
					var group = this.templateStore[name].groups[groupName];
					if (!this.templateStore[name]['meta'][group.namespace])
					{
						this.templateStore[name]['meta'][group.namespace] = {};
					}
					if (group.titleId && group.titleText)
					{
						this.templateStore[name]['meta'].General[group.titleId] = {
							handler: 'Text',
							id: group.titleId,
							value: group.titleText,
							group: groupName
						};
					}
					if (group.titleButtons)
					{
						group.titleButtons.id = $.extend(
							true, {},
							App.DataElement.GroupTitleButtons,
							group.titleButtons
						);
					}
					if (group.contextFilter)
					{
						this.templateStore[name]['meta'][group.namespace][group.contextFilter.id] = $.extend(
							true, {},
							App.DataElement.groupContextFilter,
							{}
						);
					}
					if (group.dataFields)
					{
						this.templateStore[name]['meta'][group.namespace][group.dataFields.id] = $.extend(
							true, {},
							App.DataElement.GroupColumns,
							group.dataFields.targets
								? group.dataFields.targets
								: {}
						);
						if (group.dataFields.repeaterId)
						{
							this.templateStore[name]['meta'][group.namespace][group.dataFields.repeaterId] = $.extend(
								true, {},
								App.DataElement.GroupRowRepeater,
								{}
							);
						}
					}
					/*
					 if (group.pagerId)
					 {
					 this.templateStore[name]['meta'][group.namespace][group.pagerId] = $.extend(
					 true, {},
					 App.DataElement.groupPager,
					 {}
					 );
					 }*/
				}
			}


			for (var ns in this.templateStore[name].meta)
			{
				for (var item in this.templateStore[name].meta[ns])
				{
					// Namespace map
					this.templateStore[name].nsMap[item] = ns;

					// Form elements
					if (this.templateStore[name].defaultForm)
					{
						if (undefined == this.templateStore[name].meta[ns][item].form)
						{
							this.templateStore[name]['meta'][ns][item].form = 'General' != ns
								? this.templateStore[name].defaultForm
								: 'General';
						}
						var form = this.templateStore[name]['meta'][ns][item].form;
						if (this.templateStore[name].forms[form]
						    && this.templateStore[name].forms[form].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name].forms[form].defaults,
								this.templateStore[name]['meta'][ns][item]
							);
						}
						if (!this.templateStore[name].rules[form])
						{
							this.templateStore[name].rules[form] = {};
						}
						this.templateStore[name].rules[form][item]
						= this.templateStore[name]['meta'][ns][item].rules;
						if (!this.templateStore[name].messages[form])
						{
							this.templateStore[name].messages[form] = {};
						}
						this.templateStore[name].messages[form][item]
						= this.templateStore[name]['meta'][ns][item].messages
							? this.templateStore[name]['meta'][ns][item].messages
							: {};
					}

					// Grid elements
					if (this.templateStore[name].defaultGrid)
					{
						if (undefined == this.templateStore[name]['meta'][ns][item].grid)
						{
							this.templateStore[name]['meta'][ns][item].grid = 'General' != ns
								? this.templateStore[name].defaultGrid
								: 'General';
						}
						var grid = this.templateStore[name]['meta'][ns][item].grid;
						if (this.templateStore[name].grids[grid]
						    && this.templateStore[name].grids[grid].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name]['meta'][ns][item],
								this.templateStore[name].grids[grid].defaults
							);
						}
						if ('GridContextFilter' == this.templateStore[name]['meta'][ns][item].constructor
						    || 'GridConstructorComponentCollection'
						       == this.templateStore[name]['meta'][ns][item].handler)
						{
							if ('GridContextFilter' == this.templateStore[name]['meta'][ns][item].constructor)
							{
								this.templateStore[name]['meta'][ns][item] = $.extend(
									true, {},
									this.templateStore[name]['meta'][ns][item],
									this.templateStore[name].grids[grid].contextFilter
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindClear = $.proxy(
									_w.clearSearch, this.templateStore[name], grid
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindSearch = $.proxy(
									_w.searchGrid, this.templateStore[name], grid
								);
								var items = this.templateStore[name]['meta'][ns][item].items;
								for (var i in items)
								{
									if (!items[i].id)
									{
										continue;
									}
									if (!this.templateStore[name].gridFieldMap[grid])
									{
										this.templateStore[name].gridFieldMap[grid] = {};
									}
									this.templateStore[name].gridFieldMap[grid][items[i].id] = items[i].field;
								}
							}
							if ('GridConstructorComponentCollection' == this.templateStore[name]['meta'][ns][item].handler)
							{
								var fields = this.templateStore[name].grids[grid].dataFields.items;
								var items = this.templateStore[name]['meta'][ns][item].items;

								var elemNs = this.templateStore[name].grids[grid].elementNs;
								this.templateStore[name]['meta'][ns][item].defaults
								= this.templateStore[name].grids[grid].dataFields.defaults;
								if (!this.templateStore[name].gridFieldMap[grid])
								{
									this.templateStore[name].gridFieldMap[grid] = {};
								}
								if (!this.templateStore[name].gridFieldPermissions[grid])
								{
									this.templateStore[name].gridFieldPermissions[grid] = {};
								}
								for (var fld in fields)
								{
									this.templateStore[name].gridFieldPermissions[grid][fld] = true;
									if ('id' == fld)
									{
										continue;
									}
									if (fields[fld].permissions && !_w.checkPermissions(fields[fld].permissions))
									{
										this.templateStore[name].gridFieldPermissions[grid][fld] = false;
										continue;
									}
									items[fld] = {};
									items[fld].id = fld;
									items[fld].label = fields[fld].label;
									if (undefined != fields[fld].permission)
									{
										items[fld].permission = fields[fld].permission;
									}
									if (fields[fld].dataSource)
									{
										items[fld].dataSource = fields[fld].dataSource;
									}
									if (fields[fld].dataList)
									{
										items[fld].dataList = fields[fld].dataList;
									}
									if (fields[fld].dataQuery)
									{
										items[fld].dataQuery = fields[fld].dataQuery;
									}
									if (fields[fld].selectEmpty)
									{
										items[fld].selectEmpty = fields[fld].selectEmpty;
									}
									if (fields[fld].field)
									{
										items[fld].filterId = elemNs + 'Filter_' + items[fld].id;
										items[fld].field = fields[fld].field;
										items[fld].orderAsc = {
											id: elemNs + 'Order_' + items[fld].id + 'Asc',
											bind: $.proxy(_w.orderGrid, this.templateStore[name], grid, items[fld].field, 'ASC')
										};
										items[fld].orderDesc = {
											id: elemNs + 'Order_' + items[fld].id + 'Desc',
											bind: $.proxy(_w.orderGrid, this.templateStore[name], grid, items[fld].field, 'DESC')
										};
										this.templateStore[name].gridFieldMap[grid][items[fld].filterId] = items[fld].field;
									}
								}
							}
						}
						if ('GridPager' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pagerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.pageGrid, this.templateStore[name], grid);
						}
						if ('GridPageSize' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pageSizerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.sizeGrid, this.templateStore[name], grid);
						}
						if ('GridRecords' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].grids[grid].pageRecords;
						}
					}

					// Group elements

					if (this.templateStore[name].defaultGroup)
					{
						if (undefined == this.templateStore[name]['meta'][ns][item].group)
						{
							this.templateStore[name]['meta'][ns][item].group = 'General' != ns
								? this.templateStore[name].defaultGroup
								: 'General';
						}
						var group = this.templateStore[name]['meta'][ns][item].group;
						if (this.templateStore[name].groups[group]
						    && this.templateStore[name].groups[group].defaults)
						{
							this.templateStore[name]['meta'][ns][item] = $.extend(
								{},
								this.templateStore[name]['meta'][ns][item],
								this.templateStore[name].groups[group].defaults
							);


						}


						if ('GroupContextFilter' == this.templateStore[name]['meta'][ns][item].constructor
						    || 'GroupConstructorComponentCollection'
						       == this.templateStore[name]['meta'][ns][item].handler)
						{
							if ('GroupContextFilter' == this.templateStore[name]['meta'][ns][item].constructor)
							{
								this.templateStore[name]['meta'][ns][item] = $.extend(
									true, {},
									this.templateStore[name]['meta'][ns][item],
									this.templateStore[name].groups[group].contextFilter
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindClear = $.proxy(
									_w.clearSearch, this.templateStore[name], group
								);
								this.templateStore[name]['meta'][ns][item].items.actions.bindSearch = $.proxy(
									_w.searchGroup, this.templateStore[name], group
								);
								var items = this.templateStore[name]['meta'][ns][item].items;


								for (var i in items)
								{
									if (!items[i].id)
									{
										continue;
									}
									if (!this.templateStore[name].groupFieldMap[group])
									{
										this.templateStore[name].groupFieldMap[group] = {};
									}
									this.templateStore[name].groupFieldMap[group][items[i].id] = items[i].field;
								}
							}
							if ('groupConstructorComponentCollection' == this.templateStore[name]['meta'][ns][item].handler)
							{
								var fields = this.templateStore[name].groups[group].dataFields.items;
								var items = this.templateStore[name]['meta'][ns][item].items;
								var elemNs = this.templateStore[name].groups[group].elementNs;
								this.templateStore[name]['meta'][ns][item].defaults
								= this.templateStore[name].groups[group].dataFields.defaults;
								if (!this.templateStore[name].groupFieldMap[group])
								{
									this.templateStore[name].groupFieldMap[group] = {};
								}
								if (!this.templateStore[name].groupFieldPermissions[group])
								{
									this.templateStore[name].groupFieldPermissions[group] = {};
								}
								for (var fld in fields)
								{
									this.templateStore[name].groupFieldPermissions[group][fld] = true;
									if ('id' == fld)
									{
										continue;
									}
									if (fields[fld].permissions && !_w.checkPermissions(fields[fld].permissions))
									{
										this.templateStore[name].groupFieldPermissions[group][fld] = false;
										continue;
									}
									items[fld] = {};
									items[fld].id = fld;
									items[fld].label = fields[fld].label;
									if (undefined != fields[fld].permission)
									{
										items[fld].permission = fields[fld].permission;
									}
									if (fields[fld].dataSource)
									{
										items[fld].dataSource = fields[fld].dataSource;
									}
									if (fields[fld].dataList)
									{
										items[fld].dataList = fields[fld].dataList;
									}
									if (fields[fld].dataQuery)
									{
										items[fld].dataQuery = fields[fld].dataQuery;
									}
									if (fields[fld].selectEmpty)
									{
										items[fld].selectEmpty = fields[fld].selectEmpty;
									}
									if (fields[fld].field)
									{
										items[fld].filterId = elemNs + 'Filter_' + items[fld].id;
										items[fld].field = fields[fld].field;
										items[fld].orderAsc = {
											id: elemNs + 'Order_' + items[fld].id + 'Asc',
											bind: $.proxy(_w.orderGroup, this.templateStore[name], group, items[fld].field, 'ASC')
										};
										items[fld].orderDesc = {
											id: elemNs + 'Order_' + items[fld].id + 'Desc',
											bind: $.proxy(_w.orderGroup, this.templateStore[name], group, items[fld].field, 'DESC')
										};
										// add the order by here (see distinct)
										this.templateStore[name].groupFieldMap[group][items[fld].filterId] = items[fld].field;
									}
								}
							}
						}
						if ('GroupPager' == this.templateStore[name]['meta'][ns][item].handler)
						{
							this.templateStore[name]['meta'][ns][item].id = this.templateStore[name].groups[group].pagerId;
							this.templateStore[name]['meta'][ns][item].bind = $.proxy(_w.pageGroup, this.templateStore[name], group);
						}
					}

					// Construct the element
					if (undefined == App.TemplateElement[this.templateStore[name]['meta'][ns][item].handler])
					{
						//console.log('Could not construct element ' + ns + ':' + item);
						//console.log('Handler ' + this.templateStore[name]['meta'][ns][item].handler);
						//console.log(App.TemplateElement);
						continue;
					}
					this.templateStore[name].elements[item] = new App.TemplateElement[
						this.templateStore[name]['meta'][ns][item].handler
						](item);
					this.templateStore[name]['meta'][ns][item].id = item;
				}
			}
			// Let somebody know that the template is ready for use.
			this.tempStore[name]["callback"](name);
			delete this.tempStore[name];
		},

		/**
		 * Register a new template instance.
		 * Template must already have been retrieved from server.
		 * @param id
		 * @param name
		 * @param target
		 * @param data
		 * @returns
		 */
		register: function (id, type, name, target, data, callback)
		{
			if (_r[id + ':' + name])
			{
				return;
			}
			_r[id + ':' + name] = true;
			_t[id] = new this._templateInstance(
				this.instanceCounter,
				null,
				target, data
			);
			App.Event.trigger(
				'Template.Ready:' + name,
				{"id": name, "pageName": name}
			);
			if (!this.templateStore[name] || !this.templateStore[name].ti)
			{
				this.retrieve(type, name, true, $.proxy(this._hydrateTemplate, this, callback, id));
			}
			else
			{
				if (this.templateStore[name]["redirect"])
				{
					window.location.hash = this.templateStore[name]["redirect"];
					return;
				}
				_t[id].setTemplate(this.templateStore[name]);
				callback(id, name);
				delete _r[id + ':' + name];
			}
			this.instanceCounter++;
			return _t[id];
		},

		_hydrateTemplate: function (callback, id, name)
		{
			_t[id].setTemplate(this.templateStore[name]);
			_t[id].template.templateName = id;
			callback(id, name);
			delete _r[id + ':' + name];
		},

		_templateInstance: function (tid, template, target, data)
		{
			this.tid = tid;
			this.template = template;
			this.target = target;
			this.data = null;
			this.ready = false;
			this.published = false;
			this.autoPublish = [];
			if (this.template && this.template.static)
			{
				_w.checkPermissions(this.template.permissions);
				$.proxy(_w.setupContracts, this.template)();
				this.construct = this.template.static.replaceAll('[tid]', this.tid);
				this.template.ti = this;
				if (undefined != this.template.init)
				{
					this.template.init();
				}
				this.hydrate(this.data);
			}

			/**
			 * Do something when we publish.
			 */
			this.onPublish = function (callback)
			{
				if (!this.published)
				{
					this.autoPublish.push(callback);
				}
				else
				{
					callback();
				}
			};

			/**
			 * Set the template to work with for this instance.
			 * @param template
			 */
			this.setTemplate = function (template)
			{
				this.template = template;
				this.construct = this.template.static
					? this.template.static.replaceAll('[tid]', this.tid)
					: '';
				this.template.ti = (this);
				if (undefined != this.template.permissions
				    && 0 < this.template.permissions.length)
				{
					if (!App.Authenticated)
					{
						window.location.hash = '/notice/error?error=pagePermissionDenied';
						return;
					}
					for (var i in this.template.permissions)
					{
						var perm = this.template.permissions[i];
						if (!App.permissions[perm])
						{
							window.location.hash = '/notice/error?error=pagePermissionDenied';
							return;
						}
					}
				}
				$.proxy(_w.setupContracts, this.template)();
				if (undefined != this.template.init)
				{
					this.template.init();
				}
				this.hydrate(this.data);
			};

			/**
			 * Hydrate template with dataset.
			 * This can be called before and after template publication.
			 * @param data
			 */
			this.hydrate = function (data)
			{
				data = $.extend(true, {}, this.template.meta, data);
				this.data = data;
				if (this.template)
				{
					for (var ns in data)
					{
						for (var element in data[ns])
						{
							var elem = this.template.elements[element];
							if (undefined == elem)
							{
								continue;
							}
							value = (data[ns][element])
								? data[ns][element]
								: null;
							if (this.published)
							{
								elem.hydrateLive(this.tid, value);
							}
							else
							{
								this.construct = elem.hydrate(this.construct, value);
							}
						}
					}
				}
			};
			if (this.template && this.data)
			{
				this.hydrate(this.data);
			}

			this.hydratePartial = function (data)
			{
				if (!this.data)
				{
					this.data = {};
				}
				data = $.extend(true, {}, this.template.meta, data);
				if (this.template && this.template.elements)
				{
					for (var ns in data)
					{
						for (var element in data[ns])
						{
							if (this.template.elements[element])
							{
								var elem = this.template.elements[element];
								if (undefined == elem)
								{
									continue;
								}
								value = (data[ns][element])
									? data[ns][element]
									: null;
								this.data[element] = value;
								if (this.published)
								{
									elem.hydrateLive(this.tid, value);
								}
								else
								{
									this.construct = elem.hydrate(this.construct, value);
								}
							}
						}
					}
				}
			};

			/**
			 * Hydrate template with a single parameter.
			 * This can be called before and after template publication.
			 * @param param
			 * @param value
			 */
			this.hydrateParam = function (param, value)
			{
				if (!this.data)
				{
					this.data = {};
				}
				var ns = this.template.nsMap[param];
				this.data[ns][param] = $.extend(true, {}, this.template.meta[ns][param], value);
				if (this.template && this.template.elements[param])
				{
					var elem = this.template.elements[param];
					if (this.published)
					{
						elem.hydrateLive(this.tid, this.data[ns][param]);
					}
					else
					{
						this.construct = elem.hydrate(this.construct, this.data[ns][param]);
					}
				}
			};

			/**
			 * Publish template to registered target.
			 */
			this.publish = function (target)
			{
				App.Template.state = 'Publish';
				target = target
					? target
					: this.target;
				this.target = target;
				$('#' + target).html(
					'<div id="' + this.tid + '">' + this.construct + '</div>'
				);

				this.published = true;
				//$('.selectpicker').selectpicker();
				App.Template.state = 'Published';

				for (var element in this.template.elements)
				{
					this.template.elements[element].publish(this.tid);
				}


				if (this.template.construct)
				{
					this.template.construct();
					if (this.template.altAlertBox)
					{
						_w.altAlertBox = this.template.altAlertBox;
					}
				}
				this.template.buttonRollback = [];
				for (var form in this.template.forms)
				{
					for (var i in this.template.forms[form].buttons)
					{
						if (!$('#' + this.template.forms[form].buttons[i]).prop('disabled'))
						{
							this.template.buttonRollback.push(
								this.template.forms[form].buttons[i]
							);
							$('#' + this.template.forms[form].buttons[i]).prop('disabled', true);
						}
					}
				}
				if (this.template.defaultGrid)
				{
					$.proxy(_w.publishGrids, this.template)();
				}
				if (this.template.haveData)
				{
					$.proxy(_w.setupValidators, this.template)();
				}
				for (var i in this.autoPublish)
				{
					this.autoPublish[i]();
				}
				this.autoPublish = [];
			};

			/**
			 * Harvest dataset from published template.
			 * @returns {___anonymous3461_3462}
			 */
			this.harvest = function (form)
			{
				App.Template.state = 'Harvest';
				var newData = {};
				for (var ns in this.template.meta)
				{
					for (var element in this.template.meta[ns])
					{
						if ((!form || form == this.template.meta[ns][element].form)
						    && !this.template.meta[ns][element].noHarvest)
						{
							if (!newData[ns])
							{
								newData[ns] = {};
							}
							var field = this.template.meta[ns][element].field
								? this.template.meta[ns][element].field
								: this.template.meta[ns][element].id;
							newData[ns][field] = this.template.elements[element].harvest(this.tid);
						}
					}
				}
				App.Template.state = 'Published';
				return newData;
			};

			/**
			 * Unpublish template.
			 * Template can be re-published afterward.
			 */
			this.remove = function ()
			{
				App.Template.state = 'Destruct';
				if (this.template)
				{
					try
					{
						this.template.destruct();
						if (this.template.altAlertBox)
						{
							_w.altAlertBox = false;
						}
					}
					catch (e)
					{
					}
				}
				$('#' + this.tid).remove();
				this.published = false;
			};
		}

	};

})();

;;
(function ()
{
	_App.TemplateElement = function ()
	{
		this.initialize();
	};
	_App.TemplateElement.prototype =
	{

		initialize: function ()
		{
			// Nothing to do.
		},

		/**
		 * Create a new Text element for a template.
		 * Example: var name = new App.TemplateElement.Text('name');
		 * @param id
		 */
		Text: function (id)
		{
			this.id = id;

			this.hydrate = function (template, meta)
			{
				value = meta && meta.value
					? meta.value
					: '&nbsp;';
				return template.replace('[' + this.id + ']', value);
			};

			this.hydrateLive = function (tid, value)
			{
				$('#' + tid + '_' + this.id).html(value);
			};

			this.publish = function (tid)
			{
				// element bindings and such
			};

			this.harvest = function (tid)
			{
				return $('#' + tid + '_' + this.id).html();
			};
		},

		InlineNotification: function (id)
		{
			this.id = id;

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.InlineNotification.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.InlineNotification.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.InlineNotification.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.InlineNotification.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return $('#' + tid + '_' + this.id).html();
			};
		},

		LabeledText: function (id)
		{
			this.id = id;

			this.hydrate = function (template, meta)
			{
				var value = (null == meta || null == meta.value)
					? '&nbsp;'
					: meta.value;
				var title = (null == meta || null == meta.title)
					? '&nbsp;'
					: meta.title;
				var labelStyle = (null == meta || null == meta.labelStyle)
					? ''
					: meta.labelStyle;
				var style = (null == meta || null == meta.textStyle)
					? ''
					: meta.textStyle;
				var html = '<label class="control-label ' + labelStyle + '">' + title + ':</label>';
				html += '<div class="controls">';
				html += '<p class="' + style + '" id="' + this.id + '">' + value + '</p>';
				html += '</div>';
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, meta)
			{
				var value = (undefined == meta || null == meta.value)
					? '&nbsp;'
					: meta.value;
				var title = (undefined == meta || null == meta.title)
					? '&nbsp;'
					: meta.title;
				var labelStyle = (null == meta || null == meta.labelStyle)
					? ''
					: meta.labelStyle;
				var style = (null == meta || null == meta.style)
					? ''
					: meta.style;
				var html = '<label class="control-label ' + labelStyle + '">' + title + ':</label>';
				html += '<div class="controls">';
				html += '<p class="' + style + '" id="' + this.id + '">' + value + '</p>';
				html += '</div>';
				$('#' + tid + '_' + this.id).html(html);
			};

			this.publish = function (tid)
			{
				// element bindings and such
			};

			this.harvest = function (tid)
			{
				return $('#' + this.id).html();
			};
		},

		ComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = (null == value)
					? '[...]'
					: value;
				var html = '';
				for (var item in this.meta)
				{
					html += this.meta[item]['html'];
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = (null == value)
					? '[...]'
					: value;
				var html = '';
				for (var item in this.meta)
				{
					if (this.meta[item]['html'])
					{
						html += this.meta[item]['html'];
					}
				}
				$('#' + tid + '_' + this.id).html(html);
				for (var item in this.meta)
				{
					if (this.meta[item]['js'])
					{
						this.meta[item]['js']();
					}
				}
			};

			this.publish = function (tid)
			{
				for (var item in this.meta)
				{
					if (this.meta[item]['js'])
					{
						this.meta[item]['js']();
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		ConstructorComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;

			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var html = '';
				for (var item in this.meta.items)
				{
					html += App.ElementLibrary[this.meta.constructor].html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;
				var html = '';
				if (this.meta.items)
				{
					for (var i in this.meta.items)
					{
						if (this.meta.defaults)
						{
							this.meta.items[i] = $.extend(true, {}, this.meta.defaults, this.meta.items[i]);
						}
						html += App.ElementLibrary[this.meta.constructor].html(this.meta.items[i]);
					}
				}
				$('#' + tid + '_' + this.id).html(html);
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					for (var item in this.meta.items)
					{
						App.ElementLibrary[this.meta.constructor].bind(this.meta.items[item]);
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					for (var item in this.meta.items)
					{
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},
		ConstructorGridRowCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;
			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var html = '';
				var isGroupingRow = false;
				var groupValue = false;
				for (var item in this.meta.items)
				{

					if (this.meta.items[item].grouping)
					{
						var grouping = this.meta.items[item].grouping;
						isGroupingRow = groupValue != this.meta.items[item].items[grouping.field];
						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							html += App.ElementLibrary[this.meta.constructor].html(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
					}
					html += App.ElementLibrary[this.meta.constructor].html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item],
						isGroupingRow, groupValue
					);
				}
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;

				var html = '';
				var isGroupingRow = false;
				var groupValue = false;
				if (this.meta.items)
				{
					for (var i in this.meta.items)
					{
						if (this.meta.defaults)
						{
							this.meta.items[i] = $.extend(true, {}, this.meta.defaults, this.meta.items[i]);
						}
						if (this.meta.items[i].grouping)
						{
							var grouping = this.meta.items[i].grouping;
							isGroupingRow = groupValue != this.meta.items[i].items[grouping.field];
							if (isGroupingRow)
							{

								groupValue = this.meta.items[i].items[grouping.field];

								html += App.ElementLibrary[this.meta.constructor].html(
									undefined != this.meta.defaults
										? $.extend(true, {}, this.meta.defaults, this.meta.items[i])
										: this.meta.items[i],
									isGroupingRow, groupValue
								);
								isGroupingRow = false;
							}
						}
						html += App.ElementLibrary[this.meta.constructor].html(this.meta.items[i], isGroupingRow, groupValue);
					}
				}
				$('#' + tid + '_' + this.id).html(html);

				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					var isGroupingRow = false;
					var groupValue = false;

					for (var item in this.meta.items)
					{
						if (this.meta.items[item].grouping == undefined)
						{
							var grouping = false;
						}
						isGroupingRow = undefined == grouping
							? false
							: groupValue != this.meta.items[item].items[grouping.field];

						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							App.ElementLibrary[this.meta.constructor].bind(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item],
							isGroupingRow, groupValue
						);
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					var isGroupingRow = false;
					var groupValue = false;


					for (var item in this.meta.items)
					{

						if (this.meta.items[item].grouping == undefined)
						{
							var grouping = false;
						}
						isGroupingRow = undefined == grouping
							? false
							: groupValue != this.meta.items[item].items[grouping.field];
						if (isGroupingRow)
						{
							groupValue = this.meta.items[item].items[grouping.field];
							App.ElementLibrary[this.meta.constructor].bind(
								undefined != this.meta.defaults
									? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
									: this.meta.items[item],
								isGroupingRow, groupValue
							);
							isGroupingRow = false;
						}
						App.ElementLibrary[this.meta.constructor].bind(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item],
							isGroupingRow, groupValue
						);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridConstructorComponentCollection: function (id)
		{
			this.id = id;
			this.meta = {items: {}};
			this.itemMeta = null;

			this.hydrate = function (template, value)
			{
				if (null == value)
				{
					return template;
				}
				this.meta = value;
				var singleSearch = '';
				var headers = '';
				var filters = '';
				if (this.meta.singleSearchBarId)
				{
					singleSearch += App.ElementLibrary.GridSingleSearch.html(
						this.meta.items,
						this.meta.singleSearchFilterId
					);
				}
				for (var item in this.meta.items)
				{
					headers += App.ElementLibrary.GridColumnHeader.html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
					if (this.meta.filterId)
					{
						filters += App.ElementLibrary.GridColumnFilter.html(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
				var html = template;
				if (this.meta.singleSearchBarId)
				{
					html = html.replace('[' + this.meta.singleSearchBarId + ']', singleSearch);
				}
				html = html.replace('[' + this.meta.headerId + ']', headers);
				if (this.meta.filterId)
				{
					html = html.replace('[' + this.meta.filterId + ']', filters);
				}
				return html;
			};

			this.hydrateLive = function (tid, value)
			{
				if (null == value)
				{
					return;
				}
				this.meta = value;
				var singleSearch = '';
				var headers = '';
				var filters = '';
				if (this.meta.singleSearchBarId)
				{
					singleSearch += App.ElementLibrary.GridSingleSearch.html(
						this.meta.items,
						this.meta.singleSearchFilterId
					);
				}
				for (var item in this.meta.items)
				{
					headers += App.ElementLibrary.GridColumnHeader.html(
						undefined != this.meta.defaults
							? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
							: this.meta.items[item]
					);
					if (this.meta.filterId)
					{
						filters += App.ElementLibrary.GridColumnFilter.html(
							undefined != this.meta.defaults
								? $.extend(true, {}, this.meta.defaults, this.meta.items[item])
								: this.meta.items[item]
						);
					}
				}
				if (this.meta.singleSearchBarId)
				{
					$('#' + tid + '_' + this.meta.singleSearchBarId).html(singleSearch);
				}

				$('#' + tid + '_' + this.headerId).html(headers);
				if (this.meta.filterId)
				{
					$('#' + tid + '_' + this.filterId).html(filters);
				}
				if (undefined == App.ElementLibrary[this.meta.constructor])
				{
					return;
				}
				if (App.ElementLibrary[this.meta.constructor].bind)
				{
					if (this.meta.singleSearchBarId)
					{
						App.ElementLibrary.GridSingleSearch.bind(this.meta.singleSearchFilterId);
					}
					for (var item in this.meta.items)
					{
						App.ElementLibrary.GridColumnHeader.bind(this.meta.items[item]);
						if (this.meta.filterId)
						{
							App.ElementLibrary.GridColumnFilter.bind(this.meta.items[item]);
						}
					}
				}
			};

			this.publish = function (tid)
			{
				if (!this.meta.constructor)
				{
					return;
				}
				if (this.meta.singleSearchBarId)
				{
					App.ElementLibrary.GridSingleSearch.bind(this.meta.singleSearchFilterId);
				}
				for (var item in this.meta.items)
				{
					App.ElementLibrary.GridColumnHeader.bind(this.meta.items[item]);
					if (this.meta.filterId)
					{
						App.ElementLibrary.GridColumnFilter.bind(this.meta.items[item]);
					}
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		Button: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Button.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Button.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Button.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Button.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridPager: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPager.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPager.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.GridPager.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.GridPager.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridPageSize: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPageSize.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridPageSize.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.GridPageSize.bind(this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.GridPageSize.bind(this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		GridRecords: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridRecords.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.GridRecords.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);

			};

			this.publish = function (tid)
			{
				return;
			};

			this.harvest = function (tid)
			{
				return null;
			};
		},

		FieldComponent: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return App.ElementLibrary.Field.harvest(tid, this.meta);
			};
		},

		GroupComponent: function (id)
		{
			this.id = id;
			this.meta = {};

			this.hydrate = function (template, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				return template.replace('[' + this.id + ']', html);
			};

			this.hydrateLive = function (tid, value)
			{
				this.meta = value;
				value = '';
				if (this.meta && this.meta.value)
				{
					value = this.meta.value;
				}
				var html = App.ElementLibrary.Field.html(this.meta, value);
				$('#' + tid + '_' + this.id).html(html);
				if (this.meta)
				{
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.publish = function (tid)
			{
				if (this.meta)
				{
					value = '';
					if (this.meta && this.meta.value)
					{
						value = this.meta.value;
					}
					App.ElementLibrary.Field.setValue(tid, this.meta, value);
					App.ElementLibrary.Field.bind(tid, this.meta);
				}
			};

			this.harvest = function (tid)
			{
				return App.ElementLibrary.Field.harvest(tid, this.meta);
			};
		}


	};
})();

;;
(function ()
{

	_App.API = function ()
	{
		this.initialize();
	};

	_App.API.prototype =
	{

		/**
		 * Internal storage for established contracts and execution responses.
		 */
		contractWait: {},
		taskContracts: {},
		taskExecutions: {},
		routeContracts: {},
		routeExecutions: {},
		requestId: 0,
		requests: [],
		requestCallback: [],
		autoBatch: false,
		conBatching: false,
		conBatch: [],
		currConBatch: 0,
		execBatching: false,
		execBatch: [],
		currExecBatch: 0,

		initialize: function ()
		{
			// Nothing to do here.
		},


		/* ------------------------------------- TASK HANDLING ------------------------------------- */
		/**
		 * Establish a Task Contract with server.
		 * @param id
		 * @param workspace
		 * @param task
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		getTask: function (id, workspace, task, jobId, data, callback, errorCallback)
		{
			if (this.autoBatch)
			{
				if (!this.conBatching)
				{
					// Start a new batch.
					this.conBatching = true;
					this.currConBatch++;
					this.conBatch[this.currConBatch] = [];
					setTimeout($.proxy(function ()
					{
						// Batch end, do a stacked conute.
						var batchnum = this.currConBatch + 0;
						this.conBatching = false;
						this.getTasks(
							this.conBatch[batchnum],
							function () {}
						);
					}, this), 500);
				}
				;

				// Stack the call.
				this.conBatch[this.currConBatch].push({
					id: id,
					workspace: workspace,
					task: task,
					jobId: jobId,
					data: data,
					callback: callback,
					errorCallback: errorCallback
				});
			}
			else
			{
				this.taskContracts[id] = {
					"Callback": callback,
					"ErrorCallback": errorCallback
				};
				jobId = (jobId)
					? jobId
					: null;
				data = (data)
					? data
					: {};
				App.Ajax.JSON({
						"id": id,
						"url": 'workspace/contract-task',
						"data": [{"Workspace": workspace, "Task": task, "JobId": jobId, "Packet": data}]
					},
					$.proxy(this._getTaskSuccess, this),
					$.proxy(this._getTaskError, this)
				);
			}
		},

		/**
		 * Execute callback when contract is available.
		 */
		onContract: function (id, callback)
		{
			if (this.taskContracts[id] && !this.taskContracts[id]['Burn'])
			{
				callback();
			}
			else
			{
				if (undefined == this.contractWait[id])
				{
					this.contractWait[id] = [];
				}
				this.contractWait[id].push(callback);
			}
		},

		/**
		 * Retrieve a Task Contract established with server.
		 * @param id
		 * @returns object|null
		 */
		taskContract: function (id)
		{
			return this.taskContracts[id] && !this.taskContracts[id]['Burn']
				? this.taskContracts[id]
				: null;
		},

		_getTaskSuccess: function (id, response)
		{
			response = response[0];
			if (!this.taskContracts[id])
			{
				return;
			}
			this.taskContracts[id]["Response"] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				this.taskContracts[id]["Hash"] = response.Hash;
				this.taskContracts[id]["LifeTime"] = response.LifeTime;
				if (this.taskContracts[id]['Callback'])
				{
					this.taskContracts[id]['Callback'](response);
				}
				if (undefined != this.contractWait[id])
				{
					for (var i in this.contractWait[id])
					{
						this.contractWait[id][i]();
					}
					delete this.contractWait[id];
				}
			}
		},

		_getTaskError: function (id, error)
		{
			this.taskContracts[id]["Response"] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Establish multiple Task Contracts with server.
		 * @param contracts
		 */
		getTasks: function (contracts, callback)
		{
			var id = this.requestId;
			var requests = [];
			this.requestId++;
			this.requests.push({});
			this.requestCallback.push({
				callback: callback
			});
			for (var i in contracts)
			{
				this.requests[id][i] = contracts[i].id;
				this.taskContracts[contracts[i].id] = {
					"Callback": contracts[i].callback,
					"ErrorCallback": contracts[i].errorCallback
				};
				jobId = (contracts[i].jobId)
					? contracts[i].jobId
					: null;
				data = (contracts[i].data)
					? contracts[i].data
					: {};
				requests.push({
					"Workspace": contracts[i].workspace,
					"Task": contracts[i].task,
					"JobId": jobId,
					"Packet": data
				});
			}
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/contract-task',
					"data": requests
				},
				$.proxy(this._getTasksSuccess, this),
				$.proxy(this._getTaskError, this)
			);
		},

		_getTasksSuccess: function (gid, responses)
		{
			for (var i in responses)
			{
				response = responses[i];
				var id = this.requests[gid][i];
				if (!this.taskContracts[id])
				{
					return;
				}
				this.taskContracts[id]["Response"] = response;
				if (undefined != response.Status && 'Success' != response.Status)
				{
					if (this.taskContracts[id]['ErrorCallback'])
					{
						this.taskContracts[id]['ErrorCallback'](response);
					}
				}
				else
				{
					this.taskContracts[id]["Hash"] = response.Hash;
					this.taskContracts[id]["LifeTime"] = response.LifeTime;
					if (this.taskContracts[id]['Callback'])
					{
						this.taskContracts[id]['Callback'](response);
					}
				}
			}
			if (undefined != this.requestCallback[gid])
			{
				this.requestCallback[gid].callback();
			}
			delete this.requests[gid];
			delete this.requestCallback[gid];
		},

		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTask: function (id, service, task, data, callback, errorCallback, method, direct)
		{
			this.taskContracts[id] = {};
			this.taskContracts[id]["Callback"] = callback;
			this.taskContracts[id]["ErrorCallback"] = errorCallback;
			data = (data)
				? data
				: {};
			if (!method)
			{
				method = 'JSON';
			}
			var packet = {
				"id": id,
				"url": 'api/v1/execute',
				"data": {"Service": service, "Task": task, "Data": data}
			};
			if (direct)
			{
				packet.direct = true;
			}
			App.Ajax[method](
				packet,
				$.proxy(this._execTaskSuccess, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTaskSuccess: function (id, response)
		{
			this.taskExecutions[id] = response;
			if (!this.taskContracts[id])
			{
				//console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
				//console.log(id);
				//console.log(this.taskContracts);
			}
			if (response.Status && 'Success' != response.Status)
			{
				if (this.taskContracts[id] && this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				var callback = this.taskContracts[id]['Callback']
					? this.taskContracts[id]['Callback']
					: false;
				delete this.taskContracts[id];
				if (callback)
				{
					callback(response);
				}
			}
		},

		_execTaskError: function (id, error)
		{
			this.taskExecutions[id] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},


		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTasks: function (contracts, callback)
			//id, data, options, callback, errorCallback, method, direct )
		{
			var gid = this.requestId;
			var requests = [];
			this.requests.push({});
			this.requestCallback.push({
				callback: callback
			});
			this.requestId++;
			for (var i in contracts)
			{
				this.requests[gid][i] = contracts[i].id;
				this.taskContracts[contracts[i].id]["Callback"] = contracts[i].callback;
				this.taskContracts[contracts[i].id]["ErrorCallback"] = contracts[i].errorCallback;
				requests.push({
					"Contract": this.taskContracts[contracts[i].id]["Hash"],
					"Packet": contracts[i].data,
					"Options": contracts[i].options
				});
			}
			App.Ajax.JSON(
				{
					"id": gid,
					"url": 'workspace/execute-task',
					"data": requests
				},
				$.proxy(this._execTasksSuccess, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTasksSuccess: function (gid, responses)
		{
			for (var i in responses)
			{
				response = responses[i];
				var id = this.requests[gid][i];
				this.taskExecutions[id] = response;
				if (!this.taskContracts[id])
				{
					console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
					console.log(id);
					console.log(this.taskContracts);
				}
				if (response.Status && 'Success' != response.Status)
				{
					if (this.taskContracts[id] && this.taskContracts[id]['ErrorCallback'])
					{
						this.taskContracts[id]['ErrorCallback'](response);
					}
				}
				else
				{
					var callback = this.taskContracts[id]['Callback']
						? this.taskContracts[id]['Callback']
						: false;
					if (this.taskContracts[id] && this.taskContracts[id]['LifeTime'] != 'Recurring')
					{
						delete this.taskContracts[id];
					}
					if (callback)
					{
						callback(response);
					}
				}
			}
			if (undefined != this.requestCallback[gid])
			{
				this.requestCallback[gid].callback(responses);
			}
			delete this.requests[gid];
			delete this.requestCallback[gid];
		},

		/**
		 * Execute a Task Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execTaskMulti: function (id, data, options, callback, errorCallback, method, direct)
		{
			if (!this.taskContracts[id])
			{
				//console.log('! No contract for: ' + id);
				return false;
			}
			this.taskContracts[id]["Callback"] = callback;
			this.taskContracts[id]["ErrorCallback"] = errorCallback;
			if (!data)
			{
				return false;
			}
			options = (options)
				? options
				: [];
			if (!method)
			{
				method = 'JSON';
			}
			var packed = [];
			for (var i = 0; i < data.length; i++)
			{
				packed.push({
					"Contract": this.taskContracts[id]["Hash"],
					"Packet": data[i],
					"Options": options[i] ? options[i] : {}
				});
			}
			var packet = {
				"id": id,
				"url": 'workspace/execute-task',
				"data": packed
			};
			if (direct)
			{
				packet.direct = true;
			}
			App.Ajax[method](
				packet,
				$.proxy(this._execTaskSuccessMulti, this),
				$.proxy(this._execTaskError, this)
			);
		},

		_execTaskSuccessMulti: function (id, responses)
		{
			var success = true;
			this.taskExecutions[id] = [];
			for (var i = 0; i < responses.length; i++)
			{
				response = responses[i];
				this.taskExecutions[id].push(response);
				if (!this.taskContracts[id])
				{
					//console.log('Problem with contract execution, likely duplicate execution on UseOnce contract.');
					//console.log(id);
					//console.log(this.taskContracts);
				}
				if (response.Status && 'Success' != response.Status)
				{
					success = false;
				}
			}
			if (!success)
			{
				if (this.taskContracts[id]['ErrorCallback'])
				{
					this.taskContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.taskContracts[id]['Callback'])
				{
					this.taskContracts[id]['Callback'](this.taskExecutions[id]);
				}
				if (this.taskContracts[id]['LifeTime'] != 'Recurring')
				{
					delete this.taskContracts[id];
				}
			}
		},

		_execTaskError: function (id, error)
		{
			this.taskExecutions[id] = error;
			if (this.taskContracts[id]['ErrorCallback'])
			{
				this.taskContracts[id]['ErrorCallback'](error);
			}
		},


		/* ------------------------------------- ROUTE HANDLING ------------------------------------- */
		/**
		 * Directly route an item to a new sate.
		 * @param id
		 * @param workspace
		 * @param route
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		directRoute: function (id, workspace, route, jobId, data, callback, errorCallback)
		{
			this.routeContracts[id] = {
				"Callback": callback,
				"ErrorCallback": errorCallback
			};
			jobId = (jobId)
				? jobId
				: null;
			data = (data)
				? data
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/direct-route',
					"data": [{"Workspace": workspace, "Route": route, "JobId": jobId, "Packet": data}]
				},
				$.proxy(this._directRouteSuccess, this),
				$.proxy(this._directRouteError, this)
			);
		},

		_directRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeExecutions[id] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
				delete this.routeContracts[id];
			}
		},

		_directRouteError: function (id, error)
		{
			this.routeExecutions[id] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Establish a Route Contract with server.
		 * @param id
		 * @param workspace
		 * @param route
		 * @param jobId
		 * @param data
		 * @param callback
		 * @param errorCallback
		 */
		getRoute: function (id, workspace, route, jobId, data, callback, errorCallback)
		{
			this.routeContracts[id] = {
				"Callback": callback,
				"ErrorCallback": errorCallback
			};
			jobId = (jobId)
				? jobId
				: null;
			data = (data)
				? data
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/contract-route',
					"data": [{"Workspace": workspace, "Route": route, "JobId": jobId, "Packet": data}]
				},
				$.proxy(this._getRouteSuccess, this),
				$.proxy(this._getRouteError, this)
			);
		},

		/**
		 * Retrieve a Route Contract established with server.
		 * @param id
		 * @returns object|null
		 */
		routeContract: function (id)
		{
			return this.routeContracts[id]
				? this.routeContracts[id]
				: null;
		},

		_getRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeContracts[id]["Response"] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				this.routeContracts[id]["Hash"] = response.Hash;
				this.routeContracts[id]["LifeTime"] = response.LifeTime;
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
			}
		},

		_getRouteError: function (id, error)
		{
			this.routeContracts[id]["Response"] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		},

		/**
		 * Execute a Route Contract against server.
		 * @param id
		 * @param data
		 * @param options
		 * @param callback
		 * @param errorCallback
		 * @returns boolean|void
		 */
		execRoute: function (id, data, options, callback, errorCallback)
		{
			if (!this.routeContracts[id])
			{
				return false;
			}
			this.routeContracts[id]["Callback"] = callback;
			this.routeContracts[id]["ErrorCallback"] = errorCallback;
			data = (data)
				? data
				: {};
			options = (options)
				? options
				: {};
			App.Ajax.JSON({
					"id": id,
					"url": 'workspace/execute-route',
					"data": [{"Contract": this.routeContracts[id]["Hash"], "Packet": data, "Options": options}]
				},
				$.proxy(this._execRouteSuccess, this),
				$.proxy(this._execRouteError, this)
			);
		},

		_execRouteSuccess: function (id, response)
		{
			response = response[0];
			this.routeExecutions[id] = response;
			if (response.Status && 'Success' != response.Status)
			{
				if (this.routeContracts[id]['ErrorCallback'])
				{
					this.routeContracts[id]['ErrorCallback'](response);
				}
			}
			else
			{
				if (this.routeContracts[id]['Callback'])
				{
					this.routeContracts[id]['Callback'](response);
				}
				if (this.routeContracts[id]['LifeTime'] != 'Recurring')
				{
					delete this.routeContracts[id];
				}
			}
		},

		_execRouteError: function (id, error)
		{
			this.routeExecutions[id] = error;
			if (this.routeContracts[id]['ErrorCallback'])
			{
				this.routeContracts[id]['ErrorCallback'](error);
			}
		}
	};

})();

;;
(function ()
{

	_App.Container = function (args)
	{
		//this.initialize( args );
	};

	_App.Container.prototype =
	{

		containers: {},

		register: function (containerId, contentTarget, setTitle, show, hide, params)
		{
			this.containers[containerId] = params
				? params
				: {};
			this.containers[containerId].contentTarget = contentTarget;
			this.containers[containerId].setTitle = setTitle;
			this.containers[containerId].show = show;
			this.containers[containerId].hide = hide;
		},

		remove: function (containerId)
		{
			if (this.containers[containerId])
			{
				delete this.containers[containerId];
			}
		},

		get: function (containerId)
		{
			if (this.containers[containerId])
			{
				return this.containers[containerId];
			}
		}

	};

})();
;;
(function ()
{

	$(document).ready(function ()
	{
		window._c = {}; // Constructor workspace
		window._t = {}; // Template workspace
		window._r = {}; // Registry
		window.App = new _App();
        var token =  App.Util.getCookie('token', '');
		var hashLoc = window.location.hash.split("#");
		hashLoc = hashLoc[1]
			? hashLoc[1]
			: '/';
		if ('/' != hashLoc && null != hashLoc
		    && '/login' != hashLoc
		    && '/forgot-password' != hashLoc
		    && '/change-password' != hashLoc)
		{
			App.redirect = hashLoc;
		}

        $.ajax(
            {
                type: 'POST',
                url: '/api/users/v1/get-user-data',
                data: JSON.stringify({token:token}),
                success: $.proxy(function (response)
                {
                    if(response.status == "Success")
                    {
                        _w.onActiveAccount(response);
                    }
                    else
                    {
                        _w.onActiveAccountFailure();
                        window.location.hash = "/";
                    }

                }, this),
                error: $.proxy(function (response) {
                    _w.onActiveAccountFailure();
                    window.location.hash = "/";
                }, this)
            });
		_w.onLoad();
	});

})();